#include <math.h>
#include <stdio.h> 
#include <float.h>
#include <stddef.h>
#include <string.h>
#include "Robotics_Calculations.h"
#include "Robotics_Calculations.c"

#define M_PI 3.14159265358979323846


int main() {

    // Wektory parametrów ZDH
    float alpha[7] = {0, -M_PI / 2, 0, M_PI / 2, -M_PI / 2, M_PI / 2, 0};
    float a[7] = {0, 0, 2, 0, 0, 0, 0};
    float d[7] = {3, 0, 0, 1, 0, 2, 1};

    // Macierz transformacji (wypełniona zerami)
    float T[4][4][7] = {0};

    

    // Punkty
    // P1 - home

    float q_P1[7] = {0.5027, -1.9129, 2.8676, 0.0000, 0.6248, 0.0000, 0.0};
    float Eulers_P1[6] = {0};    // Wynik Eulera
    float T_P1[4][4][7] = {0};  // Wynik: macierz transformacji
    ForwardKinematics(alpha, a, q_P1, d, Eulers_P1, T_P1);
    printVector(Eulers_P1, 6, "Eulers_P1");

    // P10 - line
    float q_P10[7] = {0.5027, 0.0873, 2.1258, 2.0106, 1.0018, -0.2513, 0.0};
    float Eulers_P10[6] = {0};
    float T_P10[4][4][7] = {0};
    ForwardKinematics(alpha, a, q_P10, d, Eulers_P10, T_P10);
    printVector(q_P10, 7, "q_P10");

    

    // P_R1 (punkt przed regałem góra)
    float q_P_R1[7] = {1.3, -0.3507, 1.0107, 0, 0, 0, 0};
    float Eulers_P_R1[6] = {0};
    float T_P_R1[4][4][7] = {0};
    ForwardKinematics(alpha, a, q_P_R1, d, Eulers_P_R1, T_P_R1);

    // P_R2 (regał góra)
    float q_P_R2[7] = {1.3, -0.5411, 2.0944, 0, 0, 0, 0};
    float Eulers_P_R2[6] = {0};
    float T_P_R2[4][4][7] = {0};
    ForwardKinematics(alpha, a, q_P_R2, d, Eulers_P_R2, T_P_R2);


    // Zaimplementowanie punktow
    float T_interp_1[4][4][7][10] = {0}, T_interp_2[4][4][7][10] = {0}, T_interp_3[4][4][7][10] = {0}, T_interp_4[4][4][7][10] = {0};

    
    float q_results_1[10][7], q_results_2[10][7], q_results_3[10][7], q_results_4[10][7];

    // Path home -> line

    // uzywam metody Spherical Linear Interpolation (SLERP) do interpolacji macierzy T06 pomiedzy dwoma punktami
    SLERP_interpolation(T_P1, T_P10, 8, T_interp_1);
    printVector(q_P10, 7, "q_P10");
    float q_P2[7], q_P3[7], q_P4[7], q_P5[7], q_P6[7], q_P7[7], q_P8[7], q_P9[7];
    InverseKinematics_Modified(a, d, T_interp_1, 0, q_P1, q_P2);
    InverseKinematics_Modified(a, d, T_interp_1, 1, q_P2, q_P3);
    InverseKinematics_Modified(a, d, T_interp_1, 2, q_P3, q_P4);
    InverseKinematics_Modified(a, d, T_interp_1, 3, q_P4, q_P5);
    InverseKinematics_Modified(a, d, T_interp_1, 4, q_P5, q_P6);
    InverseKinematics_Modified(a, d, T_interp_1, 5, q_P6, q_P7);
    InverseKinematics_Modified(a, d, T_interp_1, 6, q_P7, q_P8);
    InverseKinematics_Modified(a, d, T_interp_1, 7, q_P8, q_P9);

    SavePath(q_results_1, q_P1, q_P2, q_P3, q_P4, q_P5, q_P6, q_P7, q_P8, q_P9, q_P10);
    PrintPath(q_results_1, "Path home -> line");

    // Path line -> home

    SLERP_interpolation(T_P10, T_P1, 8, T_interp_2);
    float q_P12[7], q_P13[7], q_P14[7], q_P15[7], q_P16[7], q_P17[7], q_P18[7], q_P19[7];
    InverseKinematics_Modified(a, d, T_interp_2, 0, q_P10, q_P12);
    InverseKinematics_Modified(a, d, T_interp_2, 1, q_P12, q_P13);
    InverseKinematics_Modified(a, d, T_interp_2, 2, q_P13, q_P14);
    InverseKinematics_Modified(a, d, T_interp_2, 3, q_P14, q_P15);
    InverseKinematics_Modified(a, d, T_interp_2, 4, q_P15, q_P16);
    InverseKinematics_Modified(a, d, T_interp_2, 5, q_P16, q_P17);
    InverseKinematics_Modified(a, d, T_interp_2, 6, q_P17, q_P18);
    InverseKinematics_Modified(a, d, T_interp_2, 7, q_P18, q_P19);

    SavePath(q_results_2, q_P10, q_P12, q_P13, q_P14, q_P15, q_P16, q_P17, q_P18, q_P19, q_P1);
    PrintPath(q_results_2, "Path line -> home");

    // Path home -> P0

    SLERP_interpolation(T_P1, T_P_R1, 8, T_interp_3);
    float q_P22[7], q_P23[7], q_P24[7], q_P25[7], q_P26[7], q_P27[7], q_P28[7], q_P29[7];
    InverseKinematics_Modified(a, d, T_interp_3, 0, q_P1, q_P22);
    InverseKinematics_Modified(a, d, T_interp_3, 1, q_P22, q_P23);
    InverseKinematics_Modified(a, d, T_interp_3, 2, q_P23, q_P24);
    InverseKinematics_Modified(a, d, T_interp_3, 3, q_P24, q_P25);
    InverseKinematics_Modified(a, d, T_interp_3, 4, q_P25, q_P26);
    InverseKinematics_Modified(a, d, T_interp_3, 5, q_P26, q_P27);
    InverseKinematics_Modified(a, d, T_interp_3, 6, q_P27, q_P28);
    InverseKinematics_Modified(a, d, T_interp_3, 7, q_P28, q_P29);

    SavePath(q_results_3, q_P1, q_P22, q_P23, q_P24, q_P25, q_P26, q_P27, q_P28, q_P29, q_P_R1);
    PrintPath(q_results_3, "Path home -> P0");

    // Path P0 -> P1

    SLERP_interpolation(T_P_R1, T_P_R2, 8, T_interp_4);
    float q_P32[7], q_P33[7], q_P34[7], q_P35[7], q_P36[7], q_P37[7], q_P38[7], q_P39[7];
    InverseKinematics_Modified(a, d, T_interp_4, 0, q_P_R1, q_P32);
    InverseKinematics_Modified(a, d, T_interp_4, 1, q_P32, q_P33);
    InverseKinematics_Modified(a, d, T_interp_4, 2, q_P33, q_P34);
    InverseKinematics_Modified(a, d, T_interp_4, 3, q_P34, q_P35);
    InverseKinematics_Modified(a, d, T_interp_4, 4, q_P35, q_P36);
    InverseKinematics_Modified(a, d, T_interp_4, 5, q_P36, q_P37);
    InverseKinematics_Modified(a, d, T_interp_4, 6, q_P37, q_P38);
    InverseKinematics_Modified(a, d, T_interp_4, 7, q_P38, q_P39);

    SavePath(q_results_4, q_P_R1, q_P32, q_P33, q_P34, q_P35, q_P36, q_P37, q_P38, q_P39, q_P_R2);
    PrintPath(q_results_4, "P0  -> P1");
    
    

    return 0;
}
