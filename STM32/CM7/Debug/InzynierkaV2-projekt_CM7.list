
InzynierkaV2-projekt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0f4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800f38c  0800f38c  0001f38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3cc  0800f3cc  000203a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3cc  0800f3cc  0001f3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3d4  0800f3d4  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3d4  0800f3d4  0001f3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3d8  0800f3d8  0001f3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  24000000  0800f3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240002e8  0800f6c4  000202e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000348  0800f724  00020348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000f98  240003a8  0800f784  000203a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24001340  0800f784  00021340  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000203d6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00025097  00000000  00000000  00020419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000039a2  00000000  00000000  000454b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001b50  00000000  00000000  00048e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000156f  00000000  00000000  0004a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ea89  00000000  00000000  0004bf17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000236f0  00000000  00000000  0008a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a48bc  00000000  00000000  000ae090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007814  00000000  00000000  0025294c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000074  00000000  00000000  0025a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240003a8 	.word	0x240003a8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f374 	.word	0x0800f374

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240003ac 	.word	0x240003ac
 80002d4:	0800f374 	.word	0x0800f374

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <HAL_ADC_ConvCpltCallback>:
	float adc_angle[7];
	volatile uint16_t rawValues[7];
	volatile int adcConversionComplete = 0;

	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
	{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
		if (hadc->Instance == ADC3)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a23      	ldr	r2, [pc, #140]	; (800079c <HAL_ADC_ConvCpltCallback+0x9c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d140      	bne.n	8000794 <HAL_ADC_ConvCpltCallback+0x94>
		{
			// Maksymalna wartość dla 16-bitowego ADC
			const uint32_t maxAdcValue = 65536;
 8000712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000716:	613b      	str	r3, [r7, #16]

			for (int i = 0; i < 7; i++) // Iteracja po kanałach
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e034      	b.n	8000788 <HAL_ADC_ConvCpltCallback+0x88>
			{
				float current_angle = (rawValues[i] * 180.0f) / maxAdcValue;
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	b29b      	uxth	r3, r3
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000730:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80007a4 <HAL_ADC_ConvCpltCallback+0xa4>
 8000734:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000746:	edc7 7a03 	vstr	s15, [r7, #12]
				angles[i]=current_angle;
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_ADC_ConvCpltCallback+0xa8>)
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	601a      	str	r2, [r3, #0]
				// Zaokrąglanie do jednego miejsca po przecinku
				angles[i] = round(angles[i]);
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	edd3 7a00 	vldr	s15, [r3]
 8000762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000766:	eeb0 0b47 	vmov.f64	d0, d7
 800076a:	f00e fdbf 	bl	800f2ec <round>
 800076e:	eeb0 7b40 	vmov.f64	d7, d0
 8000772:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < 7; i++) // Iteracja po kanałach
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3301      	adds	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b06      	cmp	r3, #6
 800078c:	ddc7      	ble.n	800071e <HAL_ADC_ConvCpltCallback+0x1e>
			}

			// Flaga zakończenia konwersji
			adcConversionComplete = 1;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_ADC_ConvCpltCallback+0xac>)
 8000790:	2201      	movs	r2, #1
 8000792:	601a      	str	r2, [r3, #0]
		}
	}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58026000 	.word	0x58026000
 80007a0:	2400130c 	.word	0x2400130c
 80007a4:	43340000 	.word	0x43340000
 80007a8:	240012d4 	.word	0x240012d4
 80007ac:	2400131c 	.word	0x2400131c

080007b0 <ADC_To_Angle>:
		{&htim3, TIM_CHANNEL_2, 170.0f, 0.0f, 180.0f, 250, 1250, 43, 150},
		{&htim3, TIM_CHANNEL_4, 26.0f, 10.0f, 80.0f, 250, 1250, 43, 150}
	};


	void ADC_To_Angle() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
		for (int i = 0; i < 7; i++) // Iteracja po kanałach
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	e03a      	b.n	8000832 <ADC_To_Angle+0x82>
		{
			adc_angle[i] = (angles[i] - servos2[i].ADC_MIN) * 180.0f / (servos2[i].ADC_MAX - servos2[i].ADC_MIN);
 80007bc:	4a22      	ldr	r2, [pc, #136]	; (8000848 <ADC_To_Angle+0x98>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	ed93 7a00 	vldr	s14, [r3]
 80007c8:	4920      	ldr	r1, [pc, #128]	; (800084c <ADC_To_Angle+0x9c>)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4613      	mov	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	331c      	adds	r3, #28
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	ee07 3a90 	vmov	s15, r3
 80007de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000850 <ADC_To_Angle+0xa0>
 80007ea:	ee67 6a87 	vmul.f32	s13, s15, s14
 80007ee:	4917      	ldr	r1, [pc, #92]	; (800084c <ADC_To_Angle+0x9c>)
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	4413      	add	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	440b      	add	r3, r1
 80007fc:	3320      	adds	r3, #32
 80007fe:	6819      	ldr	r1, [r3, #0]
 8000800:	4812      	ldr	r0, [pc, #72]	; (800084c <ADC_To_Angle+0x9c>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4613      	mov	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4413      	add	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4403      	add	r3, r0
 800080e:	331c      	adds	r3, #28
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1acb      	subs	r3, r1, r3
 8000814:	ee07 3a90 	vmov	s15, r3
 8000818:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800081c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <ADC_To_Angle+0xa4>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 7; i++) // Iteracja po kanałach
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b06      	cmp	r3, #6
 8000836:	ddc1      	ble.n	80007bc <ADC_To_Angle+0xc>
		}

	}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	240012d4 	.word	0x240012d4
 800084c:	24000008 	.word	0x24000008
 8000850:	43340000 	.word	0x43340000
 8000854:	240012f0 	.word	0x240012f0

08000858 <Servo_SetAngle>:




	void Servo_SetAngle(Servo2 *servo) {
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

		// Sprawdzenie, czy kąt mieści się w zakresie
		if (servo->target_angle < servo->min_angle) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	ed93 7a02 	vldr	s14, [r3, #8]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	edd3 7a03 	vldr	s15, [r3, #12]
 800086c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000874:	d504      	bpl.n	8000880 <Servo_SetAngle+0x28>
			servo->target_angle = servo->min_angle;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	e00e      	b.n	800089e <Servo_SetAngle+0x46>
		} else if (servo->target_angle > servo->max_angle) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	ed93 7a02 	vldr	s14, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	edd3 7a04 	vldr	s15, [r3, #16]
 800088c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000894:	dd03      	ble.n	800089e <Servo_SetAngle+0x46>
			servo->target_angle = servo->max_angle;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	691a      	ldr	r2, [r3, #16]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	609a      	str	r2, [r3, #8]
		}

		// Przeliczenie kąta na wartość impulsu PWM
		// Minimalny puls odpowiada kątowi 0 stopni, maksymalny puls odpowiada kątowi 180 stopni
		uint32_t pulse_range = servo->max_pulse - servo->min_pulse; // Zakres pulsu
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	699a      	ldr	r2, [r3, #24]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	60fb      	str	r3, [r7, #12]
		uint32_t pulse = servo->min_pulse + (uint32_t)((servo->target_angle / 180.0f) * pulse_range);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	edd2 7a02 	vldr	s15, [r2, #8]
 80008b4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8000950 <Servo_SetAngle+0xf8>
 80008b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	ee07 2a90 	vmov	s15, r2
 80008c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ce:	ee17 2a90 	vmov	r2, s15
 80008d2:	4413      	add	r3, r2
 80008d4:	60bb      	str	r3, [r7, #8]

		// Ustawienie wartości PWM dla wybranego kanału
		__HAL_TIM_SET_COMPARE(servo->htim, servo->pwm_channel_in1, pulse);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d105      	bne.n	80008ea <Servo_SetAngle+0x92>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
	}
 80008e8:	e02c      	b.n	8000944 <Servo_SetAngle+0xec>
		__HAL_TIM_SET_COMPARE(servo->htim, servo->pwm_channel_in1, pulse);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d105      	bne.n	80008fe <Servo_SetAngle+0xa6>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	6393      	str	r3, [r2, #56]	; 0x38
	}
 80008fc:	e022      	b.n	8000944 <Servo_SetAngle+0xec>
		__HAL_TIM_SET_COMPARE(servo->htim, servo->pwm_channel_in1, pulse);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	2b08      	cmp	r3, #8
 8000904:	d105      	bne.n	8000912 <Servo_SetAngle+0xba>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
 8000910:	e018      	b.n	8000944 <Servo_SetAngle+0xec>
		__HAL_TIM_SET_COMPARE(servo->htim, servo->pwm_channel_in1, pulse);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	791b      	ldrb	r3, [r3, #4]
 8000916:	2b0c      	cmp	r3, #12
 8000918:	d105      	bne.n	8000926 <Servo_SetAngle+0xce>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
	}
 8000924:	e00e      	b.n	8000944 <Servo_SetAngle+0xec>
		__HAL_TIM_SET_COMPARE(servo->htim, servo->pwm_channel_in1, pulse);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	2b10      	cmp	r3, #16
 800092c:	d105      	bne.n	800093a <Servo_SetAngle+0xe2>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	6593      	str	r3, [r2, #88]	; 0x58
	}
 8000938:	e004      	b.n	8000944 <Servo_SetAngle+0xec>
		__HAL_TIM_SET_COMPARE(servo->htim, servo->pwm_channel_in1, pulse);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	43340000 	.word	0x43340000

08000954 <AverageSamplesByTimer>:




	void AverageSamplesByTimer()
	{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0

		for (int i = 0; i < 7; i++) // Iteracja po kanałach
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e05b      	b.n	8000a18 <AverageSamplesByTimer+0xc4>
		{
			// Dodanie próbki do bufora
			sampleBuffer[i][sampleCounts[i]] = angles[i];
 8000960:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <AverageSamplesByTimer+0xd4>)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	4930      	ldr	r1, [pc, #192]	; (8000a2c <AverageSamplesByTimer+0xd8>)
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	440a      	add	r2, r1
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	482f      	ldr	r0, [pc, #188]	; (8000a30 <AverageSamplesByTimer+0xdc>)
 8000974:	68f9      	ldr	r1, [r7, #12]
 8000976:	2432      	movs	r4, #50	; 0x32
 8000978:	fb04 f101 	mul.w	r1, r4, r1
 800097c:	440b      	add	r3, r1
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4403      	add	r3, r0
 8000982:	601a      	str	r2, [r3, #0]
			sampleCounts[i]++;
 8000984:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <AverageSamplesByTimer+0xd4>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	4926      	ldr	r1, [pc, #152]	; (8000a28 <AverageSamplesByTimer+0xd4>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			// Jeśli zgromadzono wystarczającą liczbę próbek
			if (sampleCounts[i] >= NUM_SAMPLES)
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <AverageSamplesByTimer+0xd4>)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099e:	2b31      	cmp	r3, #49	; 0x31
 80009a0:	dd37      	ble.n	8000a12 <AverageSamplesByTimer+0xbe>
			{
				// Obliczanie średniej
				float sum = 0.0f;
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
				for (int j = 0; j < NUM_SAMPLES; j++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	e013      	b.n	80009d6 <AverageSamplesByTimer+0x82>
				{
					sum += sampleBuffer[i][j];
 80009ae:	4920      	ldr	r1, [pc, #128]	; (8000a30 <AverageSamplesByTimer+0xdc>)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2232      	movs	r2, #50	; 0x32
 80009b4:	fb03 f202 	mul.w	r2, r3, r2
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	440b      	add	r3, r1
 80009c0:	edd3 7a00 	vldr	s15, [r3]
 80009c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80009c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009cc:	edc7 7a02 	vstr	s15, [r7, #8]
				for (int j = 0; j < NUM_SAMPLES; j++)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3301      	adds	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b31      	cmp	r3, #49	; 0x31
 80009da:	dde8      	ble.n	80009ae <AverageSamplesByTimer+0x5a>
				}
				averagedAngles[i] = round(sum / NUM_SAMPLES);
 80009dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80009e0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000a34 <AverageSamplesByTimer+0xe0>
 80009e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ec:	eeb0 0b47 	vmov.f64	d0, d7
 80009f0:	f00e fc7c 	bl	800f2ec <round>
 80009f4:	eeb0 7b40 	vmov.f64	d7, d0
 80009f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <AverageSamplesByTimer+0xe4>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	edc3 7a00 	vstr	s15, [r3]

				// Resetowanie licznika próbek
				sampleCounts[i] = 0;
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <AverageSamplesByTimer+0xd4>)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 7; i++) // Iteracja po kanałach
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	dda0      	ble.n	8000960 <AverageSamplesByTimer+0xc>
			}
		}
	}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	2400129c 	.word	0x2400129c
 8000a2c:	240012d4 	.word	0x240012d4
 8000a30:	24000d24 	.word	0x24000d24
 8000a34:	42480000 	.word	0x42480000
 8000a38:	240012b8 	.word	0x240012b8

08000a3c <PLC_check>:

void PLC_check()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	  if ((HAL_GPIO_ReadPin(PD1_IN1_GPIO_Port,PD1_IN1_Pin)) == GPIO_PIN_RESET )
 8000a40:	2102      	movs	r1, #2
 8000a42:	482f      	ldr	r0, [pc, #188]	; (8000b00 <PLC_check+0xc4>)
 8000a44:	f007 fa5e 	bl	8007f04 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <PLC_check+0x1a>
	  {
		  PLC_IN1=1;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <PLC_check+0xc8>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e002      	b.n	8000a5c <PLC_check+0x20>
	  }
	  else
	  {
		  PLC_IN1=0;
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <PLC_check+0xc8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
	  }

	  if ((HAL_GPIO_ReadPin(PD2_IN2_GPIO_Port,PD2_IN2_Pin)) == GPIO_PIN_RESET )
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	4828      	ldr	r0, [pc, #160]	; (8000b00 <PLC_check+0xc4>)
 8000a60:	f007 fa50 	bl	8007f04 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <PLC_check+0x36>
	  {
		  PLC_IN2=1;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <PLC_check+0xcc>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e002      	b.n	8000a78 <PLC_check+0x3c>
	  }
	  else
	  {
		  PLC_IN2=0;
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <PLC_check+0xcc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
	  }

	  if (PLC_IN1==0 && PLC_IN2==0)
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <PLC_check+0xc8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d107      	bne.n	8000a90 <PLC_check+0x54>
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <PLC_check+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d103      	bne.n	8000a90 <PLC_check+0x54>
	  {
		  PLC_IN_SUM=0;
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <PLC_check+0xd0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	e026      	b.n	8000ade <PLC_check+0xa2>
	  }
	  else if (PLC_IN1==1 && PLC_IN2==0)
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <PLC_check+0xc8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d107      	bne.n	8000aa8 <PLC_check+0x6c>
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <PLC_check+0xcc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <PLC_check+0x6c>
	  {
		  PLC_IN_SUM=1;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <PLC_check+0xd0>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e01a      	b.n	8000ade <PLC_check+0xa2>
	  }
	  else if (PLC_IN1==0 && PLC_IN2==1)
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <PLC_check+0xc8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d107      	bne.n	8000ac0 <PLC_check+0x84>
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <PLC_check+0xcc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d103      	bne.n	8000ac0 <PLC_check+0x84>
	  {
		  PLC_IN_SUM=2;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <PLC_check+0xd0>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	e00e      	b.n	8000ade <PLC_check+0xa2>
	  }
	  else if (PLC_IN1==1 && PLC_IN2==1)
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <PLC_check+0xc8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d107      	bne.n	8000ad8 <PLC_check+0x9c>
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <PLC_check+0xcc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d103      	bne.n	8000ad8 <PLC_check+0x9c>
	  {
		  PLC_IN_SUM=3;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <PLC_check+0xd0>)
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e002      	b.n	8000ade <PLC_check+0xa2>
	  }
	  else
	  {
		  PLC_IN_SUM=9;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <PLC_check+0xd0>)
 8000ada:	2209      	movs	r2, #9
 8000adc:	601a      	str	r2, [r3, #0]
	  }

	  if(PLC_OUT == 1)
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <PLC_check+0xd4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d105      	bne.n	8000af2 <PLC_check+0xb6>
	  {
		  HAL_GPIO_WritePin(PD3_OUT_GPIO_Port,PD3_OUT_Pin, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2108      	movs	r1, #8
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <PLC_check+0xc4>)
 8000aec:	f007 fa22 	bl	8007f34 <HAL_GPIO_WritePin>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(PD3_OUT_GPIO_Port,PD3_OUT_Pin, GPIO_PIN_RESET);
	  }
}
 8000af0:	e004      	b.n	8000afc <PLC_check+0xc0>
		  HAL_GPIO_WritePin(PD3_OUT_GPIO_Port,PD3_OUT_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2108      	movs	r1, #8
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <PLC_check+0xc4>)
 8000af8:	f007 fa1c 	bl	8007f34 <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58020c00 	.word	0x58020c00
 8000b04:	24000d14 	.word	0x24000d14
 8000b08:	24000d18 	.word	0x24000d18
 8000b0c:	24000d1c 	.word	0x24000d1c
 8000b10:	24000d20 	.word	0x24000d20

08000b14 <ROBOT_ALARM>:
int alarm_led_on=0;
int alarm_led_off=0;
int PLC_polka=0;

void ROBOT_ALARM()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	if (alarm == 1)
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <ROBOT_ALARM+0x98>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d142      	bne.n	8000ba6 <ROBOT_ALARM+0x92>
	{
		if (alarm_set == 0)
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <ROBOT_ALARM+0x9c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11f      	bne.n	8000b68 <ROBOT_ALARM+0x54>
		{
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin , GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <ROBOT_ALARM+0xa0>)
 8000b2e:	f007 fa01 	bl	8007f34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin , GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2102      	movs	r1, #2
 8000b36:	4820      	ldr	r0, [pc, #128]	; (8000bb8 <ROBOT_ALARM+0xa4>)
 8000b38:	f007 f9fc 	bl	8007f34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin , GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b42:	481c      	ldr	r0, [pc, #112]	; (8000bb4 <ROBOT_ALARM+0xa0>)
 8000b44:	f007 f9f6 	bl	8007f34 <HAL_GPIO_WritePin>
			if (alarm_led_on>50)
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <ROBOT_ALARM+0xa8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b32      	cmp	r3, #50	; 0x32
 8000b4e:	dd05      	ble.n	8000b5c <ROBOT_ALARM+0x48>
			{
				alarm_set=1;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <ROBOT_ALARM+0x9c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
				alarm_led_on=0;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <ROBOT_ALARM+0xa8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
			}
			alarm_led_on++;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <ROBOT_ALARM+0xa8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <ROBOT_ALARM+0xa8>)
 8000b64:	6013      	str	r3, [r2, #0]




	}
}
 8000b66:	e01e      	b.n	8000ba6 <ROBOT_ALARM+0x92>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin , GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <ROBOT_ALARM+0xa0>)
 8000b6e:	f007 f9e1 	bl	8007f34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin , GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2102      	movs	r1, #2
 8000b76:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <ROBOT_ALARM+0xa4>)
 8000b78:	f007 f9dc 	bl	8007f34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin , GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <ROBOT_ALARM+0xa0>)
 8000b84:	f007 f9d6 	bl	8007f34 <HAL_GPIO_WritePin>
			if (alarm_led_off>50)
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <ROBOT_ALARM+0xac>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b32      	cmp	r3, #50	; 0x32
 8000b8e:	dd05      	ble.n	8000b9c <ROBOT_ALARM+0x88>
				alarm_set=0;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <ROBOT_ALARM+0x9c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
				alarm_led_off=0;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <ROBOT_ALARM+0xac>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
			alarm_led_off++;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <ROBOT_ALARM+0xac>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <ROBOT_ALARM+0xac>)
 8000ba4:	6013      	str	r3, [r2, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	24001320 	.word	0x24001320
 8000bb0:	24001324 	.word	0x24001324
 8000bb4:	58020400 	.word	0x58020400
 8000bb8:	58021000 	.word	0x58021000
 8000bbc:	24001328 	.word	0x24001328
 8000bc0:	2400132c 	.word	0x2400132c

08000bc4 <HAL_TIM_PeriodElapsedCallback>:



	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM7) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d112      	bne.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x38>

				for (int i = 0; i < 7; i++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e00c      	b.n	8000bf6 <HAL_TIM_PeriodElapsedCallback+0x32>
				{
					Servo_SetAngle(&servos2[i]);
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000be8:	4413      	add	r3, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fe34 	bl	8000858 <Servo_SetAngle>
				for (int i = 0; i < 7; i++)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	ddef      	ble.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x18>
				}
		}
		if (htim->Instance == TIM6)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d107      	bne.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			AverageSamplesByTimer();
 8000c06:	f7ff fea5 	bl	8000954 <AverageSamplesByTimer>
			ADC_To_Angle();
 8000c0a:	f7ff fdd1 	bl	80007b0 <ADC_To_Angle>
			PLC_check();
 8000c0e:	f7ff ff15 	bl	8000a3c <PLC_check>
			ROBOT_ALARM();
 8000c12:	f7ff ff7f 	bl	8000b14 <ROBOT_ALARM>


		}
	}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40001400 	.word	0x40001400
 8000c24:	24000008 	.word	0x24000008
 8000c28:	40001000 	.word	0x40001000

08000c2c <Robot_SetPosition>:
typedef struct {
    float angles[7]; // Kąty dla 7 serwomechanizmów
} RobotPosition;

/* Funkcja do płynnego przechodzenia między kątami */
void Robot_SetPosition(Servo2 servos[], RobotPosition *current_position, RobotPosition target_position, float step) {
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	f107 0120 	add.w	r1, r7, #32
 8000c3c:	e881 000c 	stmia.w	r1, {r2, r3}
 8000c40:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < 7; i++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e06f      	b.n	8000d2a <Robot_SetPosition+0xfe>
        if (fabsf(current_position->angles[i] - target_position.angles[i]) > step) {
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	ed93 7a00 	vldr	s14, [r3]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	3320      	adds	r3, #32
 8000c5c:	443b      	add	r3, r7
 8000c5e:	edd3 7a00 	vldr	s15, [r3]
 8000c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c66:	eef0 7ae7 	vabs.f32	s15, s15
 8000c6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c76:	d532      	bpl.n	8000cde <Robot_SetPosition+0xb2>
            // Zwiększanie lub zmniejszanie kąta w stronę docelowego
            if (current_position->angles[i] < target_position.angles[i]) {
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	ed93 7a00 	vldr	s14, [r3]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	3320      	adds	r3, #32
 8000c8a:	443b      	add	r3, r7
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c98:	d510      	bpl.n	8000cbc <Robot_SetPosition+0x90>
                current_position->angles[i] += step;
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	ed93 7a00 	vldr	s14, [r3]
 8000ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	edc3 7a00 	vstr	s15, [r3]
 8000cba:	e01a      	b.n	8000cf2 <Robot_SetPosition+0xc6>
            } else {
                current_position->angles[i] -= step;
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	ed93 7a00 	vldr	s14, [r3]
 8000cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	edc3 7a00 	vstr	s15, [r3]
 8000cdc:	e009      	b.n	8000cf2 <Robot_SetPosition+0xc6>
            }
        } else {
            // Ustawianie dokładnego kąta, jeśli różnica jest mniejsza od kroku
            current_position->angles[i] = target_position.angles[i];
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	3320      	adds	r3, #32
 8000ce4:	443b      	add	r3, r7
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	601a      	str	r2, [r3, #0]
        }
        // Aktualizacja serwomechanizmu
        servos[i].target_angle = current_position->angles[i];
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4413      	add	r3, r2
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	440a      	add	r2, r1
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	609a      	str	r2, [r3, #8]
        Servo_SetAngle(&servos[i]);
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	4613      	mov	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd9a 	bl	8000858 <Servo_SetAngle>
    for (int i = 0; i < 7; i++) {
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	dd8c      	ble.n	8000c4a <Robot_SetPosition+0x1e>
    }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d3c:	b002      	add	sp, #8
 8000d3e:	4770      	bx	lr

08000d40 <Robot_MoveToPosition>:

/* Funkcja obsługująca logikę przejścia między pozycjami */
void Robot_MoveToPosition(Servo2 servos[], RobotPosition *current_position, RobotPosition target_position, float step, uint16_t delay_ms) {
 8000d40:	b082      	sub	sp, #8
 8000d42:	b5b0      	push	{r4, r5, r7, lr}
 8000d44:	b08c      	sub	sp, #48	; 0x30
 8000d46:	af06      	add	r7, sp, #24
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d50:	e881 000c 	stmia.w	r1, {r2, r3}
 8000d54:	ed87 0a01 	vstr	s0, [r7, #4]
    while (1) {
        bool all_positions_reached = true;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	75fb      	strb	r3, [r7, #23]

        // Aktualizuj pozycję serwomechanizmów
        Robot_SetPosition(servos, current_position, target_position, step);
 8000d5c:	466d      	mov	r5, sp
 8000d5e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	602b      	str	r3, [r5, #0]
 8000d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6e:	cb0c      	ldmia	r3, {r2, r3}
 8000d70:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff ff58 	bl	8000c2c <Robot_SetPosition>

        // Sprawdzanie, czy wszystkie kąty osiągnęły docelowe wartości
        for (int i = 0; i < 7; i++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	e01c      	b.n	8000dbc <Robot_MoveToPosition+0x7c>
            if (fabsf(current_position->angles[i] - target_position.angles[i]) > step) {
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	ed93 7a00 	vldr	s14, [r3]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	3328      	adds	r3, #40	; 0x28
 8000d94:	443b      	add	r3, r7
 8000d96:	edd3 7a00 	vldr	s15, [r3]
 8000d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000da2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dae:	d502      	bpl.n	8000db6 <Robot_MoveToPosition+0x76>
                all_positions_reached = false;
 8000db0:	2300      	movs	r3, #0
 8000db2:	75fb      	strb	r3, [r7, #23]
                break;
 8000db4:	e005      	b.n	8000dc2 <Robot_MoveToPosition+0x82>
        for (int i = 0; i < 7; i++) {
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	3301      	adds	r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	dddf      	ble.n	8000d82 <Robot_MoveToPosition+0x42>
            }
        }

        if (all_positions_reached) {
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d105      	bne.n	8000dd4 <Robot_MoveToPosition+0x94>
            break; // Wyjdź z pętli, jeśli wszystkie kąty są w docelowych pozycjach
        }

        HAL_Delay(delay_ms); // Opóźnienie dla płynności ruchu
 8000dc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fe91 	bl	8002af4 <HAL_Delay>
    while (1) {
 8000dd2:	e7c1      	b.n	8000d58 <Robot_MoveToPosition+0x18>
            break; // Wyjdź z pętli, jeśli wszystkie kąty są w docelowych pozycjach
 8000dd4:	bf00      	nop
    }
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000de0:	b002      	add	sp, #8
 8000de2:	4770      	bx	lr

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de6:	b091      	sub	sp, #68	; 0x44
 8000de8:	af06      	add	r7, sp, #24

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	  /* Wait until CPU2 boots and enters in stop mode or timeout*/


	  timeout = 0xFFFF;
 8000dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
	  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000df0:	bf00      	nop
 8000df2:	4bbd      	ldr	r3, [pc, #756]	; (80010e8 <main+0x304>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <main+0x24>
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	627a      	str	r2, [r7, #36]	; 0x24
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	dcf4      	bgt.n	8000df2 <main+0xe>
	  if ( timeout < 0 )
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da01      	bge.n	8000e12 <main+0x2e>
	  {
	  Error_Handler();
 8000e0e:	f001 f8c1 	bl	8001f94 <Error_Handler>
	  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f001 fddd 	bl	80029d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 faa3 	bl	8001360 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e1a:	f000 fb21 	bl	8001460 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e1e:	4bb2      	ldr	r3, [pc, #712]	; (80010e8 <main+0x304>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4ab0      	ldr	r2, [pc, #704]	; (80010e8 <main+0x304>)
 8000e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4bae      	ldr	r3, [pc, #696]	; (80010e8 <main+0x304>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e38:	623b      	str	r3, [r7, #32]
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f007 f893 	bl	8007f68 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f007 f8a9 	bl	8007f9c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e50:	bf00      	nop
 8000e52:	4ba5      	ldr	r3, [pc, #660]	; (80010e8 <main+0x304>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d104      	bne.n	8000e68 <main+0x84>
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	627a      	str	r2, [r7, #36]	; 0x24
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	dcf4      	bgt.n	8000e52 <main+0x6e>
	if ( timeout < 0 )
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	da01      	bge.n	8000e72 <main+0x8e>
	{
	Error_Handler();
 8000e6e:	f001 f891 	bl	8001f94 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e72:	f000 ffb9 	bl	8001de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e76:	f000 ff97 	bl	8001da8 <MX_DMA_Init>
  MX_ADC3_Init();
 8000e7a:	f000 fb0f 	bl	800149c <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e7e:	f000 ff61 	bl	8001d44 <MX_USB_OTG_FS_PCD_Init>
  MX_ETH_Init();
 8000e82:	f000 fbd1 	bl	8001628 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e86:	f000 ff11 	bl	8001cac <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8000e8a:	f000 febb 	bl	8001c04 <MX_TIM8_Init>
  MX_TIM3_Init();
 8000e8e:	f000 fcaf 	bl	80017f0 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000e92:	f000 fe81 	bl	8001b98 <MX_TIM7_Init>
  MX_TIM4_Init();
 8000e96:	f000 fd39 	bl	800190c <MX_TIM4_Init>
  MX_TIM6_Init();
 8000e9a:	f000 fe47 	bl	8001b2c <MX_TIM6_Init>
  MX_TIM2_Init();
 8000e9e:	f000 fc0f 	bl	80016c0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000ea2:	f000 fdcb 	bl	8001a3c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	 // HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)rawValues, 7);
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	4990      	ldr	r1, [pc, #576]	; (80010ec <main+0x308>)
 8000eaa:	4891      	ldr	r0, [pc, #580]	; (80010f0 <main+0x30c>)
 8000eac:	f002 fa26 	bl	80032fc <HAL_ADC_Start_DMA>
	  HAL_TIM_Base_Start(&htim8);
 8000eb0:	4890      	ldr	r0, [pc, #576]	; (80010f4 <main+0x310>)
 8000eb2:	f00a ff5d 	bl	800bd70 <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start_IT(&htim7);
 8000eb6:	4890      	ldr	r0, [pc, #576]	; (80010f8 <main+0x314>)
 8000eb8:	f00a ffca 	bl	800be50 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim6);
 8000ebc:	488f      	ldr	r0, [pc, #572]	; (80010fc <main+0x318>)
 8000ebe:	f00a ffc7 	bl	800be50 <HAL_TIM_Base_Start_IT>

	  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	488e      	ldr	r0, [pc, #568]	; (8001100 <main+0x31c>)
 8000ec6:	f00b f89d 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000eca:	2104      	movs	r1, #4
 8000ecc:	488c      	ldr	r0, [pc, #560]	; (8001100 <main+0x31c>)
 8000ece:	f00b f899 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_3);
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	488a      	ldr	r0, [pc, #552]	; (8001100 <main+0x31c>)
 8000ed6:	f00b f895 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_4);
 8000eda:	210c      	movs	r1, #12
 8000edc:	4888      	ldr	r0, [pc, #544]	; (8001100 <main+0x31c>)
 8000ede:	f00b f891 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_Base_Start_IT(&htim4);
 8000ee2:	4887      	ldr	r0, [pc, #540]	; (8001100 <main+0x31c>)
 8000ee4:	f00a ffb4 	bl	800be50 <HAL_TIM_Base_Start_IT>

	  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4886      	ldr	r0, [pc, #536]	; (8001104 <main+0x320>)
 8000eec:	f00b f88a 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	4884      	ldr	r0, [pc, #528]	; (8001104 <main+0x320>)
 8000ef4:	f00b f886 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_3);
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4882      	ldr	r0, [pc, #520]	; (8001104 <main+0x320>)
 8000efc:	f00b f882 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_4);
 8000f00:	210c      	movs	r1, #12
 8000f02:	4880      	ldr	r0, [pc, #512]	; (8001104 <main+0x320>)
 8000f04:	f00b f87e 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8000f08:	487e      	ldr	r0, [pc, #504]	; (8001104 <main+0x320>)
 8000f0a:	f00a ffa1 	bl	800be50 <HAL_TIM_Base_Start_IT>

	  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	487d      	ldr	r0, [pc, #500]	; (8001108 <main+0x324>)
 8000f12:	f00b f877 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000f16:	2104      	movs	r1, #4
 8000f18:	487b      	ldr	r0, [pc, #492]	; (8001108 <main+0x324>)
 8000f1a:	f00b f873 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_4);
 8000f1e:	210c      	movs	r1, #12
 8000f20:	4879      	ldr	r0, [pc, #484]	; (8001108 <main+0x324>)
 8000f22:	f00b f86f 	bl	800c004 <HAL_TIM_IC_Start>
	  HAL_TIM_Base_Start_IT(&htim3);
 8000f26:	4878      	ldr	r0, [pc, #480]	; (8001108 <main+0x324>)
 8000f28:	f00a ff92 	bl	800be50 <HAL_TIM_Base_Start_IT>

	  Servo_SetAngle(&servos2[0]);
 8000f2c:	4877      	ldr	r0, [pc, #476]	; (800110c <main+0x328>)
 8000f2e:	f7ff fc93 	bl	8000858 <Servo_SetAngle>
	  Servo_SetAngle(&servos2[1]);
 8000f32:	4877      	ldr	r0, [pc, #476]	; (8001110 <main+0x32c>)
 8000f34:	f7ff fc90 	bl	8000858 <Servo_SetAngle>
	  Servo_SetAngle(&servos2[2]);
 8000f38:	4876      	ldr	r0, [pc, #472]	; (8001114 <main+0x330>)
 8000f3a:	f7ff fc8d 	bl	8000858 <Servo_SetAngle>
	  Servo_SetAngle(&servos2[3]);
 8000f3e:	4876      	ldr	r0, [pc, #472]	; (8001118 <main+0x334>)
 8000f40:	f7ff fc8a 	bl	8000858 <Servo_SetAngle>
	  Servo_SetAngle(&servos2[4]);
 8000f44:	4875      	ldr	r0, [pc, #468]	; (800111c <main+0x338>)
 8000f46:	f7ff fc87 	bl	8000858 <Servo_SetAngle>
	  Servo_SetAngle(&servos2[5]);
 8000f4a:	4875      	ldr	r0, [pc, #468]	; (8001120 <main+0x33c>)
 8000f4c:	f7ff fc84 	bl	8000858 <Servo_SetAngle>
	  Servo_SetAngle(&servos2[6]);
 8000f50:	4874      	ldr	r0, [pc, #464]	; (8001124 <main+0x340>)
 8000f52:	f7ff fc81 	bl	8000858 <Servo_SetAngle>
  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
		  //Sterowanie2();

		  if (PLC_IN_SUM>0)
 8000f56:	4b74      	ldr	r3, [pc, #464]	; (8001128 <main+0x344>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	ddfb      	ble.n	8000f56 <main+0x172>
		  {
			  PLC_polka=PLC_IN_SUM;
 8000f5e:	4b72      	ldr	r3, [pc, #456]	; (8001128 <main+0x344>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a72      	ldr	r2, [pc, #456]	; (800112c <main+0x348>)
 8000f64:	6013      	str	r3, [r2, #0]
			  PLC_OUT=1;
 8000f66:	4b72      	ldr	r3, [pc, #456]	; (8001130 <main+0x34c>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
			  RobotPosition current_position = home_position;
 8000f6c:	4b71      	ldr	r3, [pc, #452]	; (8001134 <main+0x350>)
 8000f6e:	1d3c      	adds	r4, r7, #4
 8000f70:	461d      	mov	r5, r3
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

			  Robot_MoveToPosition(servos2, &current_position, home_position, 10.0f, 50);
 8000f7e:	4e6d      	ldr	r6, [pc, #436]	; (8001134 <main+0x350>)
 8000f80:	f107 0c04 	add.w	ip, r7, #4
 8000f84:	2332      	movs	r3, #50	; 0x32
 8000f86:	9305      	str	r3, [sp, #20]
 8000f88:	466d      	mov	r5, sp
 8000f8a:	f106 0408 	add.w	r4, r6, #8
 8000f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	602b      	str	r3, [r5, #0]
 8000f96:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000f9a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000f9e:	4661      	mov	r1, ip
 8000fa0:	485a      	ldr	r0, [pc, #360]	; (800110c <main+0x328>)
 8000fa2:	f7ff fecd 	bl	8000d40 <Robot_MoveToPosition>

			  // Przejście do pozycji odbioru
			  Robot_MoveToPosition(servos2, &current_position, pick_position_1, 10.0f, 50);
 8000fa6:	4e64      	ldr	r6, [pc, #400]	; (8001138 <main+0x354>)
 8000fa8:	f107 0c04 	add.w	ip, r7, #4
 8000fac:	2332      	movs	r3, #50	; 0x32
 8000fae:	9305      	str	r3, [sp, #20]
 8000fb0:	466d      	mov	r5, sp
 8000fb2:	f106 0408 	add.w	r4, r6, #8
 8000fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	602b      	str	r3, [r5, #0]
 8000fbe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000fc2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000fc6:	4661      	mov	r1, ip
 8000fc8:	4850      	ldr	r0, [pc, #320]	; (800110c <main+0x328>)
 8000fca:	f7ff feb9 	bl	8000d40 <Robot_MoveToPosition>
			  Robot_MoveToPosition(servos2, &current_position, pick_position_2, 10.0f, 50);
 8000fce:	4e5b      	ldr	r6, [pc, #364]	; (800113c <main+0x358>)
 8000fd0:	f107 0c04 	add.w	ip, r7, #4
 8000fd4:	2332      	movs	r3, #50	; 0x32
 8000fd6:	9305      	str	r3, [sp, #20]
 8000fd8:	466d      	mov	r5, sp
 8000fda:	f106 0408 	add.w	r4, r6, #8
 8000fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	602b      	str	r3, [r5, #0]
 8000fe6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000fea:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000fee:	4661      	mov	r1, ip
 8000ff0:	4846      	ldr	r0, [pc, #280]	; (800110c <main+0x328>)
 8000ff2:	f7ff fea5 	bl	8000d40 <Robot_MoveToPosition>
			  Robot_MoveToPosition(servos2, &current_position, pick_position_3, 1.0f, 80);
 8000ff6:	4e52      	ldr	r6, [pc, #328]	; (8001140 <main+0x35c>)
 8000ff8:	f107 0c04 	add.w	ip, r7, #4
 8000ffc:	2350      	movs	r3, #80	; 0x50
 8000ffe:	9305      	str	r3, [sp, #20]
 8001000:	466d      	mov	r5, sp
 8001002:	f106 0408 	add.w	r4, r6, #8
 8001006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	602b      	str	r3, [r5, #0]
 800100e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001012:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001016:	4661      	mov	r1, ip
 8001018:	483c      	ldr	r0, [pc, #240]	; (800110c <main+0x328>)
 800101a:	f7ff fe91 	bl	8000d40 <Robot_MoveToPosition>
			  Robot_MoveToPosition(servos2, &current_position, pick_position_4, 1.0f, 80);
 800101e:	4e49      	ldr	r6, [pc, #292]	; (8001144 <main+0x360>)
 8001020:	f107 0c04 	add.w	ip, r7, #4
 8001024:	2350      	movs	r3, #80	; 0x50
 8001026:	9305      	str	r3, [sp, #20]
 8001028:	466d      	mov	r5, sp
 800102a:	f106 0408 	add.w	r4, r6, #8
 800102e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	602b      	str	r3, [r5, #0]
 8001036:	e896 000c 	ldmia.w	r6, {r2, r3}
 800103a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800103e:	4661      	mov	r1, ip
 8001040:	4832      	ldr	r0, [pc, #200]	; (800110c <main+0x328>)
 8001042:	f7ff fe7d 	bl	8000d40 <Robot_MoveToPosition>
			  Robot_MoveToPosition(servos2, &current_position, pick_position_5, 1.0f, 80);
 8001046:	4e40      	ldr	r6, [pc, #256]	; (8001148 <main+0x364>)
 8001048:	f107 0c04 	add.w	ip, r7, #4
 800104c:	2350      	movs	r3, #80	; 0x50
 800104e:	9305      	str	r3, [sp, #20]
 8001050:	466d      	mov	r5, sp
 8001052:	f106 0408 	add.w	r4, r6, #8
 8001056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	602b      	str	r3, [r5, #0]
 800105e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001062:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001066:	4661      	mov	r1, ip
 8001068:	4828      	ldr	r0, [pc, #160]	; (800110c <main+0x328>)
 800106a:	f7ff fe69 	bl	8000d40 <Robot_MoveToPosition>
			  // Przejście do pozycji chwytania
			  HAL_Delay(2000);
 800106e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001072:	f001 fd3f 	bl	8002af4 <HAL_Delay>
			  Robot_MoveToPosition(servos2, &current_position, grip_position_1, 10.0f, 100);
 8001076:	4e35      	ldr	r6, [pc, #212]	; (800114c <main+0x368>)
 8001078:	f107 0c04 	add.w	ip, r7, #4
 800107c:	2364      	movs	r3, #100	; 0x64
 800107e:	9305      	str	r3, [sp, #20]
 8001080:	466d      	mov	r5, sp
 8001082:	f106 0408 	add.w	r4, r6, #8
 8001086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	602b      	str	r3, [r5, #0]
 800108e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001092:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001096:	4661      	mov	r1, ip
 8001098:	481c      	ldr	r0, [pc, #112]	; (800110c <main+0x328>)
 800109a:	f7ff fe51 	bl	8000d40 <Robot_MoveToPosition>
			  HAL_Delay(2000);
 800109e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010a2:	f001 fd27 	bl	8002af4 <HAL_Delay>
			  Robot_MoveToPosition(servos2, &current_position, grip_position_2, 10.0f, 100);
 80010a6:	4e2a      	ldr	r6, [pc, #168]	; (8001150 <main+0x36c>)
 80010a8:	f107 0c04 	add.w	ip, r7, #4
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	9305      	str	r3, [sp, #20]
 80010b0:	466d      	mov	r5, sp
 80010b2:	f106 0408 	add.w	r4, r6, #8
 80010b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	602b      	str	r3, [r5, #0]
 80010be:	e896 000c 	ldmia.w	r6, {r2, r3}
 80010c2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80010c6:	4661      	mov	r1, ip
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <main+0x328>)
 80010ca:	f7ff fe39 	bl	8000d40 <Robot_MoveToPosition>
			  Robot_MoveToPosition(servos2, &current_position, home_grip, 1.0f, 50);
 80010ce:	4e21      	ldr	r6, [pc, #132]	; (8001154 <main+0x370>)
 80010d0:	f107 0c04 	add.w	ip, r7, #4
 80010d4:	2332      	movs	r3, #50	; 0x32
 80010d6:	9305      	str	r3, [sp, #20]
 80010d8:	466d      	mov	r5, sp
 80010da:	f106 0408 	add.w	r4, r6, #8
 80010de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	602b      	str	r3, [r5, #0]
 80010e6:	e037      	b.n	8001158 <main+0x374>
 80010e8:	58024400 	.word	0x58024400
 80010ec:	2400130c 	.word	0x2400130c
 80010f0:	240003fc 	.word	0x240003fc
 80010f4:	24000750 	.word	0x24000750
 80010f8:	24000704 	.word	0x24000704
 80010fc:	240006b8 	.word	0x240006b8
 8001100:	24000620 	.word	0x24000620
 8001104:	24000588 	.word	0x24000588
 8001108:	240005d4 	.word	0x240005d4
 800110c:	24000008 	.word	0x24000008
 8001110:	2400002c 	.word	0x2400002c
 8001114:	24000050 	.word	0x24000050
 8001118:	24000074 	.word	0x24000074
 800111c:	24000098 	.word	0x24000098
 8001120:	240000bc 	.word	0x240000bc
 8001124:	240000e0 	.word	0x240000e0
 8001128:	24000d1c 	.word	0x24000d1c
 800112c:	24001330 	.word	0x24001330
 8001130:	24000d20 	.word	0x24000d20
 8001134:	24000104 	.word	0x24000104
 8001138:	24000120 	.word	0x24000120
 800113c:	2400013c 	.word	0x2400013c
 8001140:	24000158 	.word	0x24000158
 8001144:	24000174 	.word	0x24000174
 8001148:	24000190 	.word	0x24000190
 800114c:	240001ac 	.word	0x240001ac
 8001150:	240001c8 	.word	0x240001c8
 8001154:	240001e4 	.word	0x240001e4
 8001158:	e896 000c 	ldmia.w	r6, {r2, r3}
 800115c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001160:	4661      	mov	r1, ip
 8001162:	4874      	ldr	r0, [pc, #464]	; (8001334 <main+0x550>)
 8001164:	f7ff fdec 	bl	8000d40 <Robot_MoveToPosition>



			  switch (PLC_polka) {
 8001168:	4b73      	ldr	r3, [pc, #460]	; (8001338 <main+0x554>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b03      	cmp	r3, #3
 800116e:	f000 80ca 	beq.w	8001306 <main+0x522>
 8001172:	2b03      	cmp	r3, #3
 8001174:	f73f aeef 	bgt.w	8000f56 <main+0x172>
 8001178:	2b01      	cmp	r3, #1
 800117a:	d003      	beq.n	8001184 <main+0x3a0>
 800117c:	2b02      	cmp	r3, #2
 800117e:	f000 80ad 	beq.w	80012dc <main+0x4f8>
 8001182:	e0d5      	b.n	8001330 <main+0x54c>
			      case 1:
			          Robot_MoveToPosition(servos2, &current_position, shelf1_position_1, 10.0f, 100);
 8001184:	4e6d      	ldr	r6, [pc, #436]	; (800133c <main+0x558>)
 8001186:	f107 0c04 	add.w	ip, r7, #4
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	9305      	str	r3, [sp, #20]
 800118e:	466d      	mov	r5, sp
 8001190:	f106 0408 	add.w	r4, r6, #8
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	602b      	str	r3, [r5, #0]
 800119c:	e896 000c 	ldmia.w	r6, {r2, r3}
 80011a0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80011a4:	4661      	mov	r1, ip
 80011a6:	4863      	ldr	r0, [pc, #396]	; (8001334 <main+0x550>)
 80011a8:	f7ff fdca 	bl	8000d40 <Robot_MoveToPosition>
			          Robot_MoveToPosition(servos2, &current_position, shelf1_position_2, 10.0f, 100);
 80011ac:	4e64      	ldr	r6, [pc, #400]	; (8001340 <main+0x55c>)
 80011ae:	f107 0c04 	add.w	ip, r7, #4
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9305      	str	r3, [sp, #20]
 80011b6:	466d      	mov	r5, sp
 80011b8:	f106 0408 	add.w	r4, r6, #8
 80011bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	602b      	str	r3, [r5, #0]
 80011c4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80011c8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80011cc:	4661      	mov	r1, ip
 80011ce:	4859      	ldr	r0, [pc, #356]	; (8001334 <main+0x550>)
 80011d0:	f7ff fdb6 	bl	8000d40 <Robot_MoveToPosition>
			          HAL_Delay(2000);
 80011d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011d8:	f001 fc8c 	bl	8002af4 <HAL_Delay>
			          Robot_MoveToPosition(servos2, &current_position, shelf1_position_3, 1.0f, 80);
 80011dc:	4e59      	ldr	r6, [pc, #356]	; (8001344 <main+0x560>)
 80011de:	f107 0c04 	add.w	ip, r7, #4
 80011e2:	2350      	movs	r3, #80	; 0x50
 80011e4:	9305      	str	r3, [sp, #20]
 80011e6:	466d      	mov	r5, sp
 80011e8:	f106 0408 	add.w	r4, r6, #8
 80011ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	602b      	str	r3, [r5, #0]
 80011f4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80011f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80011fc:	4661      	mov	r1, ip
 80011fe:	484d      	ldr	r0, [pc, #308]	; (8001334 <main+0x550>)
 8001200:	f7ff fd9e 	bl	8000d40 <Robot_MoveToPosition>
			          HAL_Delay(2000);
 8001204:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001208:	f001 fc74 	bl	8002af4 <HAL_Delay>
			          Robot_MoveToPosition(servos2, &current_position, shelf1_position_4, 1.0f, 80);
 800120c:	4e4e      	ldr	r6, [pc, #312]	; (8001348 <main+0x564>)
 800120e:	f107 0c04 	add.w	ip, r7, #4
 8001212:	2350      	movs	r3, #80	; 0x50
 8001214:	9305      	str	r3, [sp, #20]
 8001216:	466d      	mov	r5, sp
 8001218:	f106 0408 	add.w	r4, r6, #8
 800121c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	602b      	str	r3, [r5, #0]
 8001224:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001228:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800122c:	4661      	mov	r1, ip
 800122e:	4841      	ldr	r0, [pc, #260]	; (8001334 <main+0x550>)
 8001230:	f7ff fd86 	bl	8000d40 <Robot_MoveToPosition>
			          Robot_MoveToPosition(servos2, &current_position, shelf1_position_5, 1.0f, 80);
 8001234:	4e45      	ldr	r6, [pc, #276]	; (800134c <main+0x568>)
 8001236:	f107 0c04 	add.w	ip, r7, #4
 800123a:	2350      	movs	r3, #80	; 0x50
 800123c:	9305      	str	r3, [sp, #20]
 800123e:	466d      	mov	r5, sp
 8001240:	f106 0408 	add.w	r4, r6, #8
 8001244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	602b      	str	r3, [r5, #0]
 800124c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001250:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001254:	4661      	mov	r1, ip
 8001256:	4837      	ldr	r0, [pc, #220]	; (8001334 <main+0x550>)
 8001258:	f7ff fd72 	bl	8000d40 <Robot_MoveToPosition>
			          Robot_MoveToPosition(servos2, &current_position, shelf1_position_6, 1.0f, 80);
 800125c:	4e3c      	ldr	r6, [pc, #240]	; (8001350 <main+0x56c>)
 800125e:	f107 0c04 	add.w	ip, r7, #4
 8001262:	2350      	movs	r3, #80	; 0x50
 8001264:	9305      	str	r3, [sp, #20]
 8001266:	466d      	mov	r5, sp
 8001268:	f106 0408 	add.w	r4, r6, #8
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	602b      	str	r3, [r5, #0]
 8001274:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001278:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800127c:	4661      	mov	r1, ip
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <main+0x550>)
 8001280:	f7ff fd5e 	bl	8000d40 <Robot_MoveToPosition>
			          Robot_MoveToPosition(servos2, &current_position, shelf1_position_6, 1.0f, 80);
 8001284:	4e32      	ldr	r6, [pc, #200]	; (8001350 <main+0x56c>)
 8001286:	f107 0c04 	add.w	ip, r7, #4
 800128a:	2350      	movs	r3, #80	; 0x50
 800128c:	9305      	str	r3, [sp, #20]
 800128e:	466d      	mov	r5, sp
 8001290:	f106 0408 	add.w	r4, r6, #8
 8001294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	602b      	str	r3, [r5, #0]
 800129c:	e896 000c 	ldmia.w	r6, {r2, r3}
 80012a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012a4:	4661      	mov	r1, ip
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <main+0x550>)
 80012a8:	f7ff fd4a 	bl	8000d40 <Robot_MoveToPosition>
			          Robot_MoveToPosition(servos2, &current_position, home_position, 1.0f, 80);
 80012ac:	4e29      	ldr	r6, [pc, #164]	; (8001354 <main+0x570>)
 80012ae:	f107 0c04 	add.w	ip, r7, #4
 80012b2:	2350      	movs	r3, #80	; 0x50
 80012b4:	9305      	str	r3, [sp, #20]
 80012b6:	466d      	mov	r5, sp
 80012b8:	f106 0408 	add.w	r4, r6, #8
 80012bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	602b      	str	r3, [r5, #0]
 80012c4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80012c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012cc:	4661      	mov	r1, ip
 80012ce:	4819      	ldr	r0, [pc, #100]	; (8001334 <main+0x550>)
 80012d0:	f7ff fd36 	bl	8000d40 <Robot_MoveToPosition>

			          PLC_polka=0;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <main+0x554>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

			          break;
 80012da:	e029      	b.n	8001330 <main+0x54c>
			      case 2:
			          Robot_MoveToPosition(servos2, &current_position, shelf2_position, 1.0f, 10);
 80012dc:	4e1e      	ldr	r6, [pc, #120]	; (8001358 <main+0x574>)
 80012de:	f107 0c04 	add.w	ip, r7, #4
 80012e2:	230a      	movs	r3, #10
 80012e4:	9305      	str	r3, [sp, #20]
 80012e6:	466d      	mov	r5, sp
 80012e8:	f106 0408 	add.w	r4, r6, #8
 80012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	602b      	str	r3, [r5, #0]
 80012f4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80012f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012fc:	4661      	mov	r1, ip
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <main+0x550>)
 8001300:	f7ff fd1e 	bl	8000d40 <Robot_MoveToPosition>
			          break;
 8001304:	e014      	b.n	8001330 <main+0x54c>
			      case 3:
			          Robot_MoveToPosition(servos2, &current_position, shelf3_position, 1.0f, 10);
 8001306:	4e15      	ldr	r6, [pc, #84]	; (800135c <main+0x578>)
 8001308:	f107 0c04 	add.w	ip, r7, #4
 800130c:	230a      	movs	r3, #10
 800130e:	9305      	str	r3, [sp, #20]
 8001310:	466d      	mov	r5, sp
 8001312:	f106 0408 	add.w	r4, r6, #8
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001322:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001326:	4661      	mov	r1, ip
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <main+0x550>)
 800132a:	f7ff fd09 	bl	8000d40 <Robot_MoveToPosition>
			          break;
 800132e:	bf00      	nop
		  if (PLC_IN_SUM>0)
 8001330:	e611      	b.n	8000f56 <main+0x172>
 8001332:	bf00      	nop
 8001334:	24000008 	.word	0x24000008
 8001338:	24001330 	.word	0x24001330
 800133c:	24000200 	.word	0x24000200
 8001340:	2400021c 	.word	0x2400021c
 8001344:	24000238 	.word	0x24000238
 8001348:	24000254 	.word	0x24000254
 800134c:	24000270 	.word	0x24000270
 8001350:	2400028c 	.word	0x2400028c
 8001354:	24000104 	.word	0x24000104
 8001358:	240002a8 	.word	0x240002a8
 800135c:	240002c4 	.word	0x240002c4

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b09c      	sub	sp, #112	; 0x70
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	224c      	movs	r2, #76	; 0x4c
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f00d ff8f 	bl	800f292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2220      	movs	r2, #32
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f00d ff89 	bl	800f292 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001380:	2004      	movs	r0, #4
 8001382:	f006 ff4f 	bl	8008224 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <SystemClock_Config+0xf8>)
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	4a32      	ldr	r2, [pc, #200]	; (8001458 <SystemClock_Config+0xf8>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <SystemClock_Config+0xf8>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	4b2e      	ldr	r3, [pc, #184]	; (800145c <SystemClock_Config+0xfc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a8:	4a2c      	ldr	r2, [pc, #176]	; (800145c <SystemClock_Config+0xfc>)
 80013aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <SystemClock_Config+0xfc>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013bc:	bf00      	nop
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <SystemClock_Config+0xfc>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ca:	d1f8      	bne.n	80013be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013cc:	2303      	movs	r3, #3
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80013d6:	2309      	movs	r3, #9
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013de:	2302      	movs	r3, #2
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e2:	2302      	movs	r3, #2
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 80013ea:	231e      	movs	r3, #30
 80013ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013f2:	2304      	movs	r3, #4
 80013f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013fa:	230c      	movs	r3, #12
 80013fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013fe:	2300      	movs	r3, #0
 8001400:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4618      	mov	r0, r3
 800140c:	f006 ff74 	bl	80082f8 <HAL_RCC_OscConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001416:	f000 fdbd 	bl	8001f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141a:	233f      	movs	r3, #63	; 0x3f
 800141c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141e:	2303      	movs	r3, #3
 8001420:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f007 fbb4 	bl	8008bac <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800144a:	f000 fda3 	bl	8001f94 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3770      	adds	r7, #112	; 0x70
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	58000400 	.word	0x58000400
 800145c:	58024800 	.word	0x58024800

08001460 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0b0      	sub	sp, #192	; 0xc0
 8001464:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	22c0      	movs	r2, #192	; 0xc0
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00d ff10 	bl	800f292 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001472:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800147e:	2300      	movs	r3, #0
 8001480:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001482:	463b      	mov	r3, r7
 8001484:	4618      	mov	r0, r3
 8001486:	f007 ff1d 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001490:	f000 fd80 	bl	8001f94 <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	37c0      	adds	r7, #192	; 0xc0
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014b4:	4b54      	ldr	r3, [pc, #336]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014b6:	4a55      	ldr	r2, [pc, #340]	; (800160c <MX_ADC3_Init+0x170>)
 80014b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80014ba:	4b53      	ldr	r3, [pc, #332]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014c0:	4b51      	ldr	r3, [pc, #324]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014c6:	4b50      	ldr	r3, [pc, #320]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014c8:	2208      	movs	r2, #8
 80014ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014cc:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80014d2:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 7;
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014da:	2207      	movs	r2, #7
 80014dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014de:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80014e4:	4b48      	ldr	r3, [pc, #288]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014e6:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014f4:	4b44      	ldr	r3, [pc, #272]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014fa:	4b43      	ldr	r3, [pc, #268]	; (8001608 <MX_ADC3_Init+0x16c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001500:	4b41      	ldr	r3, [pc, #260]	; (8001608 <MX_ADC3_Init+0x16c>)
 8001502:	2200      	movs	r2, #0
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001506:	4b40      	ldr	r3, [pc, #256]	; (8001608 <MX_ADC3_Init+0x16c>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800150e:	483e      	ldr	r0, [pc, #248]	; (8001608 <MX_ADC3_Init+0x16c>)
 8001510:	f001 fd52 	bl	8002fb8 <HAL_ADC_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800151a:	f000 fd3b 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800151e:	2301      	movs	r3, #1
 8001520:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001522:	2306      	movs	r3, #6
 8001524:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800152a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800152e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001530:	2304      	movs	r3, #4
 8001532:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4831      	ldr	r0, [pc, #196]	; (8001608 <MX_ADC3_Init+0x16c>)
 8001542:	f002 f9f7 	bl	8003934 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800154c:	f000 fd22 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <MX_ADC3_Init+0x174>)
 8001552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001554:	230c      	movs	r3, #12
 8001556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	482a      	ldr	r0, [pc, #168]	; (8001608 <MX_ADC3_Init+0x16c>)
 800155e:	f002 f9e9 	bl	8003934 <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001568:	f000 fd14 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <MX_ADC3_Init+0x178>)
 800156e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001570:	2312      	movs	r3, #18
 8001572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4823      	ldr	r0, [pc, #140]	; (8001608 <MX_ADC3_Init+0x16c>)
 800157a:	f002 f9db 	bl	8003934 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8001584:	f000 fd06 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <MX_ADC3_Init+0x17c>)
 800158a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800158c:	2318      	movs	r3, #24
 800158e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4619      	mov	r1, r3
 8001594:	481c      	ldr	r0, [pc, #112]	; (8001608 <MX_ADC3_Init+0x16c>)
 8001596:	f002 f9cd 	bl	8003934 <HAL_ADC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC3_Init+0x108>
  {
    Error_Handler();
 80015a0:	f000 fcf8 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_ADC3_Init+0x180>)
 80015a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80015a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4815      	ldr	r0, [pc, #84]	; (8001608 <MX_ADC3_Init+0x16c>)
 80015b4:	f002 f9be 	bl	8003934 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC3_Init+0x126>
  {
    Error_Handler();
 80015be:	f000 fce9 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_ADC3_Init+0x184>)
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80015c6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80015ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_ADC3_Init+0x16c>)
 80015d2:	f002 f9af 	bl	8003934 <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC3_Init+0x144>
  {
    Error_Handler();
 80015dc:	f000 fcda 	bl	8001f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_ADC3_Init+0x188>)
 80015e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80015e4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80015e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_ADC3_Init+0x16c>)
 80015f0:	f002 f9a0 	bl	8003934 <HAL_ADC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC3_Init+0x162>
  {
    Error_Handler();
 80015fa:	f000 fccb 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	240003fc 	.word	0x240003fc
 800160c:	58026000 	.word	0x58026000
 8001610:	04300002 	.word	0x04300002
 8001614:	08600004 	.word	0x08600004
 8001618:	0c900008 	.word	0x0c900008
 800161c:	19200040 	.word	0x19200040
 8001620:	1d500080 	.word	0x1d500080
 8001624:	21800100 	.word	0x21800100

08001628 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_ETH_Init+0x80>)
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <MX_ETH_Init+0x84>)
 8001630:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_ETH_Init+0x88>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_ETH_Init+0x88>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_ETH_Init+0x88>)
 8001640:	22e1      	movs	r2, #225	; 0xe1
 8001642:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_ETH_Init+0x88>)
 8001646:	2200      	movs	r2, #0
 8001648:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_ETH_Init+0x88>)
 800164c:	2200      	movs	r2, #0
 800164e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_ETH_Init+0x88>)
 8001652:	2200      	movs	r2, #0
 8001654:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_ETH_Init+0x80>)
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <MX_ETH_Init+0x88>)
 800165a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_ETH_Init+0x80>)
 800165e:	2201      	movs	r2, #1
 8001660:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_ETH_Init+0x80>)
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <MX_ETH_Init+0x8c>)
 8001666:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_ETH_Init+0x80>)
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <MX_ETH_Init+0x90>)
 800166c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_ETH_Init+0x80>)
 8001670:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001674:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_ETH_Init+0x80>)
 8001678:	f005 fe60 	bl	800733c <HAL_ETH_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001682:	f000 fc87 	bl	8001f94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001686:	2238      	movs	r2, #56	; 0x38
 8001688:	2100      	movs	r1, #0
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_ETH_Init+0x94>)
 800168c:	f00d fe01 	bl	800f292 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_ETH_Init+0x94>)
 8001692:	2221      	movs	r2, #33	; 0x21
 8001694:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_ETH_Init+0x94>)
 8001698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800169c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_ETH_Init+0x94>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	240004d8 	.word	0x240004d8
 80016ac:	40028000 	.word	0x40028000
 80016b0:	24001334 	.word	0x24001334
 80016b4:	24000348 	.word	0x24000348
 80016b8:	240002e8 	.word	0x240002e8
 80016bc:	240003c4 	.word	0x240003c4

080016c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	; 0x38
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	615a      	str	r2, [r3, #20]
 80016f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <MX_TIM2_Init+0x12c>)
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <MX_TIM2_Init+0x12c>)
 80016fc:	22ef      	movs	r2, #239	; 0xef
 80016fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <MX_TIM2_Init+0x12c>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <MX_TIM2_Init+0x12c>)
 8001708:	f242 720f 	movw	r2, #9999	; 0x270f
 800170c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <MX_TIM2_Init+0x12c>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <MX_TIM2_Init+0x12c>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800171a:	4834      	ldr	r0, [pc, #208]	; (80017ec <MX_TIM2_Init+0x12c>)
 800171c:	f00a fad0 	bl	800bcc0 <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001726:	f000 fc35 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001734:	4619      	mov	r1, r3
 8001736:	482d      	ldr	r0, [pc, #180]	; (80017ec <MX_TIM2_Init+0x12c>)
 8001738:	f00a ff84 	bl	800c644 <HAL_TIM_ConfigClockSource>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001742:	f000 fc27 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001746:	4829      	ldr	r0, [pc, #164]	; (80017ec <MX_TIM2_Init+0x12c>)
 8001748:	f00a fbfa 	bl	800bf40 <HAL_TIM_PWM_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001752:	f000 fc1f 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4821      	ldr	r0, [pc, #132]	; (80017ec <MX_TIM2_Init+0x12c>)
 8001766:	f00b fccd 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001770:	f000 fc10 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	4619      	mov	r1, r3
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <MX_TIM2_Init+0x12c>)
 800178c:	f00a fe46 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001796:	f000 fbfd 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	2204      	movs	r2, #4
 800179e:	4619      	mov	r1, r3
 80017a0:	4812      	ldr	r0, [pc, #72]	; (80017ec <MX_TIM2_Init+0x12c>)
 80017a2:	f00a fe3b 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80017ac:	f000 fbf2 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	2208      	movs	r2, #8
 80017b4:	4619      	mov	r1, r3
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <MX_TIM2_Init+0x12c>)
 80017b8:	f00a fe30 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80017c2:	f000 fbe7 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017c6:	463b      	mov	r3, r7
 80017c8:	220c      	movs	r2, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <MX_TIM2_Init+0x12c>)
 80017ce:	f00a fe25 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80017d8:	f000 fbdc 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <MX_TIM2_Init+0x12c>)
 80017de:	f000 fe53 	bl	8002488 <HAL_TIM_MspPostInit>

}
 80017e2:	bf00      	nop
 80017e4:	3738      	adds	r7, #56	; 0x38
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	24000588 	.word	0x24000588

080017f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <MX_TIM3_Init+0x114>)
 8001824:	4a38      	ldr	r2, [pc, #224]	; (8001908 <MX_TIM3_Init+0x118>)
 8001826:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <MX_TIM3_Init+0x114>)
 800182a:	22ef      	movs	r2, #239	; 0xef
 800182c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <MX_TIM3_Init+0x114>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <MX_TIM3_Init+0x114>)
 8001836:	f242 720f 	movw	r2, #9999	; 0x270f
 800183a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <MX_TIM3_Init+0x114>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001842:	4b30      	ldr	r3, [pc, #192]	; (8001904 <MX_TIM3_Init+0x114>)
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001848:	482e      	ldr	r0, [pc, #184]	; (8001904 <MX_TIM3_Init+0x114>)
 800184a:	f00a fa39 	bl	800bcc0 <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001854:	f000 fb9e 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800185e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001862:	4619      	mov	r1, r3
 8001864:	4827      	ldr	r0, [pc, #156]	; (8001904 <MX_TIM3_Init+0x114>)
 8001866:	f00a feed 	bl	800c644 <HAL_TIM_ConfigClockSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001870:	f000 fb90 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001874:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_TIM3_Init+0x114>)
 8001876:	f00a fb63 	bl	800bf40 <HAL_TIM_PWM_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001880:	f000 fb88 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	481c      	ldr	r0, [pc, #112]	; (8001904 <MX_TIM3_Init+0x114>)
 8001894:	f00b fc36 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800189e:	f000 fb79 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a2:	2360      	movs	r3, #96	; 0x60
 80018a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4812      	ldr	r0, [pc, #72]	; (8001904 <MX_TIM3_Init+0x114>)
 80018ba:	f00a fdaf 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018c4:	f000 fb66 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	2204      	movs	r2, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_TIM3_Init+0x114>)
 80018d0:	f00a fda4 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80018da:	f000 fb5b 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	220c      	movs	r2, #12
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM3_Init+0x114>)
 80018e6:	f00a fd99 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80018f0:	f000 fb50 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM3_Init+0x114>)
 80018f6:	f000 fdc7 	bl	8002488 <HAL_TIM_MspPostInit>

}
 80018fa:	bf00      	nop
 80018fc:	3738      	adds	r7, #56	; 0x38
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	240005d4 	.word	0x240005d4
 8001908:	40000400 	.word	0x40000400

0800190c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001940:	4a3d      	ldr	r2, [pc, #244]	; (8001a38 <MX_TIM4_Init+0x12c>)
 8001942:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 119;
 8001944:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001946:	2277      	movs	r2, #119	; 0x77
 8001948:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <MX_TIM4_Init+0x128>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001952:	2263      	movs	r2, #99	; 0x63
 8001954:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <MX_TIM4_Init+0x128>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001962:	4834      	ldr	r0, [pc, #208]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001964:	f00a f9ac 	bl	800bcc0 <HAL_TIM_Base_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800196e:	f000 fb11 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197c:	4619      	mov	r1, r3
 800197e:	482d      	ldr	r0, [pc, #180]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001980:	f00a fe60 	bl	800c644 <HAL_TIM_ConfigClockSource>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800198a:	f000 fb03 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800198e:	4829      	ldr	r0, [pc, #164]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001990:	f00a fad6 	bl	800bf40 <HAL_TIM_PWM_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800199a:	f000 fafb 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4821      	ldr	r0, [pc, #132]	; (8001a34 <MX_TIM4_Init+0x128>)
 80019ae:	f00b fba9 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019b8:	f000 faec 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019bc:	2360      	movs	r3, #96	; 0x60
 80019be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4818      	ldr	r0, [pc, #96]	; (8001a34 <MX_TIM4_Init+0x128>)
 80019d4:	f00a fd22 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80019de:	f000 fad9 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	2204      	movs	r2, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <MX_TIM4_Init+0x128>)
 80019ea:	f00a fd17 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80019f4:	f000 face 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	2208      	movs	r2, #8
 80019fc:	4619      	mov	r1, r3
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001a00:	f00a fd0c 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001a0a:	f000 fac3 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	220c      	movs	r2, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001a16:	f00a fd01 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001a20:	f000 fab8 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <MX_TIM4_Init+0x128>)
 8001a26:	f000 fd2f 	bl	8002488 <HAL_TIM_MspPostInit>

}
 8001a2a:	bf00      	nop
 8001a2c:	3738      	adds	r7, #56	; 0x38
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24000620 	.word	0x24000620
 8001a38:	40000800 	.word	0x40000800

08001a3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08e      	sub	sp, #56	; 0x38
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	615a      	str	r2, [r3, #20]
 8001a6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001a70:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <MX_TIM5_Init+0xec>)
 8001a72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 11999;
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001a76:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001a7a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001a84:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a88:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a96:	4823      	ldr	r0, [pc, #140]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001a98:	f00a f912 	bl	800bcc0 <HAL_TIM_Base_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8001aa2:	f000 fa77 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481c      	ldr	r0, [pc, #112]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001ab4:	f00a fdc6 	bl	800c644 <HAL_TIM_ConfigClockSource>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8001abe:	f000 fa69 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ac2:	4818      	ldr	r0, [pc, #96]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001ac4:	f00a fa3c 	bl	800bf40 <HAL_TIM_PWM_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8001ace:	f000 fa61 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4810      	ldr	r0, [pc, #64]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001ae2:	f00b fb0f 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001aec:	f000 fa52 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af0:	2360      	movs	r3, #96	; 0x60
 8001af2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001b08:	f00a fc88 	bl	800c41c <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8001b12:	f000 fa3f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <MX_TIM5_Init+0xe8>)
 8001b18:	f000 fcb6 	bl	8002488 <HAL_TIM_MspPostInit>

}
 8001b1c:	bf00      	nop
 8001b1e:	3738      	adds	r7, #56	; 0x38
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2400066c 	.word	0x2400066c
 8001b28:	40000c00 	.word	0x40000c00

08001b2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <MX_TIM6_Init+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11999;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b44:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001b48:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b52:	2263      	movs	r2, #99	; 0x63
 8001b54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b5e:	f00a f8af 	bl	800bcc0 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b68:	f000 fa14 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b7a:	f00b fac3 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b84:	f000 fa06 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	240006b8 	.word	0x240006b8
 8001b94:	40001000 	.word	0x40001000

08001b98 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_TIM7_Init+0x64>)
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <MX_TIM7_Init+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63999;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_TIM7_Init+0x64>)
 8001bb0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001bb4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_TIM7_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_TIM7_Init+0x64>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_TIM7_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <MX_TIM7_Init+0x64>)
 8001bca:	f00a f879 	bl	800bcc0 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001bd4:	f000 f9de 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_TIM7_Init+0x64>)
 8001be6:	f00b fa8d 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001bf0:	f000 f9d0 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	24000704 	.word	0x24000704
 8001c00:	40001400 	.word	0x40001400

08001c04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <MX_TIM8_Init+0xa4>)
 8001c26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 11999;
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c2a:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001c2e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c3c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c50:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c52:	f00a f835 	bl	800bcc0 <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8001c5c:	f000 f99a 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c6e:	f00a fce9 	bl	800c644 <HAL_TIM_ConfigClockSource>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001c78:	f000 f98c 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_TIM8_Init+0xa0>)
 8001c8e:	f00b fa39 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001c98:	f000 f97c 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	24000750 	.word	0x24000750
 8001ca8:	40010400 	.word	0x40010400

08001cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cb2:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <MX_USART3_UART_Init+0x94>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001cf6:	f00b fab1 	bl	800d25c <HAL_UART_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d00:	f000 f948 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001d08:	f00c fef2 	bl	800eaf0 <HAL_UARTEx_SetTxFifoThreshold>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d12:	f000 f93f 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d16:	2100      	movs	r1, #0
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001d1a:	f00c ff27 	bl	800eb6c <HAL_UARTEx_SetRxFifoThreshold>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d24:	f000 f936 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_USART3_UART_Init+0x90>)
 8001d2a:	f00c fea8 	bl	800ea7e <HAL_UARTEx_DisableFifoMode>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d34:	f000 f92e 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2400079c 	.word	0x2400079c
 8001d40:	40004800 	.word	0x40004800

08001d44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d50:	2209      	movs	r2, #9
 8001d52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d56:	2202      	movs	r2, #2
 8001d58:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d62:	2202      	movs	r2, #2
 8001d64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d8c:	f006 f91a 	bl	8007fc4 <HAL_PCD_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001d96:	f000 f8fd 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	24000830 	.word	0x24000830
 8001da4:	40080000 	.word	0x40080000

08001da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <MX_DMA_Init+0x3c>)
 8001db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001db4:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <MX_DMA_Init+0x3c>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <MX_DMA_Init+0x3c>)
 8001dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	200b      	movs	r0, #11
 8001dd2:	f002 fc42 	bl	800465a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dd6:	200b      	movs	r0, #11
 8001dd8:	f002 fc59 	bl	800468e <HAL_NVIC_EnableIRQ>

}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58024400 	.word	0x58024400

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08e      	sub	sp, #56	; 0x38
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a5f      	ldr	r2, [pc, #380]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	623b      	str	r3, [r7, #32]
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1c:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e24:	f043 0320 	orr.w	r3, r3, #32
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	4b52      	ldr	r3, [pc, #328]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	4a50      	ldr	r2, [pc, #320]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4a:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5e:	4a49      	ldr	r2, [pc, #292]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e68:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a41      	ldr	r2, [pc, #260]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a3a      	ldr	r2, [pc, #232]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	4a32      	ldr	r2, [pc, #200]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001ed8:	f043 0310 	orr.w	r3, r3, #16
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <MX_GPIO_Init+0x19c>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f244 0101 	movw	r1, #16385	; 0x4001
 8001ef4:	4824      	ldr	r0, [pc, #144]	; (8001f88 <MX_GPIO_Init+0x1a0>)
 8001ef6:	f006 f81d 	bl	8007f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD3_OUT_GPIO_Port, PD3_OUT_Pin, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2108      	movs	r1, #8
 8001efe:	4823      	ldr	r0, [pc, #140]	; (8001f8c <MX_GPIO_Init+0x1a4>)
 8001f00:	f006 f818 	bl	8007f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2102      	movs	r1, #2
 8001f08:	4821      	ldr	r0, [pc, #132]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001f0a:	f006 f813 	bl	8007f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001f0e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	4818      	ldr	r0, [pc, #96]	; (8001f88 <MX_GPIO_Init+0x1a0>)
 8001f28:	f005 fe3c 	bl	8007ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1_IN1_Pin PD2_IN2_Pin */
  GPIO_InitStruct.Pin = PD1_IN1_Pin|PD2_IN2_Pin;
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4813      	ldr	r0, [pc, #76]	; (8001f8c <MX_GPIO_Init+0x1a4>)
 8001f40:	f005 fe30 	bl	8007ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3_OUT_Pin */
  GPIO_InitStruct.Pin = PD3_OUT_Pin;
 8001f44:	2308      	movs	r3, #8
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PD3_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480c      	ldr	r0, [pc, #48]	; (8001f8c <MX_GPIO_Init+0x1a4>)
 8001f5c:	f005 fe22 	bl	8007ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f60:	2302      	movs	r3, #2
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	4619      	mov	r1, r3
 8001f76:	4806      	ldr	r0, [pc, #24]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001f78:	f005 fe14 	bl	8007ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f7c:	bf00      	nop
 8001f7e:	3738      	adds	r7, #56	; 0x38
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58020400 	.word	0x58020400
 8001f8c:	58020c00 	.word	0x58020c00
 8001f90:	58021000 	.word	0x58021000

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <Error_Handler+0x8>
	...

08001fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_MspInit+0x30>)
 8001fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fac:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_MspInit+0x30>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_MspInit+0x30>)
 8001fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	58024400 	.word	0x58024400

08001fd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0bc      	sub	sp, #240	; 0xf0
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	22c0      	movs	r2, #192	; 0xc0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f00d f94c 	bl	800f292 <memset>
  if(hadc->Instance==ADC3)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a4e      	ldr	r2, [pc, #312]	; (8002138 <HAL_ADC_MspInit+0x164>)
 8002000:	4293      	cmp	r3, r2
 8002002:	f040 8095 	bne.w	8002130 <HAL_ADC_MspInit+0x15c>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002006:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002016:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201a:	f107 0318 	add.w	r3, r7, #24
 800201e:	4618      	mov	r0, r3
 8002020:	f007 f950 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 800202a:	f7ff ffb3 	bl	8001f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800202e:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_ADC_MspInit+0x168>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	4a41      	ldr	r2, [pc, #260]	; (800213c <HAL_ADC_MspInit+0x168>)
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203e:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_ADC_MspInit+0x168>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_ADC_MspInit+0x168>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	4a3a      	ldr	r2, [pc, #232]	; (800213c <HAL_ADC_MspInit+0x168>)
 8002054:	f043 0320 	orr.w	r3, r3, #32
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_ADC_MspInit+0x168>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_ADC_MspInit+0x168>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	4a32      	ldr	r2, [pc, #200]	; (800213c <HAL_ADC_MspInit+0x168>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_ADC_MspInit+0x168>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> ADC3_INP2
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002088:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800208c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002090:	2303      	movs	r3, #3
 8002092:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800209c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020a0:	4619      	mov	r1, r3
 80020a2:	4827      	ldr	r0, [pc, #156]	; (8002140 <HAL_ADC_MspInit+0x16c>)
 80020a4:	f005 fd7e 	bl	8007ba4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80020a8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80020ac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020b0:	f000 fd64 	bl	8002b7c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80020b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80020b8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80020bc:	f000 fd5e 	bl	8002b7c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_ADC_MspInit+0x174>)
 80020c4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020c8:	2273      	movs	r2, #115	; 0x73
 80020ca:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020de:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020e6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ee:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_ADC_MspInit+0x170>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_ADC_MspInit+0x170>)
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002104:	480f      	ldr	r0, [pc, #60]	; (8002144 <HAL_ADC_MspInit+0x170>)
 8002106:	f002 fadd 	bl	80046c4 <HAL_DMA_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_ADC_MspInit+0x140>
    {
      Error_Handler();
 8002110:	f7ff ff40 	bl	8001f94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <HAL_ADC_MspInit+0x170>)
 8002118:	64da      	str	r2, [r3, #76]	; 0x4c
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_ADC_MspInit+0x170>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	207f      	movs	r0, #127	; 0x7f
 8002126:	f002 fa98 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800212a:	207f      	movs	r0, #127	; 0x7f
 800212c:	f002 faaf 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	37f0      	adds	r7, #240	; 0xf0
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	58026000 	.word	0x58026000
 800213c:	58024400 	.word	0x58024400
 8002140:	58021400 	.word	0x58021400
 8002144:	24000460 	.word	0x24000460
 8002148:	40020010 	.word	0x40020010

0800214c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08e      	sub	sp, #56	; 0x38
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a59      	ldr	r2, [pc, #356]	; (80022d0 <HAL_ETH_MspInit+0x184>)
 800216a:	4293      	cmp	r3, r2
 800216c:	f040 80ab 	bne.w	80022c6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002170:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002172:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002176:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002180:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002182:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218a:	623b      	str	r3, [r7, #32]
 800218c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800218e:	4b51      	ldr	r3, [pc, #324]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002194:	4a4f      	ldr	r2, [pc, #316]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800219e:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80021ac:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021b2:	4a48      	ldr	r2, [pc, #288]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021bc:	4b45      	ldr	r3, [pc, #276]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ca:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d0:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ee:	4a39      	ldr	r2, [pc, #228]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220c:	4a31      	ldr	r2, [pc, #196]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002216:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222a:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 800222c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_ETH_MspInit+0x188>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002242:	2332      	movs	r3, #50	; 0x32
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002252:	230b      	movs	r3, #11
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	481e      	ldr	r0, [pc, #120]	; (80022d8 <HAL_ETH_MspInit+0x18c>)
 800225e:	f005 fca1 	bl	8007ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002262:	2386      	movs	r3, #134	; 0x86
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002272:	230b      	movs	r3, #11
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227a:	4619      	mov	r1, r3
 800227c:	4817      	ldr	r0, [pc, #92]	; (80022dc <HAL_ETH_MspInit+0x190>)
 800227e:	f005 fc91 	bl	8007ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002294:	230b      	movs	r3, #11
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	4810      	ldr	r0, [pc, #64]	; (80022e0 <HAL_ETH_MspInit+0x194>)
 80022a0:	f005 fc80 	bl	8007ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80022a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022b6:	230b      	movs	r3, #11
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022be:	4619      	mov	r1, r3
 80022c0:	4808      	ldr	r0, [pc, #32]	; (80022e4 <HAL_ETH_MspInit+0x198>)
 80022c2:	f005 fc6f 	bl	8007ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3738      	adds	r7, #56	; 0x38
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40028000 	.word	0x40028000
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58020800 	.word	0x58020800
 80022dc:	58020000 	.word	0x58020000
 80022e0:	58020400 	.word	0x58020400
 80022e4:	58021800 	.word	0x58021800

080022e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d117      	bne.n	800232a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 80022fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002300:	4a5a      	ldr	r2, [pc, #360]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800230a:	4b58      	ldr	r3, [pc, #352]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 800230c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	201c      	movs	r0, #28
 800231e:	f002 f99c 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002322:	201c      	movs	r0, #28
 8002324:	f002 f9b3 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002328:	e09c      	b.n	8002464 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM3)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a50      	ldr	r2, [pc, #320]	; (8002470 <HAL_TIM_Base_MspInit+0x188>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d117      	bne.n	8002364 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800233a:	4a4c      	ldr	r2, [pc, #304]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002344:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	201d      	movs	r0, #29
 8002358:	f002 f97f 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800235c:	201d      	movs	r0, #29
 800235e:	f002 f996 	bl	800468e <HAL_NVIC_EnableIRQ>
}
 8002362:	e07f      	b.n	8002464 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a42      	ldr	r2, [pc, #264]	; (8002474 <HAL_TIM_Base_MspInit+0x18c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d117      	bne.n	800239e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002374:	4a3d      	ldr	r2, [pc, #244]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	201e      	movs	r0, #30
 8002392:	f002 f962 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002396:	201e      	movs	r0, #30
 8002398:	f002 f979 	bl	800468e <HAL_NVIC_EnableIRQ>
}
 800239c:	e062      	b.n	8002464 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM5)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a35      	ldr	r2, [pc, #212]	; (8002478 <HAL_TIM_Base_MspInit+0x190>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d10f      	bne.n	80023c8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 80023aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ae:	4a2f      	ldr	r2, [pc, #188]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 80023ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	69bb      	ldr	r3, [r7, #24]
}
 80023c6:	e04d      	b.n	8002464 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM6)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2b      	ldr	r2, [pc, #172]	; (800247c <HAL_TIM_Base_MspInit+0x194>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d117      	bne.n	8002402 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 80023d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d8:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 80023e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	2036      	movs	r0, #54	; 0x36
 80023f6:	f002 f930 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023fa:	2036      	movs	r0, #54	; 0x36
 80023fc:	f002 f947 	bl	800468e <HAL_NVIC_EnableIRQ>
}
 8002400:	e030      	b.n	8002464 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM7)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <HAL_TIM_Base_MspInit+0x198>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d117      	bne.n	800243c <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 800240e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002414:	f043 0320 	orr.w	r3, r3, #32
 8002418:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 800241e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2037      	movs	r0, #55	; 0x37
 8002430:	f002 f913 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002434:	2037      	movs	r0, #55	; 0x37
 8002436:	f002 f92a 	bl	800468e <HAL_NVIC_EnableIRQ>
}
 800243a:	e013      	b.n	8002464 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM8)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_TIM_Base_MspInit+0x19c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_TIM_Base_MspInit+0x184>)
 8002458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	bf00      	nop
 8002466:	3728      	adds	r7, #40	; 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800
 8002478:	40000c00 	.word	0x40000c00
 800247c:	40001000 	.word	0x40001000
 8002480:	40001400 	.word	0x40001400
 8002484:	40010400 	.word	0x40010400

08002488 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a8:	d13f      	bne.n	800252a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b78      	ldr	r3, [pc, #480]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b0:	4a76      	ldr	r2, [pc, #472]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ba:	4b74      	ldr	r3, [pc, #464]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c8:	4b70      	ldr	r3, [pc, #448]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ce:	4a6f      	ldr	r2, [pc, #444]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d8:	4b6c      	ldr	r3, [pc, #432]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80024e6:	2328      	movs	r3, #40	; 0x28
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024f6:	2301      	movs	r3, #1
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	4863      	ldr	r0, [pc, #396]	; (8002690 <HAL_TIM_MspPostInit+0x208>)
 8002502:	f005 fb4f 	bl	8007ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002506:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002518:	2301      	movs	r3, #1
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002520:	4619      	mov	r1, r3
 8002522:	485c      	ldr	r0, [pc, #368]	; (8002694 <HAL_TIM_MspPostInit+0x20c>)
 8002524:	f005 fb3e 	bl	8007ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002528:	e0ac      	b.n	8002684 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM3)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <HAL_TIM_MspPostInit+0x210>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d15d      	bne.n	80025f0 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b55      	ldr	r3, [pc, #340]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253a:	4a54      	ldr	r2, [pc, #336]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002544:	4b51      	ldr	r3, [pc, #324]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b4e      	ldr	r3, [pc, #312]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002558:	4a4c      	ldr	r2, [pc, #304]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002576:	4a45      	ldr	r2, [pc, #276]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002580:	4b42      	ldr	r3, [pc, #264]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800258e:	2340      	movs	r3, #64	; 0x40
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800259e:	2302      	movs	r3, #2
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a6:	4619      	mov	r1, r3
 80025a8:	4839      	ldr	r0, [pc, #228]	; (8002690 <HAL_TIM_MspPostInit+0x208>)
 80025aa:	f005 fafb 	bl	8007ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025ae:	2302      	movs	r3, #2
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025be:	2302      	movs	r3, #2
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c6:	4619      	mov	r1, r3
 80025c8:	4832      	ldr	r0, [pc, #200]	; (8002694 <HAL_TIM_MspPostInit+0x20c>)
 80025ca:	f005 faeb 	bl	8007ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025de:	2302      	movs	r3, #2
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	482c      	ldr	r0, [pc, #176]	; (800269c <HAL_TIM_MspPostInit+0x214>)
 80025ea:	f005 fadb 	bl	8007ba4 <HAL_GPIO_Init>
}
 80025ee:	e049      	b.n	8002684 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM4)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <HAL_TIM_MspPostInit+0x218>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d120      	bne.n	800263c <HAL_TIM_MspPostInit+0x1b4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 80025fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002618:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800262a:	2302      	movs	r3, #2
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002632:	4619      	mov	r1, r3
 8002634:	481b      	ldr	r0, [pc, #108]	; (80026a4 <HAL_TIM_MspPostInit+0x21c>)
 8002636:	f005 fab5 	bl	8007ba4 <HAL_GPIO_Init>
}
 800263a:	e023      	b.n	8002684 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM5)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <HAL_TIM_MspPostInit+0x220>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11e      	bne.n	8002684 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264c:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_TIM_MspPostInit+0x204>)
 8002658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002664:	2301      	movs	r3, #1
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002674:	2302      	movs	r3, #2
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267c:	4619      	mov	r1, r3
 800267e:	4804      	ldr	r0, [pc, #16]	; (8002690 <HAL_TIM_MspPostInit+0x208>)
 8002680:	f005 fa90 	bl	8007ba4 <HAL_GPIO_Init>
}
 8002684:	bf00      	nop
 8002686:	3738      	adds	r7, #56	; 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58024400 	.word	0x58024400
 8002690:	58020000 	.word	0x58020000
 8002694:	58020400 	.word	0x58020400
 8002698:	40000400 	.word	0x40000400
 800269c:	58020800 	.word	0x58020800
 80026a0:	40000800 	.word	0x40000800
 80026a4:	58020c00 	.word	0x58020c00
 80026a8:	40000c00 	.word	0x40000c00

080026ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0ba      	sub	sp, #232	; 0xe8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	22c0      	movs	r2, #192	; 0xc0
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00c fde0 	bl	800f292 <memset>
  if(huart->Instance==USART3)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <HAL_UART_MspInit+0xd8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d14e      	bne.n	800277a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026dc:	f04f 0202 	mov.w	r2, #2
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80026e8:	2303      	movs	r3, #3
 80026ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f006 fde6 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80026fe:	f7ff fc49 	bl	8001f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_UART_MspInit+0xdc>)
 8002704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_UART_MspInit+0xdc>)
 800270a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_UART_MspInit+0xdc>)
 8002714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_UART_MspInit+0xdc>)
 8002722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002726:	4a18      	ldr	r2, [pc, #96]	; (8002788 <HAL_UART_MspInit+0xdc>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_UART_MspInit+0xdc>)
 8002732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800273e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002758:	2307      	movs	r3, #7
 800275a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002762:	4619      	mov	r1, r3
 8002764:	4809      	ldr	r0, [pc, #36]	; (800278c <HAL_UART_MspInit+0xe0>)
 8002766:	f005 fa1d 	bl	8007ba4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	2027      	movs	r0, #39	; 0x27
 8002770:	f001 ff73 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002774:	2027      	movs	r0, #39	; 0x27
 8002776:	f001 ff8a 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800277a:	bf00      	nop
 800277c:	37e8      	adds	r7, #232	; 0xe8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40004800 	.word	0x40004800
 8002788:	58024400 	.word	0x58024400
 800278c:	58020c00 	.word	0x58020c00

08002790 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0ba      	sub	sp, #232	; 0xe8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	22c0      	movs	r2, #192	; 0xc0
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f00c fd6e 	bl	800f292 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <HAL_PCD_MspInit+0xec>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d159      	bne.n	8002874 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80027c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80027cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d4:	f107 0310 	add.w	r3, r7, #16
 80027d8:	4618      	mov	r0, r3
 80027da:	f006 fd73 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80027e4:	f7ff fbd6 	bl	8001f94 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80027e8:	f005 fd76 	bl	80082d8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_PCD_MspInit+0xf0>)
 80027ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f2:	4a23      	ldr	r2, [pc, #140]	; (8002880 <HAL_PCD_MspInit+0xf0>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_PCD_MspInit+0xf0>)
 80027fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800280a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800280e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002824:	230a      	movs	r3, #10
 8002826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800282e:	4619      	mov	r1, r3
 8002830:	4814      	ldr	r0, [pc, #80]	; (8002884 <HAL_PCD_MspInit+0xf4>)
 8002832:	f005 f9b7 	bl	8007ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800284e:	4619      	mov	r1, r3
 8002850:	480c      	ldr	r0, [pc, #48]	; (8002884 <HAL_PCD_MspInit+0xf4>)
 8002852:	f005 f9a7 	bl	8007ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_PCD_MspInit+0xf0>)
 8002858:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800285c:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_PCD_MspInit+0xf0>)
 800285e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002862:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_PCD_MspInit+0xf0>)
 8002868:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800286c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002874:	bf00      	nop
 8002876:	37e8      	adds	r7, #232	; 0xe8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40080000 	.word	0x40080000
 8002880:	58024400 	.word	0x58024400
 8002884:	58020000 	.word	0x58020000

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800288c:	e7fe      	b.n	800288c <NMI_Handler+0x4>

0800288e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002892:	e7fe      	b.n	8002892 <HardFault_Handler+0x4>

08002894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <MemManage_Handler+0x4>

0800289a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289e:	e7fe      	b.n	800289e <BusFault_Handler+0x4>

080028a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <UsageFault_Handler+0x4>

080028a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d4:	f000 f8ee 	bl	8002ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}

080028dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <DMA1_Stream0_IRQHandler+0x10>)
 80028e2:	f003 fa19 	bl	8005d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	24000460 	.word	0x24000460

080028f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <TIM2_IRQHandler+0x10>)
 80028f6:	f009 fc89 	bl	800c20c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	24000588 	.word	0x24000588

08002904 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <TIM3_IRQHandler+0x10>)
 800290a:	f009 fc7f 	bl	800c20c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	240005d4 	.word	0x240005d4

08002918 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <TIM4_IRQHandler+0x10>)
 800291e:	f009 fc75 	bl	800c20c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	24000620 	.word	0x24000620

0800292c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <USART3_IRQHandler+0x10>)
 8002932:	f00a fce3 	bl	800d2fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2400079c 	.word	0x2400079c

08002940 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <TIM6_DAC_IRQHandler+0x10>)
 8002946:	f009 fc61 	bl	800c20c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	240006b8 	.word	0x240006b8

08002954 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <TIM7_IRQHandler+0x10>)
 800295a:	f009 fc57 	bl	800c20c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	24000704 	.word	0x24000704

08002968 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <ADC3_IRQHandler+0x10>)
 800296e:	f000 fd89 	bl	8003484 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	240003fc 	.word	0x240003fc

0800297c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002980:	f7fd fe28 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002986:	490d      	ldr	r1, [pc, #52]	; (80029bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800298c:	e002      	b.n	8002994 <LoopCopyDataInit>

0800298e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002992:	3304      	adds	r3, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002998:	d3f9      	bcc.n	800298e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800299c:	4c0a      	ldr	r4, [pc, #40]	; (80029c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a0:	e001      	b.n	80029a6 <LoopFillZerobss>

080029a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a4:	3204      	adds	r2, #4

080029a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a8:	d3fb      	bcc.n	80029a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029aa:	f00c fc7b 	bl	800f2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ae:	f7fe fa19 	bl	8000de4 <main>
  bx  lr
 80029b2:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 80029b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80029b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029bc:	240002e8 	.word	0x240002e8
  ldr r2, =_sidata
 80029c0:	0800f3dc 	.word	0x0800f3dc
  ldr r2, =_sbss
 80029c4:	240003a8 	.word	0x240003a8
  ldr r4, =_ebss
 80029c8:	24001340 	.word	0x24001340

080029cc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d6:	2003      	movs	r0, #3
 80029d8:	f001 fe34 	bl	8004644 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029dc:	f006 fa9c 	bl	8008f18 <HAL_RCC_GetSysClockFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_Init+0x68>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	4913      	ldr	r1, [pc, #76]	; (8002a3c <HAL_Init+0x6c>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
 80029f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_Init+0x68>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <HAL_Init+0x6c>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	4a0b      	ldr	r2, [pc, #44]	; (8002a40 <HAL_Init+0x70>)
 8002a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a14:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <HAL_Init+0x74>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f000 f814 	bl	8002a48 <HAL_InitTick>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e002      	b.n	8002a30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2a:	f7ff fab9 	bl	8001fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	58024400 	.word	0x58024400
 8002a3c:	0800f38c 	.word	0x0800f38c
 8002a40:	24000004 	.word	0x24000004
 8002a44:	24000000 	.word	0x24000000

08002a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <HAL_InitTick+0x60>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e021      	b.n	8002aa0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_InitTick+0x64>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_InitTick+0x60>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f001 fe19 	bl	80046aa <HAL_SYSTICK_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00e      	b.n	8002aa0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	d80a      	bhi.n	8002a9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f001 fde3 	bl	800465a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <HAL_InitTick+0x68>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	240002e4 	.word	0x240002e4
 8002aac:	24000000 	.word	0x24000000
 8002ab0:	240002e0 	.word	0x240002e0

08002ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_IncTick+0x20>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_IncTick+0x24>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <HAL_IncTick+0x24>)
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	240002e4 	.word	0x240002e4
 8002ad8:	2400133c 	.word	0x2400133c

08002adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae0:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <HAL_GetTick+0x14>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	2400133c 	.word	0x2400133c

08002af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff ffee 	bl	8002adc <HAL_GetTick>
 8002b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d005      	beq.n	8002b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_Delay+0x44>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b1a:	bf00      	nop
 8002b1c:	f7ff ffde 	bl	8002adc <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d8f7      	bhi.n	8002b1c <HAL_Delay+0x28>
  {
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	240002e4 	.word	0x240002e4

08002b3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_GetREVID+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0c1b      	lsrs	r3, r3, #16
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	5c001000 	.word	0x5c001000

08002b54 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b64:	4904      	ldr	r1, [pc, #16]	; (8002b78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	58000400 	.word	0x58000400

08002b7c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	4904      	ldr	r1, [pc, #16]	; (8002ba4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	58000400 	.word	0x58000400

08002ba8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	431a      	orrs	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	611a      	str	r2, [r3, #16]
}
 8002c76:	bf00      	nop
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b087      	sub	sp, #28
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3360      	adds	r3, #96	; 0x60
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	601a      	str	r2, [r3, #0]
  }
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b087      	sub	sp, #28
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3330      	adds	r3, #48	; 0x30
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	4413      	add	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	211f      	movs	r1, #31
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	f003 011f 	and.w	r1, r3, #31
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	431a      	orrs	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f023 0203 	bic.w	r2, r3, #3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b087      	sub	sp, #28
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3314      	adds	r3, #20
 8002d92:	461a      	mov	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	0e5b      	lsrs	r3, r3, #25
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	4413      	add	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	0d1b      	lsrs	r3, r3, #20
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2107      	movs	r1, #7
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	0d1b      	lsrs	r3, r3, #20
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0318 	and.w	r3, r3, #24
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002dfc:	40d9      	lsrs	r1, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	400b      	ands	r3, r1
 8002e02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e06:	431a      	orrs	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	000fffff 	.word	0x000fffff

08002e20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6093      	str	r3, [r2, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	5fffffc0 	.word	0x5fffffc0

08002e7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	6fffffc0 	.word	0x6fffffc0

08002ecc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ee0:	d101      	bne.n	8002ee6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <LL_ADC_Enable+0x24>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	7fffffc0 	.word	0x7fffffc0

08002f1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <LL_ADC_IsEnabled+0x18>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <LL_ADC_IsEnabled+0x1a>
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <LL_ADC_REG_StartConversion+0x24>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	7fffffc0 	.word	0x7fffffc0

08002f6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d101      	bne.n	8002f84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d101      	bne.n	8002faa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e18f      	b.n	80032f2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe fff7 	bl	8001fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff3f 	bl	8002e7c <LL_ADC_IsDeepPowerDownEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff25 	bl	8002e58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff ff5a 	bl	8002ecc <LL_ADC_IsInternalRegulatorEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d114      	bne.n	8003048 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff3e 	bl	8002ea4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003028:	4b87      	ldr	r3, [pc, #540]	; (8003248 <HAL_ADC_Init+0x290>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	4a87      	ldr	r2, [pc, #540]	; (800324c <HAL_ADC_Init+0x294>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	3301      	adds	r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800303a:	e002      	b.n	8003042 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f9      	bne.n	800303c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff3d 	bl	8002ecc <LL_ADC_IsInternalRegulatorEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10d      	bne.n	8003074 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff77 	bl	8002f6c <LL_ADC_REG_IsConversionOngoing>
 800307e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 8129 	bne.w	80032e0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8125 	bne.w	80032e0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800309e:	f043 0202 	orr.w	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff36 	bl	8002f1c <LL_ADC_IsEnabled>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d136      	bne.n	8003124 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a65      	ldr	r2, [pc, #404]	; (8003250 <HAL_ADC_Init+0x298>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_ADC_Init+0x112>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a63      	ldr	r2, [pc, #396]	; (8003254 <HAL_ADC_Init+0x29c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10e      	bne.n	80030e8 <HAL_ADC_Init+0x130>
 80030ca:	4861      	ldr	r0, [pc, #388]	; (8003250 <HAL_ADC_Init+0x298>)
 80030cc:	f7ff ff26 	bl	8002f1c <LL_ADC_IsEnabled>
 80030d0:	4604      	mov	r4, r0
 80030d2:	4860      	ldr	r0, [pc, #384]	; (8003254 <HAL_ADC_Init+0x29c>)
 80030d4:	f7ff ff22 	bl	8002f1c <LL_ADC_IsEnabled>
 80030d8:	4603      	mov	r3, r0
 80030da:	4323      	orrs	r3, r4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e008      	b.n	80030fa <HAL_ADC_Init+0x142>
 80030e8:	485b      	ldr	r0, [pc, #364]	; (8003258 <HAL_ADC_Init+0x2a0>)
 80030ea:	f7ff ff17 	bl	8002f1c <LL_ADC_IsEnabled>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a53      	ldr	r2, [pc, #332]	; (8003250 <HAL_ADC_Init+0x298>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_ADC_Init+0x15a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a51      	ldr	r2, [pc, #324]	; (8003254 <HAL_ADC_Init+0x29c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_ADC_Init+0x15e>
 8003112:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_ADC_Init+0x2a4>)
 8003114:	e000      	b.n	8003118 <HAL_ADC_Init+0x160>
 8003116:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_ADC_Init+0x2a8>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7ff fd42 	bl	8002ba8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003124:	f7ff fd0a 	bl	8002b3c <HAL_GetREVID>
 8003128:	4603      	mov	r3, r0
 800312a:	f241 0203 	movw	r2, #4099	; 0x1003
 800312e:	4293      	cmp	r3, r2
 8003130:	d914      	bls.n	800315c <HAL_ADC_Init+0x1a4>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b10      	cmp	r3, #16
 8003138:	d110      	bne.n	800315c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7d5b      	ldrb	r3, [r3, #21]
 800313e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003144:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800314a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7f1b      	ldrb	r3, [r3, #28]
 8003150:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003152:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003154:	f043 030c 	orr.w	r3, r3, #12
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e00d      	b.n	8003178 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7d5b      	ldrb	r3, [r3, #21]
 8003160:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003166:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800316c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7f1b      	ldrb	r3, [r3, #28]
 8003172:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7f1b      	ldrb	r3, [r3, #28]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d106      	bne.n	800318e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	3b01      	subs	r3, #1
 8003186:	045b      	lsls	r3, r3, #17
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <HAL_ADC_Init+0x2ac>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	69b9      	ldr	r1, [r7, #24]
 80031ba:	430b      	orrs	r3, r1
 80031bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fed2 	bl	8002f6c <LL_ADC_REG_IsConversionOngoing>
 80031c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fedf 	bl	8002f92 <LL_ADC_INJ_IsConversionOngoing>
 80031d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d15f      	bne.n	800329c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d15c      	bne.n	800329c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7d1b      	ldrb	r3, [r3, #20]
 80031e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_ADC_Init+0x2b0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	69b9      	ldr	r1, [r7, #24]
 8003200:	430b      	orrs	r3, r1
 8003202:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800320a:	2b01      	cmp	r3, #1
 800320c:	d130      	bne.n	8003270 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_ADC_Init+0x2b4>)
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003222:	3a01      	subs	r2, #1
 8003224:	0411      	lsls	r1, r2, #16
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003230:	4311      	orrs	r1, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003236:	430a      	orrs	r2, r1
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	611a      	str	r2, [r3, #16]
 8003244:	e01c      	b.n	8003280 <HAL_ADC_Init+0x2c8>
 8003246:	bf00      	nop
 8003248:	24000000 	.word	0x24000000
 800324c:	053e2d63 	.word	0x053e2d63
 8003250:	40022000 	.word	0x40022000
 8003254:	40022100 	.word	0x40022100
 8003258:	58026000 	.word	0x58026000
 800325c:	40022300 	.word	0x40022300
 8003260:	58026300 	.word	0x58026300
 8003264:	fff0c003 	.word	0xfff0c003
 8003268:	ffffbffc 	.word	0xffffbffc
 800326c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 ffc6 	bl	8004228 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d10c      	bne.n	80032be <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f023 010f 	bic.w	r1, r3, #15
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
 80032bc:	e007      	b.n	80032ce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 020f 	bic.w	r2, r2, #15
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
 80032de:	e007      	b.n	80032f0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0210 	orr.w	r2, r3, #16
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd90      	pop	{r4, r7, pc}
 80032fa:	bf00      	nop

080032fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a55      	ldr	r2, [pc, #340]	; (8003464 <HAL_ADC_Start_DMA+0x168>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_ADC_Start_DMA+0x20>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a54      	ldr	r2, [pc, #336]	; (8003468 <HAL_ADC_Start_DMA+0x16c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_ADC_Start_DMA+0x24>
 800331c:	4b53      	ldr	r3, [pc, #332]	; (800346c <HAL_ADC_Start_DMA+0x170>)
 800331e:	e000      	b.n	8003322 <HAL_ADC_Start_DMA+0x26>
 8003320:	4b53      	ldr	r3, [pc, #332]	; (8003470 <HAL_ADC_Start_DMA+0x174>)
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fd7c 	bl	8002e20 <LL_ADC_GetMultimode>
 8003328:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fe1c 	bl	8002f6c <LL_ADC_REG_IsConversionOngoing>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 808c 	bne.w	8003454 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_Start_DMA+0x4e>
 8003346:	2302      	movs	r3, #2
 8003348:	e087      	b.n	800345a <HAL_ADC_Start_DMA+0x15e>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b05      	cmp	r3, #5
 800335c:	d002      	beq.n	8003364 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b09      	cmp	r3, #9
 8003362:	d170      	bne.n	8003446 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fe41 	bl	8003fec <ADC_Enable>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d163      	bne.n	800343c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003378:	4b3e      	ldr	r3, [pc, #248]	; (8003474 <HAL_ADC_Start_DMA+0x178>)
 800337a:	4013      	ands	r3, r2
 800337c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a37      	ldr	r2, [pc, #220]	; (8003468 <HAL_ADC_Start_DMA+0x16c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d002      	beq.n	8003394 <HAL_ADC_Start_DMA+0x98>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	e000      	b.n	8003396 <HAL_ADC_Start_DMA+0x9a>
 8003394:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_ADC_Start_DMA+0x168>)
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4293      	cmp	r3, r2
 800339c:	d002      	beq.n	80033a4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	f023 0206 	bic.w	r2, r3, #6
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58
 80033c8:	e002      	b.n	80033d0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <HAL_ADC_Start_DMA+0x17c>)
 80033d6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <HAL_ADC_Start_DMA+0x180>)
 80033de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e4:	4a26      	ldr	r2, [pc, #152]	; (8003480 <HAL_ADC_Start_DMA+0x184>)
 80033e6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	221c      	movs	r2, #28
 80033ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0210 	orr.w	r2, r2, #16
 8003406:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f7ff fc8f 	bl	8002d36 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3340      	adds	r3, #64	; 0x40
 8003422:	4619      	mov	r1, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f001 fca8 	bl	8004d7c <HAL_DMA_Start_IT>
 800342c:	4603      	mov	r3, r0
 800342e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fd85 	bl	8002f44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800343a:	e00d      	b.n	8003458 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003444:	e008      	b.n	8003458 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003452:	e001      	b.n	8003458 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003454:	2302      	movs	r3, #2
 8003456:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000
 8003468:	40022100 	.word	0x40022100
 800346c:	40022300 	.word	0x40022300
 8003470:	58026300 	.word	0x58026300
 8003474:	fffff0fe 	.word	0xfffff0fe
 8003478:	08004101 	.word	0x08004101
 800347c:	080041d9 	.word	0x080041d9
 8003480:	080041f5 	.word	0x080041f5

08003484 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a87      	ldr	r2, [pc, #540]	; (80036c4 <HAL_ADC_IRQHandler+0x240>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x30>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a86      	ldr	r2, [pc, #536]	; (80036c8 <HAL_ADC_IRQHandler+0x244>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_IRQHandler+0x34>
 80034b4:	4b85      	ldr	r3, [pc, #532]	; (80036cc <HAL_ADC_IRQHandler+0x248>)
 80034b6:	e000      	b.n	80034ba <HAL_ADC_IRQHandler+0x36>
 80034b8:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <HAL_ADC_IRQHandler+0x24c>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fcb0 	bl	8002e20 <LL_ADC_GetMultimode>
 80034c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d017      	beq.n	80034fc <HAL_ADC_IRQHandler+0x78>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d012      	beq.n	80034fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ffce 	bl	8004490 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2202      	movs	r2, #2
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <HAL_ADC_IRQHandler+0x8c>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8083 	beq.w	8003622 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d07d      	beq.n	8003622 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fbb8 	bl	8002cb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d062      	beq.n	8003614 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5d      	ldr	r2, [pc, #372]	; (80036c8 <HAL_ADC_IRQHandler+0x244>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d002      	beq.n	800355e <HAL_ADC_IRQHandler+0xda>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	e000      	b.n	8003560 <HAL_ADC_IRQHandler+0xdc>
 800355e:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_ADC_IRQHandler+0x240>)
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	4293      	cmp	r3, r2
 8003566:	d008      	beq.n	800357a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b05      	cmp	r3, #5
 8003572:	d002      	beq.n	800357a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b09      	cmp	r3, #9
 8003578:	d104      	bne.n	8003584 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	e00c      	b.n	800359e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a4f      	ldr	r2, [pc, #316]	; (80036c8 <HAL_ADC_IRQHandler+0x244>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d002      	beq.n	8003594 <HAL_ADC_IRQHandler+0x110>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	e000      	b.n	8003596 <HAL_ADC_IRQHandler+0x112>
 8003594:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_ADC_IRQHandler+0x240>)
 8003596:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d135      	bne.n	8003614 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d12e      	bne.n	8003614 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fcd6 	bl	8002f6c <LL_ADC_REG_IsConversionOngoing>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11a      	bne.n	80035fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 020c 	bic.w	r2, r2, #12
 80035d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d112      	bne.n	8003614 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
 80035fa:	e00b      	b.n	8003614 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0210 	orr.w	r2, r3, #16
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7fd f873 	bl	8000700 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	220c      	movs	r2, #12
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_ADC_IRQHandler+0x1b2>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a0 	beq.w	8003782 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 809a 	beq.w	8003782 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fb76 	bl	8002d5c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003670:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fb1e 	bl	8002cb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800367c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <HAL_ADC_IRQHandler+0x244>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d002      	beq.n	800368e <HAL_ADC_IRQHandler+0x20a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	e000      	b.n	8003690 <HAL_ADC_IRQHandler+0x20c>
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <HAL_ADC_IRQHandler+0x240>)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	4293      	cmp	r3, r2
 8003696:	d008      	beq.n	80036aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b06      	cmp	r3, #6
 80036a2:	d002      	beq.n	80036aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	d104      	bne.n	80036b4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	623b      	str	r3, [r7, #32]
 80036b2:	e014      	b.n	80036de <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <HAL_ADC_IRQHandler+0x244>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00a      	beq.n	80036d4 <HAL_ADC_IRQHandler+0x250>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	e008      	b.n	80036d6 <HAL_ADC_IRQHandler+0x252>
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40022100 	.word	0x40022100
 80036cc:	40022300 	.word	0x40022300
 80036d0:	58026300 	.word	0x58026300
 80036d4:	4b84      	ldr	r3, [pc, #528]	; (80038e8 <HAL_ADC_IRQHandler+0x464>)
 80036d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d047      	beq.n	8003774 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_ADC_IRQHandler+0x27a>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d03f      	beq.n	8003774 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d13a      	bne.n	8003774 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d133      	bne.n	8003774 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d12e      	bne.n	8003774 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fc39 	bl	8002f92 <LL_ADC_INJ_IsConversionOngoing>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11a      	bne.n	800375c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003734:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d112      	bne.n	8003774 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
 800375a:	e00b      	b.n	8003774 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f043 0210 	orr.w	r2, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fe63 	bl	8004440 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2260      	movs	r2, #96	; 0x60
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d011      	beq.n	80037b0 <HAL_ADC_IRQHandler+0x32c>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00c      	beq.n	80037b0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8b2 	bl	800390c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d012      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x35c>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fe49 	bl	8004468 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d012      	beq.n	8003810 <HAL_ADC_IRQHandler+0x38c>
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fe3b 	bl	800447c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d043      	beq.n	80038a2 <HAL_ADC_IRQHandler+0x41e>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03e      	beq.n	80038a2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800382c:	2301      	movs	r3, #1
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	e021      	b.n	8003876 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d015      	beq.n	8003864 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2a      	ldr	r2, [pc, #168]	; (80038e8 <HAL_ADC_IRQHandler+0x464>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_ADC_IRQHandler+0x3c8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a29      	ldr	r2, [pc, #164]	; (80038ec <HAL_ADC_IRQHandler+0x468>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_ADC_IRQHandler+0x3cc>
 800384c:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_ADC_IRQHandler+0x46c>)
 800384e:	e000      	b.n	8003852 <HAL_ADC_IRQHandler+0x3ce>
 8003850:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <HAL_ADC_IRQHandler+0x470>)
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff faf2 	bl	8002e3c <LL_ADC_GetMultiDMATransfer>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800385e:	2301      	movs	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	e008      	b.n	8003876 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003872:	2301      	movs	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10e      	bne.n	800389a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	f043 0202 	orr.w	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f843 	bl	8003920 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2210      	movs	r2, #16
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d018      	beq.n	80038de <HAL_ADC_IRQHandler+0x45a>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f043 0208 	orr.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fdbb 	bl	8004454 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	; 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40022100 	.word	0x40022100
 80038f0:	40022300 	.word	0x40022300
 80038f4:	58026300 	.word	0x58026300

080038f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b0a1      	sub	sp, #132	; 0x84
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a65      	ldr	r2, [pc, #404]	; (8003ae4 <HAL_ADC_ConfigChannel+0x1b0>)
 800394e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_ADC_ConfigChannel+0x2a>
 800395a:	2302      	movs	r3, #2
 800395c:	e32e      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x688>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fafe 	bl	8002f6c <LL_ADC_REG_IsConversionOngoing>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	f040 8313 	bne.w	8003f9e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db2c      	blt.n	80039da <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <HAL_ADC_ConfigChannel+0x6a>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	0e9b      	lsrs	r3, r3, #26
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	e016      	b.n	80039cc <HAL_ADC_ConfigChannel+0x98>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80039b6:	2320      	movs	r3, #32
 80039b8:	e003      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80039ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2201      	movs	r2, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	69d1      	ldr	r1, [r2, #28]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7ff f979 	bl	8002cde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fabb 	bl	8002f6c <LL_ADC_REG_IsConversionOngoing>
 80039f6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fac8 	bl	8002f92 <LL_ADC_INJ_IsConversionOngoing>
 8003a02:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 80b8 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 80b4 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f7ff f9ae 	bl	8002d82 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a26:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_ADC_ConfigChannel+0x1b4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a32:	d10b      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x118>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	e01d      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x154>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x13e>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	e00a      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x154>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d02c      	beq.n	8003aec <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6919      	ldr	r1, [r3, #16]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa0:	f7ff f8b6 	bl	8002c10 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6919      	ldr	r1, [r3, #16]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	7e5b      	ldrb	r3, [r3, #25]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d102      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x186>
 8003ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ab8:	e000      	b.n	8003abc <HAL_ADC_ConfigChannel+0x188>
 8003aba:	2300      	movs	r3, #0
 8003abc:	461a      	mov	r2, r3
 8003abe:	f7ff f8e0 	bl	8002c82 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6919      	ldr	r1, [r3, #16]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	7e1b      	ldrb	r3, [r3, #24]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d102      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x1a4>
 8003ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ad6:	e000      	b.n	8003ada <HAL_ADC_ConfigChannel+0x1a6>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7ff f8b8 	bl	8002c50 <LL_ADC_SetDataRightShift>
 8003ae0:	e04c      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x248>
 8003ae2:	bf00      	nop
 8003ae4:	47ff0000 	.word	0x47ff0000
 8003ae8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	069b      	lsls	r3, r3, #26
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d107      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	069b      	lsls	r3, r3, #26
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d107      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b32:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	069b      	lsls	r3, r3, #26
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b56:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	069b      	lsls	r3, r3, #26
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d107      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f9cb 	bl	8002f1c <LL_ADC_IsEnabled>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 8211 	bne.w	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7ff f91c 	bl	8002dd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4aa1      	ldr	r2, [pc, #644]	; (8003e2c <HAL_ADC_ConfigChannel+0x4f8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	f040 812e 	bne.w	8003e08 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x2a0>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e019      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x2d4>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e003      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b09      	cmp	r3, #9
 8003c00:	bf94      	ite	ls
 8003c02:	2301      	movls	r3, #1
 8003c04:	2300      	movhi	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d079      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x2f4>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	069b      	lsls	r3, r3, #26
 8003c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c26:	e015      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x320>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e003      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	069b      	lsls	r3, r3, #26
 8003c50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x340>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	e017      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x370>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e003      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	ea42 0103 	orr.w	r1, r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x396>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	051b      	lsls	r3, r3, #20
 8003cc8:	e018      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x3c8>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e003      	b.n	8003cee <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	e07e      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x3e8>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	3301      	adds	r3, #1
 8003d14:	069b      	lsls	r3, r3, #26
 8003d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d1a:	e015      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x414>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003d34:	2320      	movs	r3, #32
 8003d36:	e003      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	069b      	lsls	r3, r3, #26
 8003d44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x434>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	e017      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x464>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	61bb      	str	r3, [r7, #24]
  return result;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	ea42 0103 	orr.w	r1, r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x490>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	3b1e      	subs	r3, #30
 8003dbc:	051b      	lsls	r3, r3, #20
 8003dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	e01b      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x4c8>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	60fb      	str	r3, [r7, #12]
  return result;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003ddc:	2320      	movs	r3, #32
 8003dde:	e003      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	f003 021f 	and.w	r2, r3, #31
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	3b1e      	subs	r3, #30
 8003df6:	051b      	lsls	r3, r3, #20
 8003df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	4619      	mov	r1, r3
 8003e04:	f7fe ffbd 	bl	8002d82 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f280 80cf 	bge.w	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <HAL_ADC_ConfigChannel+0x4fc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_ADC_ConfigChannel+0x4f2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <HAL_ADC_ConfigChannel+0x500>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10a      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x508>
 8003e26:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <HAL_ADC_ConfigChannel+0x504>)
 8003e28:	e009      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x50a>
 8003e2a:	bf00      	nop
 8003e2c:	47ff0000 	.word	0x47ff0000
 8003e30:	40022000 	.word	0x40022000
 8003e34:	40022100 	.word	0x40022100
 8003e38:	40022300 	.word	0x40022300
 8003e3c:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <HAL_ADC_ConfigChannel+0x690>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fed8 	bl	8002bf4 <LL_ADC_GetCommonPathInternalCh>
 8003e44:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5f      	ldr	r2, [pc, #380]	; (8003fc8 <HAL_ADC_ConfigChannel+0x694>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x526>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a5d      	ldr	r2, [pc, #372]	; (8003fcc <HAL_ADC_ConfigChannel+0x698>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10e      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x544>
 8003e5a:	485b      	ldr	r0, [pc, #364]	; (8003fc8 <HAL_ADC_ConfigChannel+0x694>)
 8003e5c:	f7ff f85e 	bl	8002f1c <LL_ADC_IsEnabled>
 8003e60:	4604      	mov	r4, r0
 8003e62:	485a      	ldr	r0, [pc, #360]	; (8003fcc <HAL_ADC_ConfigChannel+0x698>)
 8003e64:	f7ff f85a 	bl	8002f1c <LL_ADC_IsEnabled>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4323      	orrs	r3, r4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e008      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x556>
 8003e78:	4855      	ldr	r0, [pc, #340]	; (8003fd0 <HAL_ADC_ConfigChannel+0x69c>)
 8003e7a:	f7ff f84f 	bl	8002f1c <LL_ADC_IsEnabled>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d07d      	beq.n	8003f8a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a50      	ldr	r2, [pc, #320]	; (8003fd4 <HAL_ADC_ConfigChannel+0x6a0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d130      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x5c6>
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d12b      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4a      	ldr	r2, [pc, #296]	; (8003fd0 <HAL_ADC_ConfigChannel+0x69c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	f040 8081 	bne.w	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a45      	ldr	r2, [pc, #276]	; (8003fc8 <HAL_ADC_ConfigChannel+0x694>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_ADC_ConfigChannel+0x58e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a43      	ldr	r2, [pc, #268]	; (8003fcc <HAL_ADC_ConfigChannel+0x698>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x592>
 8003ec2:	4a45      	ldr	r2, [pc, #276]	; (8003fd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003ec4:	e000      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x594>
 8003ec6:	4a3f      	ldr	r2, [pc, #252]	; (8003fc4 <HAL_ADC_ConfigChannel+0x690>)
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fe7c 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_ADC_ConfigChannel+0x6a8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	4a40      	ldr	r2, [pc, #256]	; (8003fe0 <HAL_ADC_ConfigChannel+0x6ac>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003eea:	e002      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f9      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef8:	e05a      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a39      	ldr	r2, [pc, #228]	; (8003fe4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d11e      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x60e>
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d119      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2f      	ldr	r2, [pc, #188]	; (8003fd0 <HAL_ADC_ConfigChannel+0x69c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d14b      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2a      	ldr	r2, [pc, #168]	; (8003fc8 <HAL_ADC_ConfigChannel+0x694>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_ADC_ConfigChannel+0x5f8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a29      	ldr	r2, [pc, #164]	; (8003fcc <HAL_ADC_ConfigChannel+0x698>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x5fc>
 8003f2c:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003f2e:	e000      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x5fe>
 8003f30:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HAL_ADC_ConfigChannel+0x690>)
 8003f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fe fe47 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f40:	e036      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <HAL_ADC_ConfigChannel+0x6b4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d131      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
 8003f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d12c      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <HAL_ADC_ConfigChannel+0x69c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d127      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_ADC_ConfigChannel+0x694>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x640>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_ADC_ConfigChannel+0x698>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x644>
 8003f74:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003f76:	e000      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x646>
 8003f78:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <HAL_ADC_ConfigChannel+0x690>)
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f7fe fe23 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
 8003f88:	e012      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f9c:	e008      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3784      	adds	r7, #132	; 0x84
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd90      	pop	{r4, r7, pc}
 8003fc4:	58026300 	.word	0x58026300
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	40022100 	.word	0x40022100
 8003fd0:	58026000 	.word	0x58026000
 8003fd4:	cb840000 	.word	0xcb840000
 8003fd8:	40022300 	.word	0x40022300
 8003fdc:	24000000 	.word	0x24000000
 8003fe0:	053e2d63 	.word	0x053e2d63
 8003fe4:	c7520000 	.word	0xc7520000
 8003fe8:	cfb80000 	.word	0xcfb80000

08003fec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe ff8f 	bl	8002f1c <LL_ADC_IsEnabled>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d16e      	bne.n	80040e2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b38      	ldr	r3, [pc, #224]	; (80040ec <ADC_Enable+0x100>)
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f043 0210 	orr.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e05a      	b.n	80040e4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe ff5e 	bl	8002ef4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004038:	f7fe fd50 	bl	8002adc <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2b      	ldr	r2, [pc, #172]	; (80040f0 <ADC_Enable+0x104>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <ADC_Enable+0x66>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <ADC_Enable+0x108>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <ADC_Enable+0x6a>
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <ADC_Enable+0x10c>)
 8004054:	e000      	b.n	8004058 <ADC_Enable+0x6c>
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <ADC_Enable+0x110>)
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fee1 	bl	8002e20 <LL_ADC_GetMultimode>
 800405e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <ADC_Enable+0x108>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d002      	beq.n	8004070 <ADC_Enable+0x84>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	e000      	b.n	8004072 <ADC_Enable+0x86>
 8004070:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <ADC_Enable+0x104>)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	4293      	cmp	r3, r2
 8004078:	d02c      	beq.n	80040d4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d130      	bne.n	80040e2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004080:	e028      	b.n	80040d4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe ff48 	bl	8002f1c <LL_ADC_IsEnabled>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe ff2c 	bl	8002ef4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800409c:	f7fe fd1e 	bl	8002adc <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d914      	bls.n	80040d4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d00d      	beq.n	80040d4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0210 	orr.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d1cf      	bne.n	8004082 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	8000003f 	.word	0x8000003f
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40022100 	.word	0x40022100
 80040f8:	40022300 	.word	0x40022300
 80040fc:	58026300 	.word	0x58026300

08004100 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004116:	2b00      	cmp	r3, #0
 8004118:	d14b      	bne.n	80041b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d021      	beq.n	8004178 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fdbd 	bl	8002cb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d032      	beq.n	80041aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d12b      	bne.n	80041aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11f      	bne.n	80041aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
 8004176:	e018      	b.n	80041aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d111      	bne.n	80041aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	f043 0201 	orr.w	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7fc faa8 	bl	8000700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041b0:	e00e      	b.n	80041d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff fbae 	bl	8003920 <HAL_ADC_ErrorCallback>
}
 80041c4:	e004      	b.n	80041d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff fb86 	bl	80038f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff fb80 	bl	8003920 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7a      	ldr	r2, [pc, #488]	; (8004420 <ADC_ConfigureBoostMode+0x1f8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <ADC_ConfigureBoostMode+0x1c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a79      	ldr	r2, [pc, #484]	; (8004424 <ADC_ConfigureBoostMode+0x1fc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d109      	bne.n	8004258 <ADC_ConfigureBoostMode+0x30>
 8004244:	4b78      	ldr	r3, [pc, #480]	; (8004428 <ADC_ConfigureBoostMode+0x200>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e008      	b.n	800426a <ADC_ConfigureBoostMode+0x42>
 8004258:	4b74      	ldr	r3, [pc, #464]	; (800442c <ADC_ConfigureBoostMode+0x204>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01c      	beq.n	80042a8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800426e:	f004 ffcd 	bl	800920c <HAL_RCC_GetHCLKFreq>
 8004272:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800427c:	d010      	beq.n	80042a0 <ADC_ConfigureBoostMode+0x78>
 800427e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004282:	d873      	bhi.n	800436c <ADC_ConfigureBoostMode+0x144>
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d002      	beq.n	8004290 <ADC_ConfigureBoostMode+0x68>
 800428a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428e:	d16d      	bne.n	800436c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	60fb      	str	r3, [r7, #12]
        break;
 800429e:	e068      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	60fb      	str	r3, [r7, #12]
        break;
 80042a6:	e064      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80042a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	f006 fa12 	bl	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80042b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042be:	d051      	beq.n	8004364 <ADC_ConfigureBoostMode+0x13c>
 80042c0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042c4:	d854      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 80042c6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042ca:	d047      	beq.n	800435c <ADC_ConfigureBoostMode+0x134>
 80042cc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042d0:	d84e      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 80042d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042d6:	d03d      	beq.n	8004354 <ADC_ConfigureBoostMode+0x12c>
 80042d8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042dc:	d848      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 80042de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e2:	d033      	beq.n	800434c <ADC_ConfigureBoostMode+0x124>
 80042e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e8:	d842      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 80042ea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80042ee:	d029      	beq.n	8004344 <ADC_ConfigureBoostMode+0x11c>
 80042f0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80042f4:	d83c      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 80042f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80042fa:	d01a      	beq.n	8004332 <ADC_ConfigureBoostMode+0x10a>
 80042fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004300:	d836      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 8004302:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004306:	d014      	beq.n	8004332 <ADC_ConfigureBoostMode+0x10a>
 8004308:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800430c:	d830      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 800430e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004312:	d00e      	beq.n	8004332 <ADC_ConfigureBoostMode+0x10a>
 8004314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004318:	d82a      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 800431a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800431e:	d008      	beq.n	8004332 <ADC_ConfigureBoostMode+0x10a>
 8004320:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004324:	d824      	bhi.n	8004370 <ADC_ConfigureBoostMode+0x148>
 8004326:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800432a:	d002      	beq.n	8004332 <ADC_ConfigureBoostMode+0x10a>
 800432c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004330:	d11e      	bne.n	8004370 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	0c9b      	lsrs	r3, r3, #18
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	60fb      	str	r3, [r7, #12]
        break;
 8004342:	e016      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
        break;
 800434a:	e012      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	60fb      	str	r3, [r7, #12]
        break;
 8004352:	e00e      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	60fb      	str	r3, [r7, #12]
        break;
 800435a:	e00a      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	09db      	lsrs	r3, r3, #7
 8004360:	60fb      	str	r3, [r7, #12]
        break;
 8004362:	e006      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	60fb      	str	r3, [r7, #12]
        break;
 800436a:	e002      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
        break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004370:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004372:	f7fe fbe3 	bl	8002b3c <HAL_GetREVID>
 8004376:	4603      	mov	r3, r0
 8004378:	f241 0203 	movw	r2, #4099	; 0x1003
 800437c:	4293      	cmp	r3, r2
 800437e:	d815      	bhi.n	80043ac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <ADC_ConfigureBoostMode+0x208>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d908      	bls.n	800439a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004396:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004398:	e03e      	b.n	8004418 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a8:	609a      	str	r2, [r3, #8]
}
 80043aa:	e035      	b.n	8004418 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <ADC_ConfigureBoostMode+0x20c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d808      	bhi.n	80043cc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	e025      	b.n	8004418 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <ADC_ConfigureBoostMode+0x210>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d80a      	bhi.n	80043ea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	e016      	b.n	8004418 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <ADC_ConfigureBoostMode+0x214>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d80a      	bhi.n	8004408 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004404:	609a      	str	r2, [r3, #8]
}
 8004406:	e007      	b.n	8004418 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40022000 	.word	0x40022000
 8004424:	40022100 	.word	0x40022100
 8004428:	40022300 	.word	0x40022300
 800442c:	58026300 	.word	0x58026300
 8004430:	01312d00 	.word	0x01312d00
 8004434:	005f5e10 	.word	0x005f5e10
 8004438:	00bebc20 	.word	0x00bebc20
 800443c:	017d7840 	.word	0x017d7840

08004440 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <__NVIC_SetPriorityGrouping+0x40>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <__NVIC_SetPriorityGrouping+0x40>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60d3      	str	r3, [r2, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	05fa0000 	.word	0x05fa0000

080044ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <__NVIC_GetPriorityGrouping+0x18>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f003 0307 	and.w	r3, r3, #7
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004516:	2b00      	cmp	r3, #0
 8004518:	db0b      	blt.n	8004532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4907      	ldr	r1, [pc, #28]	; (8004540 <__NVIC_EnableIRQ+0x38>)
 8004522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2001      	movs	r0, #1
 800452a:	fa00 f202 	lsl.w	r2, r0, r2
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e100 	.word	0xe000e100

08004544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db0a      	blt.n	800456e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	490c      	ldr	r1, [pc, #48]	; (8004590 <__NVIC_SetPriority+0x4c>)
 800455e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004562:	0112      	lsls	r2, r2, #4
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	440b      	add	r3, r1
 8004568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800456c:	e00a      	b.n	8004584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4908      	ldr	r1, [pc, #32]	; (8004594 <__NVIC_SetPriority+0x50>)
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	3b04      	subs	r3, #4
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	440b      	add	r3, r1
 8004582:	761a      	strb	r2, [r3, #24]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	e000e100 	.word	0xe000e100
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f1c3 0307 	rsb	r3, r3, #7
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	bf28      	it	cs
 80045b6:	2304      	movcs	r3, #4
 80045b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3304      	adds	r3, #4
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d902      	bls.n	80045c8 <NVIC_EncodePriority+0x30>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3b03      	subs	r3, #3
 80045c6:	e000      	b.n	80045ca <NVIC_EncodePriority+0x32>
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43da      	mvns	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	401a      	ands	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e0:	f04f 31ff 	mov.w	r1, #4294967295
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	43d9      	mvns	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	4313      	orrs	r3, r2
         );
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3b01      	subs	r3, #1
 800460c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004610:	d301      	bcc.n	8004616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004612:	2301      	movs	r3, #1
 8004614:	e00f      	b.n	8004636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004616:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <SysTick_Config+0x40>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3b01      	subs	r3, #1
 800461c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800461e:	210f      	movs	r1, #15
 8004620:	f04f 30ff 	mov.w	r0, #4294967295
 8004624:	f7ff ff8e 	bl	8004544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <SysTick_Config+0x40>)
 800462a:	2200      	movs	r2, #0
 800462c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <SysTick_Config+0x40>)
 8004630:	2207      	movs	r2, #7
 8004632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	e000e010 	.word	0xe000e010

08004644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff29 	bl	80044a4 <__NVIC_SetPriorityGrouping>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	4603      	mov	r3, r0
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004668:	f7ff ff40 	bl	80044ec <__NVIC_GetPriorityGrouping>
 800466c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	6978      	ldr	r0, [r7, #20]
 8004674:	f7ff ff90 	bl	8004598 <NVIC_EncodePriority>
 8004678:	4602      	mov	r2, r0
 800467a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff5f 	bl	8004544 <__NVIC_SetPriority>
}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff33 	bl	8004508 <__NVIC_EnableIRQ>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff ffa4 	bl	8004600 <SysTick_Config>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80046cc:	f7fe fa06 	bl	8002adc <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e316      	b.n	8004d0a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a66      	ldr	r2, [pc, #408]	; (800487c <HAL_DMA_Init+0x1b8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d04a      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_DMA_Init+0x1bc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d045      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a63      	ldr	r2, [pc, #396]	; (8004884 <HAL_DMA_Init+0x1c0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d040      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a62      	ldr	r2, [pc, #392]	; (8004888 <HAL_DMA_Init+0x1c4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d03b      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a60      	ldr	r2, [pc, #384]	; (800488c <HAL_DMA_Init+0x1c8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d036      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5f      	ldr	r2, [pc, #380]	; (8004890 <HAL_DMA_Init+0x1cc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d031      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5d      	ldr	r2, [pc, #372]	; (8004894 <HAL_DMA_Init+0x1d0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02c      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a5c      	ldr	r2, [pc, #368]	; (8004898 <HAL_DMA_Init+0x1d4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d027      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5a      	ldr	r2, [pc, #360]	; (800489c <HAL_DMA_Init+0x1d8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a59      	ldr	r2, [pc, #356]	; (80048a0 <HAL_DMA_Init+0x1dc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a57      	ldr	r2, [pc, #348]	; (80048a4 <HAL_DMA_Init+0x1e0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a56      	ldr	r2, [pc, #344]	; (80048a8 <HAL_DMA_Init+0x1e4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a54      	ldr	r2, [pc, #336]	; (80048ac <HAL_DMA_Init+0x1e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a53      	ldr	r2, [pc, #332]	; (80048b0 <HAL_DMA_Init+0x1ec>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a51      	ldr	r2, [pc, #324]	; (80048b4 <HAL_DMA_Init+0x1f0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a50      	ldr	r2, [pc, #320]	; (80048b8 <HAL_DMA_Init+0x1f4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_DMA_Init+0xbc>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_DMA_Init+0xbe>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 813b 	beq.w	80049fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a37      	ldr	r2, [pc, #220]	; (800487c <HAL_DMA_Init+0x1b8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d04a      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a36      	ldr	r2, [pc, #216]	; (8004880 <HAL_DMA_Init+0x1bc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d045      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a34      	ldr	r2, [pc, #208]	; (8004884 <HAL_DMA_Init+0x1c0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d040      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a33      	ldr	r2, [pc, #204]	; (8004888 <HAL_DMA_Init+0x1c4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d03b      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a31      	ldr	r2, [pc, #196]	; (800488c <HAL_DMA_Init+0x1c8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d036      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a30      	ldr	r2, [pc, #192]	; (8004890 <HAL_DMA_Init+0x1cc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d031      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2e      	ldr	r2, [pc, #184]	; (8004894 <HAL_DMA_Init+0x1d0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d02c      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2d      	ldr	r2, [pc, #180]	; (8004898 <HAL_DMA_Init+0x1d4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d027      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <HAL_DMA_Init+0x1d8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <HAL_DMA_Init+0x1dc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d01d      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a28      	ldr	r2, [pc, #160]	; (80048a4 <HAL_DMA_Init+0x1e0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <HAL_DMA_Init+0x1e4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a25      	ldr	r2, [pc, #148]	; (80048ac <HAL_DMA_Init+0x1e8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_DMA_Init+0x174>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <HAL_DMA_Init+0x1ec>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <HAL_DMA_Init+0x1f0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_DMA_Init+0x174>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <HAL_DMA_Init+0x1f4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <HAL_DMA_Init+0x186>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e007      	b.n	800485a <HAL_DMA_Init+0x196>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800485a:	e02f      	b.n	80048bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800485c:	f7fe f93e 	bl	8002adc <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b05      	cmp	r3, #5
 8004868:	d928      	bls.n	80048bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2203      	movs	r2, #3
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e246      	b.n	8004d0a <HAL_DMA_Init+0x646>
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1c8      	bne.n	800485c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4b83      	ldr	r3, [pc, #524]	; (8004ae4 <HAL_DMA_Init+0x420>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80048e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b04      	cmp	r3, #4
 800490e:	d107      	bne.n	8004920 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	4313      	orrs	r3, r2
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004920:	4b71      	ldr	r3, [pc, #452]	; (8004ae8 <HAL_DMA_Init+0x424>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b71      	ldr	r3, [pc, #452]	; (8004aec <HAL_DMA_Init+0x428>)
 8004926:	4013      	ands	r3, r2
 8004928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492c:	d328      	bcc.n	8004980 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b28      	cmp	r3, #40	; 0x28
 8004934:	d903      	bls.n	800493e <HAL_DMA_Init+0x27a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b2e      	cmp	r3, #46	; 0x2e
 800493c:	d917      	bls.n	800496e <HAL_DMA_Init+0x2aa>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b3e      	cmp	r3, #62	; 0x3e
 8004944:	d903      	bls.n	800494e <HAL_DMA_Init+0x28a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b42      	cmp	r3, #66	; 0x42
 800494c:	d90f      	bls.n	800496e <HAL_DMA_Init+0x2aa>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b46      	cmp	r3, #70	; 0x46
 8004954:	d903      	bls.n	800495e <HAL_DMA_Init+0x29a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b48      	cmp	r3, #72	; 0x48
 800495c:	d907      	bls.n	800496e <HAL_DMA_Init+0x2aa>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b4e      	cmp	r3, #78	; 0x4e
 8004964:	d905      	bls.n	8004972 <HAL_DMA_Init+0x2ae>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b52      	cmp	r3, #82	; 0x52
 800496c:	d801      	bhi.n	8004972 <HAL_DMA_Init+0x2ae>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_DMA_Init+0x2b0>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0307 	bic.w	r3, r3, #7
 8004996:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d117      	bne.n	80049da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00e      	beq.n	80049da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f002 fb33 	bl	8007028 <DMA_CheckFifoParam>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2240      	movs	r2, #64	; 0x40
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e197      	b.n	8004d0a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f002 fa6e 	bl	8006ec4 <DMA_CalcBaseAndBitshift>
 80049e8:	4603      	mov	r3, r0
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	223f      	movs	r2, #63	; 0x3f
 80049f6:	409a      	lsls	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	e0cd      	b.n	8004b9a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <HAL_DMA_Init+0x42c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a39      	ldr	r2, [pc, #228]	; (8004af4 <HAL_DMA_Init+0x430>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01d      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a38      	ldr	r2, [pc, #224]	; (8004af8 <HAL_DMA_Init+0x434>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a36      	ldr	r2, [pc, #216]	; (8004afc <HAL_DMA_Init+0x438>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a35      	ldr	r2, [pc, #212]	; (8004b00 <HAL_DMA_Init+0x43c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a33      	ldr	r2, [pc, #204]	; (8004b04 <HAL_DMA_Init+0x440>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a32      	ldr	r2, [pc, #200]	; (8004b08 <HAL_DMA_Init+0x444>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a30      	ldr	r2, [pc, #192]	; (8004b0c <HAL_DMA_Init+0x448>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_DMA_Init+0x38e>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <HAL_DMA_Init+0x390>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8097 	beq.w	8004b88 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <HAL_DMA_Init+0x42c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d021      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_DMA_Init+0x430>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01c      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_DMA_Init+0x434>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d017      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_DMA_Init+0x438>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d012      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_DMA_Init+0x43c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <HAL_DMA_Init+0x440>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d008      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_DMA_Init+0x444>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <HAL_DMA_Init+0x448>)
 8004aa6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <HAL_DMA_Init+0x44c>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d021      	beq.n	8004b14 <HAL_DMA_Init+0x450>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d102      	bne.n	8004ade <HAL_DMA_Init+0x41a>
 8004ad8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004adc:	e01b      	b.n	8004b16 <HAL_DMA_Init+0x452>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e019      	b.n	8004b16 <HAL_DMA_Init+0x452>
 8004ae2:	bf00      	nop
 8004ae4:	fe10803f 	.word	0xfe10803f
 8004ae8:	5c001000 	.word	0x5c001000
 8004aec:	ffff0000 	.word	0xffff0000
 8004af0:	58025408 	.word	0x58025408
 8004af4:	5802541c 	.word	0x5802541c
 8004af8:	58025430 	.word	0x58025430
 8004afc:	58025444 	.word	0x58025444
 8004b00:	58025458 	.word	0x58025458
 8004b04:	5802546c 	.word	0x5802546c
 8004b08:	58025480 	.word	0x58025480
 8004b0c:	58025494 	.word	0x58025494
 8004b10:	fffe000f 	.word	0xfffe000f
 8004b14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68d2      	ldr	r2, [r2, #12]
 8004b1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b6e      	ldr	r3, [pc, #440]	; (8004d14 <HAL_DMA_Init+0x650>)
 8004b5c:	4413      	add	r3, r2
 8004b5e:	4a6e      	ldr	r2, [pc, #440]	; (8004d18 <HAL_DMA_Init+0x654>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	009a      	lsls	r2, r3, #2
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f002 f9a9 	bl	8006ec4 <DMA_CalcBaseAndBitshift>
 8004b72:	4603      	mov	r3, r0
 8004b74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2201      	movs	r2, #1
 8004b80:	409a      	lsls	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e008      	b.n	8004b9a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2240      	movs	r2, #64	; 0x40
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2203      	movs	r2, #3
 8004b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0b7      	b.n	8004d0a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5f      	ldr	r2, [pc, #380]	; (8004d1c <HAL_DMA_Init+0x658>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d072      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5d      	ldr	r2, [pc, #372]	; (8004d20 <HAL_DMA_Init+0x65c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d06d      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5c      	ldr	r2, [pc, #368]	; (8004d24 <HAL_DMA_Init+0x660>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d068      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5a      	ldr	r2, [pc, #360]	; (8004d28 <HAL_DMA_Init+0x664>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d063      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a59      	ldr	r2, [pc, #356]	; (8004d2c <HAL_DMA_Init+0x668>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d05e      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a57      	ldr	r2, [pc, #348]	; (8004d30 <HAL_DMA_Init+0x66c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d059      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a56      	ldr	r2, [pc, #344]	; (8004d34 <HAL_DMA_Init+0x670>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d054      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a54      	ldr	r2, [pc, #336]	; (8004d38 <HAL_DMA_Init+0x674>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d04f      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a53      	ldr	r2, [pc, #332]	; (8004d3c <HAL_DMA_Init+0x678>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d04a      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a51      	ldr	r2, [pc, #324]	; (8004d40 <HAL_DMA_Init+0x67c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d045      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a50      	ldr	r2, [pc, #320]	; (8004d44 <HAL_DMA_Init+0x680>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d040      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a4e      	ldr	r2, [pc, #312]	; (8004d48 <HAL_DMA_Init+0x684>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d03b      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a4d      	ldr	r2, [pc, #308]	; (8004d4c <HAL_DMA_Init+0x688>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d036      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a4b      	ldr	r2, [pc, #300]	; (8004d50 <HAL_DMA_Init+0x68c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d031      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4a      	ldr	r2, [pc, #296]	; (8004d54 <HAL_DMA_Init+0x690>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d02c      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a48      	ldr	r2, [pc, #288]	; (8004d58 <HAL_DMA_Init+0x694>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d027      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a47      	ldr	r2, [pc, #284]	; (8004d5c <HAL_DMA_Init+0x698>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a45      	ldr	r2, [pc, #276]	; (8004d60 <HAL_DMA_Init+0x69c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01d      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a44      	ldr	r2, [pc, #272]	; (8004d64 <HAL_DMA_Init+0x6a0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a42      	ldr	r2, [pc, #264]	; (8004d68 <HAL_DMA_Init+0x6a4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a41      	ldr	r2, [pc, #260]	; (8004d6c <HAL_DMA_Init+0x6a8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3f      	ldr	r2, [pc, #252]	; (8004d70 <HAL_DMA_Init+0x6ac>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3e      	ldr	r2, [pc, #248]	; (8004d74 <HAL_DMA_Init+0x6b0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a3c      	ldr	r2, [pc, #240]	; (8004d78 <HAL_DMA_Init+0x6b4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <HAL_DMA_Init+0x5ca>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_DMA_Init+0x5cc>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d032      	beq.n	8004cfa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f002 fa43 	bl	8007120 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b80      	cmp	r3, #128	; 0x80
 8004ca0:	d102      	bne.n	8004ca8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004cbc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d010      	beq.n	8004ce8 <HAL_DMA_Init+0x624>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d80c      	bhi.n	8004ce8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f002 fac0 	bl	8007254 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	e008      	b.n	8004cfa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	a7fdabf8 	.word	0xa7fdabf8
 8004d18:	cccccccd 	.word	0xcccccccd
 8004d1c:	40020010 	.word	0x40020010
 8004d20:	40020028 	.word	0x40020028
 8004d24:	40020040 	.word	0x40020040
 8004d28:	40020058 	.word	0x40020058
 8004d2c:	40020070 	.word	0x40020070
 8004d30:	40020088 	.word	0x40020088
 8004d34:	400200a0 	.word	0x400200a0
 8004d38:	400200b8 	.word	0x400200b8
 8004d3c:	40020410 	.word	0x40020410
 8004d40:	40020428 	.word	0x40020428
 8004d44:	40020440 	.word	0x40020440
 8004d48:	40020458 	.word	0x40020458
 8004d4c:	40020470 	.word	0x40020470
 8004d50:	40020488 	.word	0x40020488
 8004d54:	400204a0 	.word	0x400204a0
 8004d58:	400204b8 	.word	0x400204b8
 8004d5c:	58025408 	.word	0x58025408
 8004d60:	5802541c 	.word	0x5802541c
 8004d64:	58025430 	.word	0x58025430
 8004d68:	58025444 	.word	0x58025444
 8004d6c:	58025458 	.word	0x58025458
 8004d70:	5802546c 	.word	0x5802546c
 8004d74:	58025480 	.word	0x58025480
 8004d78:	58025494 	.word	0x58025494

08004d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e226      	b.n	80051e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_DMA_Start_IT+0x2a>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e21f      	b.n	80051e6 <HAL_DMA_Start_IT+0x46a>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	f040 820a 	bne.w	80051d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a68      	ldr	r2, [pc, #416]	; (8004f70 <HAL_DMA_Start_IT+0x1f4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a66      	ldr	r2, [pc, #408]	; (8004f74 <HAL_DMA_Start_IT+0x1f8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a65      	ldr	r2, [pc, #404]	; (8004f78 <HAL_DMA_Start_IT+0x1fc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a63      	ldr	r2, [pc, #396]	; (8004f7c <HAL_DMA_Start_IT+0x200>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a62      	ldr	r2, [pc, #392]	; (8004f80 <HAL_DMA_Start_IT+0x204>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a60      	ldr	r2, [pc, #384]	; (8004f84 <HAL_DMA_Start_IT+0x208>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a5f      	ldr	r2, [pc, #380]	; (8004f88 <HAL_DMA_Start_IT+0x20c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a5d      	ldr	r2, [pc, #372]	; (8004f8c <HAL_DMA_Start_IT+0x210>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a5c      	ldr	r2, [pc, #368]	; (8004f90 <HAL_DMA_Start_IT+0x214>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a5a      	ldr	r2, [pc, #360]	; (8004f94 <HAL_DMA_Start_IT+0x218>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a59      	ldr	r2, [pc, #356]	; (8004f98 <HAL_DMA_Start_IT+0x21c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a57      	ldr	r2, [pc, #348]	; (8004f9c <HAL_DMA_Start_IT+0x220>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a56      	ldr	r2, [pc, #344]	; (8004fa0 <HAL_DMA_Start_IT+0x224>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a54      	ldr	r2, [pc, #336]	; (8004fa4 <HAL_DMA_Start_IT+0x228>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a53      	ldr	r2, [pc, #332]	; (8004fa8 <HAL_DMA_Start_IT+0x22c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a51      	ldr	r2, [pc, #324]	; (8004fac <HAL_DMA_Start_IT+0x230>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <HAL_DMA_Start_IT+0x100>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e007      	b.n	8004e8c <HAL_DMA_Start_IT+0x110>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f001 fe6a 	bl	8006b6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a34      	ldr	r2, [pc, #208]	; (8004f70 <HAL_DMA_Start_IT+0x1f4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d04a      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a33      	ldr	r2, [pc, #204]	; (8004f74 <HAL_DMA_Start_IT+0x1f8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d045      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a31      	ldr	r2, [pc, #196]	; (8004f78 <HAL_DMA_Start_IT+0x1fc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d040      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a30      	ldr	r2, [pc, #192]	; (8004f7c <HAL_DMA_Start_IT+0x200>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d03b      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2e      	ldr	r2, [pc, #184]	; (8004f80 <HAL_DMA_Start_IT+0x204>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d036      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2d      	ldr	r2, [pc, #180]	; (8004f84 <HAL_DMA_Start_IT+0x208>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d031      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	; (8004f88 <HAL_DMA_Start_IT+0x20c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02c      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2a      	ldr	r2, [pc, #168]	; (8004f8c <HAL_DMA_Start_IT+0x210>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d027      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <HAL_DMA_Start_IT+0x214>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <HAL_DMA_Start_IT+0x218>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d01d      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <HAL_DMA_Start_IT+0x21c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d018      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <HAL_DMA_Start_IT+0x220>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a22      	ldr	r2, [pc, #136]	; (8004fa0 <HAL_DMA_Start_IT+0x224>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00e      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <HAL_DMA_Start_IT+0x228>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <HAL_DMA_Start_IT+0x22c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <HAL_DMA_Start_IT+0x230>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <HAL_DMA_Start_IT+0x1c0>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <HAL_DMA_Start_IT+0x1c2>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d036      	beq.n	8004fb0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 021e 	bic.w	r2, r3, #30
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0216 	orr.w	r2, r2, #22
 8004f54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d03e      	beq.n	8004fdc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0208 	orr.w	r2, r2, #8
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e035      	b.n	8004fdc <HAL_DMA_Start_IT+0x260>
 8004f70:	40020010 	.word	0x40020010
 8004f74:	40020028 	.word	0x40020028
 8004f78:	40020040 	.word	0x40020040
 8004f7c:	40020058 	.word	0x40020058
 8004f80:	40020070 	.word	0x40020070
 8004f84:	40020088 	.word	0x40020088
 8004f88:	400200a0 	.word	0x400200a0
 8004f8c:	400200b8 	.word	0x400200b8
 8004f90:	40020410 	.word	0x40020410
 8004f94:	40020428 	.word	0x40020428
 8004f98:	40020440 	.word	0x40020440
 8004f9c:	40020458 	.word	0x40020458
 8004fa0:	40020470 	.word	0x40020470
 8004fa4:	40020488 	.word	0x40020488
 8004fa8:	400204a0 	.word	0x400204a0
 8004fac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 020e 	bic.w	r2, r3, #14
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 020a 	orr.w	r2, r2, #10
 8004fc2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0204 	orr.w	r2, r2, #4
 8004fda:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a83      	ldr	r2, [pc, #524]	; (80051f0 <HAL_DMA_Start_IT+0x474>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d072      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a82      	ldr	r2, [pc, #520]	; (80051f4 <HAL_DMA_Start_IT+0x478>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d06d      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a80      	ldr	r2, [pc, #512]	; (80051f8 <HAL_DMA_Start_IT+0x47c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d068      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7f      	ldr	r2, [pc, #508]	; (80051fc <HAL_DMA_Start_IT+0x480>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d063      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a7d      	ldr	r2, [pc, #500]	; (8005200 <HAL_DMA_Start_IT+0x484>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d05e      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7c      	ldr	r2, [pc, #496]	; (8005204 <HAL_DMA_Start_IT+0x488>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d059      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7a      	ldr	r2, [pc, #488]	; (8005208 <HAL_DMA_Start_IT+0x48c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d054      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a79      	ldr	r2, [pc, #484]	; (800520c <HAL_DMA_Start_IT+0x490>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04f      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a77      	ldr	r2, [pc, #476]	; (8005210 <HAL_DMA_Start_IT+0x494>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d04a      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a76      	ldr	r2, [pc, #472]	; (8005214 <HAL_DMA_Start_IT+0x498>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d045      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a74      	ldr	r2, [pc, #464]	; (8005218 <HAL_DMA_Start_IT+0x49c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d040      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a73      	ldr	r2, [pc, #460]	; (800521c <HAL_DMA_Start_IT+0x4a0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d03b      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a71      	ldr	r2, [pc, #452]	; (8005220 <HAL_DMA_Start_IT+0x4a4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d036      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a70      	ldr	r2, [pc, #448]	; (8005224 <HAL_DMA_Start_IT+0x4a8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d031      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6e      	ldr	r2, [pc, #440]	; (8005228 <HAL_DMA_Start_IT+0x4ac>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02c      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6d      	ldr	r2, [pc, #436]	; (800522c <HAL_DMA_Start_IT+0x4b0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d027      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a6b      	ldr	r2, [pc, #428]	; (8005230 <HAL_DMA_Start_IT+0x4b4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6a      	ldr	r2, [pc, #424]	; (8005234 <HAL_DMA_Start_IT+0x4b8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d01d      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a68      	ldr	r2, [pc, #416]	; (8005238 <HAL_DMA_Start_IT+0x4bc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a67      	ldr	r2, [pc, #412]	; (800523c <HAL_DMA_Start_IT+0x4c0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a65      	ldr	r2, [pc, #404]	; (8005240 <HAL_DMA_Start_IT+0x4c4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a64      	ldr	r2, [pc, #400]	; (8005244 <HAL_DMA_Start_IT+0x4c8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a62      	ldr	r2, [pc, #392]	; (8005248 <HAL_DMA_Start_IT+0x4cc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a61      	ldr	r2, [pc, #388]	; (800524c <HAL_DMA_Start_IT+0x4d0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_DMA_Start_IT+0x354>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <HAL_DMA_Start_IT+0x356>
 80050d0:	2300      	movs	r3, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01a      	beq.n	800510c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a37      	ldr	r2, [pc, #220]	; (80051f0 <HAL_DMA_Start_IT+0x474>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a36      	ldr	r2, [pc, #216]	; (80051f4 <HAL_DMA_Start_IT+0x478>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a34      	ldr	r2, [pc, #208]	; (80051f8 <HAL_DMA_Start_IT+0x47c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a33      	ldr	r2, [pc, #204]	; (80051fc <HAL_DMA_Start_IT+0x480>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a31      	ldr	r2, [pc, #196]	; (8005200 <HAL_DMA_Start_IT+0x484>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a30      	ldr	r2, [pc, #192]	; (8005204 <HAL_DMA_Start_IT+0x488>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2e      	ldr	r2, [pc, #184]	; (8005208 <HAL_DMA_Start_IT+0x48c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2d      	ldr	r2, [pc, #180]	; (800520c <HAL_DMA_Start_IT+0x490>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <HAL_DMA_Start_IT+0x494>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <HAL_DMA_Start_IT+0x498>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a28      	ldr	r2, [pc, #160]	; (8005218 <HAL_DMA_Start_IT+0x49c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a27      	ldr	r2, [pc, #156]	; (800521c <HAL_DMA_Start_IT+0x4a0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a25      	ldr	r2, [pc, #148]	; (8005220 <HAL_DMA_Start_IT+0x4a4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a24      	ldr	r2, [pc, #144]	; (8005224 <HAL_DMA_Start_IT+0x4a8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <HAL_DMA_Start_IT+0x4ac>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a21      	ldr	r2, [pc, #132]	; (800522c <HAL_DMA_Start_IT+0x4b0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <HAL_DMA_Start_IT+0x442>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e012      	b.n	80051e4 <HAL_DMA_Start_IT+0x468>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e009      	b.n	80051e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
 8005230:	58025408 	.word	0x58025408
 8005234:	5802541c 	.word	0x5802541c
 8005238:	58025430 	.word	0x58025430
 800523c:	58025444 	.word	0x58025444
 8005240:	58025458 	.word	0x58025458
 8005244:	5802546c 	.word	0x5802546c
 8005248:	58025480 	.word	0x58025480
 800524c:	58025494 	.word	0x58025494

08005250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005258:	f7fd fc40 	bl	8002adc <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e2dc      	b.n	8005822 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d008      	beq.n	8005286 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e2cd      	b.n	8005822 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a76      	ldr	r2, [pc, #472]	; (8005464 <HAL_DMA_Abort+0x214>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d04a      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a74      	ldr	r2, [pc, #464]	; (8005468 <HAL_DMA_Abort+0x218>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d045      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a73      	ldr	r2, [pc, #460]	; (800546c <HAL_DMA_Abort+0x21c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d040      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a71      	ldr	r2, [pc, #452]	; (8005470 <HAL_DMA_Abort+0x220>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d03b      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a70      	ldr	r2, [pc, #448]	; (8005474 <HAL_DMA_Abort+0x224>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d036      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a6e      	ldr	r2, [pc, #440]	; (8005478 <HAL_DMA_Abort+0x228>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a6d      	ldr	r2, [pc, #436]	; (800547c <HAL_DMA_Abort+0x22c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d02c      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a6b      	ldr	r2, [pc, #428]	; (8005480 <HAL_DMA_Abort+0x230>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d027      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6a      	ldr	r2, [pc, #424]	; (8005484 <HAL_DMA_Abort+0x234>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a68      	ldr	r2, [pc, #416]	; (8005488 <HAL_DMA_Abort+0x238>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01d      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a67      	ldr	r2, [pc, #412]	; (800548c <HAL_DMA_Abort+0x23c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a65      	ldr	r2, [pc, #404]	; (8005490 <HAL_DMA_Abort+0x240>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a64      	ldr	r2, [pc, #400]	; (8005494 <HAL_DMA_Abort+0x244>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a62      	ldr	r2, [pc, #392]	; (8005498 <HAL_DMA_Abort+0x248>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a61      	ldr	r2, [pc, #388]	; (800549c <HAL_DMA_Abort+0x24c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a5f      	ldr	r2, [pc, #380]	; (80054a0 <HAL_DMA_Abort+0x250>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_DMA_Abort+0xda>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_DMA_Abort+0xdc>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 021e 	bic.w	r2, r2, #30
 800533e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800534e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e00a      	b.n	800536e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 020e 	bic.w	r2, r2, #14
 8005366:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3c      	ldr	r2, [pc, #240]	; (8005464 <HAL_DMA_Abort+0x214>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d072      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a3a      	ldr	r2, [pc, #232]	; (8005468 <HAL_DMA_Abort+0x218>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d06d      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a39      	ldr	r2, [pc, #228]	; (800546c <HAL_DMA_Abort+0x21c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d068      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a37      	ldr	r2, [pc, #220]	; (8005470 <HAL_DMA_Abort+0x220>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d063      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a36      	ldr	r2, [pc, #216]	; (8005474 <HAL_DMA_Abort+0x224>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d05e      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a34      	ldr	r2, [pc, #208]	; (8005478 <HAL_DMA_Abort+0x228>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d059      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a33      	ldr	r2, [pc, #204]	; (800547c <HAL_DMA_Abort+0x22c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d054      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a31      	ldr	r2, [pc, #196]	; (8005480 <HAL_DMA_Abort+0x230>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d04f      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a30      	ldr	r2, [pc, #192]	; (8005484 <HAL_DMA_Abort+0x234>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d04a      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2e      	ldr	r2, [pc, #184]	; (8005488 <HAL_DMA_Abort+0x238>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d045      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2d      	ldr	r2, [pc, #180]	; (800548c <HAL_DMA_Abort+0x23c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d040      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2b      	ldr	r2, [pc, #172]	; (8005490 <HAL_DMA_Abort+0x240>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d03b      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2a      	ldr	r2, [pc, #168]	; (8005494 <HAL_DMA_Abort+0x244>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d036      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a28      	ldr	r2, [pc, #160]	; (8005498 <HAL_DMA_Abort+0x248>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d031      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a27      	ldr	r2, [pc, #156]	; (800549c <HAL_DMA_Abort+0x24c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d02c      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <HAL_DMA_Abort+0x250>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d027      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <HAL_DMA_Abort+0x254>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d022      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <HAL_DMA_Abort+0x258>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01d      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a21      	ldr	r2, [pc, #132]	; (80054ac <HAL_DMA_Abort+0x25c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d018      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HAL_DMA_Abort+0x260>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_DMA_Abort+0x264>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00e      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <HAL_DMA_Abort+0x268>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d009      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <HAL_DMA_Abort+0x26c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d004      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <HAL_DMA_Abort+0x270>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d132      	bne.n	80054c4 <HAL_DMA_Abort+0x274>
 800545e:	2301      	movs	r3, #1
 8005460:	e031      	b.n	80054c6 <HAL_DMA_Abort+0x276>
 8005462:	bf00      	nop
 8005464:	40020010 	.word	0x40020010
 8005468:	40020028 	.word	0x40020028
 800546c:	40020040 	.word	0x40020040
 8005470:	40020058 	.word	0x40020058
 8005474:	40020070 	.word	0x40020070
 8005478:	40020088 	.word	0x40020088
 800547c:	400200a0 	.word	0x400200a0
 8005480:	400200b8 	.word	0x400200b8
 8005484:	40020410 	.word	0x40020410
 8005488:	40020428 	.word	0x40020428
 800548c:	40020440 	.word	0x40020440
 8005490:	40020458 	.word	0x40020458
 8005494:	40020470 	.word	0x40020470
 8005498:	40020488 	.word	0x40020488
 800549c:	400204a0 	.word	0x400204a0
 80054a0:	400204b8 	.word	0x400204b8
 80054a4:	58025408 	.word	0x58025408
 80054a8:	5802541c 	.word	0x5802541c
 80054ac:	58025430 	.word	0x58025430
 80054b0:	58025444 	.word	0x58025444
 80054b4:	58025458 	.word	0x58025458
 80054b8:	5802546c 	.word	0x5802546c
 80054bc:	58025480 	.word	0x58025480
 80054c0:	58025494 	.word	0x58025494
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6d      	ldr	r2, [pc, #436]	; (8005694 <HAL_DMA_Abort+0x444>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d04a      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6b      	ldr	r2, [pc, #428]	; (8005698 <HAL_DMA_Abort+0x448>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d045      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6a      	ldr	r2, [pc, #424]	; (800569c <HAL_DMA_Abort+0x44c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d040      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a68      	ldr	r2, [pc, #416]	; (80056a0 <HAL_DMA_Abort+0x450>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d03b      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a67      	ldr	r2, [pc, #412]	; (80056a4 <HAL_DMA_Abort+0x454>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d036      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a65      	ldr	r2, [pc, #404]	; (80056a8 <HAL_DMA_Abort+0x458>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d031      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a64      	ldr	r2, [pc, #400]	; (80056ac <HAL_DMA_Abort+0x45c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d02c      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a62      	ldr	r2, [pc, #392]	; (80056b0 <HAL_DMA_Abort+0x460>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d027      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a61      	ldr	r2, [pc, #388]	; (80056b4 <HAL_DMA_Abort+0x464>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d022      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5f      	ldr	r2, [pc, #380]	; (80056b8 <HAL_DMA_Abort+0x468>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01d      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a5e      	ldr	r2, [pc, #376]	; (80056bc <HAL_DMA_Abort+0x46c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d018      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5c      	ldr	r2, [pc, #368]	; (80056c0 <HAL_DMA_Abort+0x470>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a5b      	ldr	r2, [pc, #364]	; (80056c4 <HAL_DMA_Abort+0x474>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a59      	ldr	r2, [pc, #356]	; (80056c8 <HAL_DMA_Abort+0x478>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a58      	ldr	r2, [pc, #352]	; (80056cc <HAL_DMA_Abort+0x47c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a56      	ldr	r2, [pc, #344]	; (80056d0 <HAL_DMA_Abort+0x480>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <HAL_DMA_Abort+0x33c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0201 	bic.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e007      	b.n	800559c <HAL_DMA_Abort+0x34c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800559c:	e013      	b.n	80055c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800559e:	f7fd fa9d 	bl	8002adc <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	d90c      	bls.n	80055c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2203      	movs	r2, #3
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e12d      	b.n	8005822 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <HAL_DMA_Abort+0x444>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_DMA_Abort+0x448>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <HAL_DMA_Abort+0x44c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <HAL_DMA_Abort+0x450>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <HAL_DMA_Abort+0x454>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <HAL_DMA_Abort+0x458>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a26      	ldr	r2, [pc, #152]	; (80056ac <HAL_DMA_Abort+0x45c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a24      	ldr	r2, [pc, #144]	; (80056b0 <HAL_DMA_Abort+0x460>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a23      	ldr	r2, [pc, #140]	; (80056b4 <HAL_DMA_Abort+0x464>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <HAL_DMA_Abort+0x468>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a20      	ldr	r2, [pc, #128]	; (80056bc <HAL_DMA_Abort+0x46c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_DMA_Abort+0x470>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1d      	ldr	r2, [pc, #116]	; (80056c4 <HAL_DMA_Abort+0x474>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <HAL_DMA_Abort+0x478>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <HAL_DMA_Abort+0x47c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <HAL_DMA_Abort+0x480>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d101      	bne.n	8005676 <HAL_DMA_Abort+0x426>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_DMA_Abort+0x428>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02b      	beq.n	80056d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	223f      	movs	r2, #63	; 0x3f
 800568c:	409a      	lsls	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	609a      	str	r2, [r3, #8]
 8005692:	e02a      	b.n	80056ea <HAL_DMA_Abort+0x49a>
 8005694:	40020010 	.word	0x40020010
 8005698:	40020028 	.word	0x40020028
 800569c:	40020040 	.word	0x40020040
 80056a0:	40020058 	.word	0x40020058
 80056a4:	40020070 	.word	0x40020070
 80056a8:	40020088 	.word	0x40020088
 80056ac:	400200a0 	.word	0x400200a0
 80056b0:	400200b8 	.word	0x400200b8
 80056b4:	40020410 	.word	0x40020410
 80056b8:	40020428 	.word	0x40020428
 80056bc:	40020440 	.word	0x40020440
 80056c0:	40020458 	.word	0x40020458
 80056c4:	40020470 	.word	0x40020470
 80056c8:	40020488 	.word	0x40020488
 80056cc:	400204a0 	.word	0x400204a0
 80056d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	2201      	movs	r2, #1
 80056e4:	409a      	lsls	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4f      	ldr	r2, [pc, #316]	; (800582c <HAL_DMA_Abort+0x5dc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d072      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a4d      	ldr	r2, [pc, #308]	; (8005830 <HAL_DMA_Abort+0x5e0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d06d      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4c      	ldr	r2, [pc, #304]	; (8005834 <HAL_DMA_Abort+0x5e4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d068      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4a      	ldr	r2, [pc, #296]	; (8005838 <HAL_DMA_Abort+0x5e8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d063      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a49      	ldr	r2, [pc, #292]	; (800583c <HAL_DMA_Abort+0x5ec>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d05e      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a47      	ldr	r2, [pc, #284]	; (8005840 <HAL_DMA_Abort+0x5f0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d059      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <HAL_DMA_Abort+0x5f4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d054      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a44      	ldr	r2, [pc, #272]	; (8005848 <HAL_DMA_Abort+0x5f8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d04f      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a43      	ldr	r2, [pc, #268]	; (800584c <HAL_DMA_Abort+0x5fc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d04a      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a41      	ldr	r2, [pc, #260]	; (8005850 <HAL_DMA_Abort+0x600>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d045      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a40      	ldr	r2, [pc, #256]	; (8005854 <HAL_DMA_Abort+0x604>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d040      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a3e      	ldr	r2, [pc, #248]	; (8005858 <HAL_DMA_Abort+0x608>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03b      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a3d      	ldr	r2, [pc, #244]	; (800585c <HAL_DMA_Abort+0x60c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d036      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a3b      	ldr	r2, [pc, #236]	; (8005860 <HAL_DMA_Abort+0x610>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d031      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a3a      	ldr	r2, [pc, #232]	; (8005864 <HAL_DMA_Abort+0x614>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d02c      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a38      	ldr	r2, [pc, #224]	; (8005868 <HAL_DMA_Abort+0x618>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d027      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a37      	ldr	r2, [pc, #220]	; (800586c <HAL_DMA_Abort+0x61c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a35      	ldr	r2, [pc, #212]	; (8005870 <HAL_DMA_Abort+0x620>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a34      	ldr	r2, [pc, #208]	; (8005874 <HAL_DMA_Abort+0x624>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a32      	ldr	r2, [pc, #200]	; (8005878 <HAL_DMA_Abort+0x628>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a31      	ldr	r2, [pc, #196]	; (800587c <HAL_DMA_Abort+0x62c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <HAL_DMA_Abort+0x630>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <HAL_DMA_Abort+0x634>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2c      	ldr	r2, [pc, #176]	; (8005888 <HAL_DMA_Abort+0x638>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d101      	bne.n	80057de <HAL_DMA_Abort+0x58e>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <HAL_DMA_Abort+0x590>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d015      	beq.n	8005810 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005804:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800580e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40020010 	.word	0x40020010
 8005830:	40020028 	.word	0x40020028
 8005834:	40020040 	.word	0x40020040
 8005838:	40020058 	.word	0x40020058
 800583c:	40020070 	.word	0x40020070
 8005840:	40020088 	.word	0x40020088
 8005844:	400200a0 	.word	0x400200a0
 8005848:	400200b8 	.word	0x400200b8
 800584c:	40020410 	.word	0x40020410
 8005850:	40020428 	.word	0x40020428
 8005854:	40020440 	.word	0x40020440
 8005858:	40020458 	.word	0x40020458
 800585c:	40020470 	.word	0x40020470
 8005860:	40020488 	.word	0x40020488
 8005864:	400204a0 	.word	0x400204a0
 8005868:	400204b8 	.word	0x400204b8
 800586c:	58025408 	.word	0x58025408
 8005870:	5802541c 	.word	0x5802541c
 8005874:	58025430 	.word	0x58025430
 8005878:	58025444 	.word	0x58025444
 800587c:	58025458 	.word	0x58025458
 8005880:	5802546c 	.word	0x5802546c
 8005884:	58025480 	.word	0x58025480
 8005888:	58025494 	.word	0x58025494

0800588c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e237      	b.n	8005d0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d004      	beq.n	80058b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e22c      	b.n	8005d0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a5c      	ldr	r2, [pc, #368]	; (8005a2c <HAL_DMA_Abort_IT+0x1a0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d04a      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a5b      	ldr	r2, [pc, #364]	; (8005a30 <HAL_DMA_Abort_IT+0x1a4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d045      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a59      	ldr	r2, [pc, #356]	; (8005a34 <HAL_DMA_Abort_IT+0x1a8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d040      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a58      	ldr	r2, [pc, #352]	; (8005a38 <HAL_DMA_Abort_IT+0x1ac>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d03b      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a56      	ldr	r2, [pc, #344]	; (8005a3c <HAL_DMA_Abort_IT+0x1b0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d036      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a55      	ldr	r2, [pc, #340]	; (8005a40 <HAL_DMA_Abort_IT+0x1b4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d031      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a53      	ldr	r2, [pc, #332]	; (8005a44 <HAL_DMA_Abort_IT+0x1b8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d02c      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a52      	ldr	r2, [pc, #328]	; (8005a48 <HAL_DMA_Abort_IT+0x1bc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d027      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a50      	ldr	r2, [pc, #320]	; (8005a4c <HAL_DMA_Abort_IT+0x1c0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d022      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a4f      	ldr	r2, [pc, #316]	; (8005a50 <HAL_DMA_Abort_IT+0x1c4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d01d      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a4d      	ldr	r2, [pc, #308]	; (8005a54 <HAL_DMA_Abort_IT+0x1c8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d018      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a4c      	ldr	r2, [pc, #304]	; (8005a58 <HAL_DMA_Abort_IT+0x1cc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a4a      	ldr	r2, [pc, #296]	; (8005a5c <HAL_DMA_Abort_IT+0x1d0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00e      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a49      	ldr	r2, [pc, #292]	; (8005a60 <HAL_DMA_Abort_IT+0x1d4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a47      	ldr	r2, [pc, #284]	; (8005a64 <HAL_DMA_Abort_IT+0x1d8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d004      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a46      	ldr	r2, [pc, #280]	; (8005a68 <HAL_DMA_Abort_IT+0x1dc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d101      	bne.n	8005958 <HAL_DMA_Abort_IT+0xcc>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <HAL_DMA_Abort_IT+0xce>
 8005958:	2300      	movs	r3, #0
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8086 	beq.w	8005a6c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2204      	movs	r2, #4
 8005964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a2f      	ldr	r2, [pc, #188]	; (8005a2c <HAL_DMA_Abort_IT+0x1a0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d04a      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2e      	ldr	r2, [pc, #184]	; (8005a30 <HAL_DMA_Abort_IT+0x1a4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d045      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2c      	ldr	r2, [pc, #176]	; (8005a34 <HAL_DMA_Abort_IT+0x1a8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d040      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2b      	ldr	r2, [pc, #172]	; (8005a38 <HAL_DMA_Abort_IT+0x1ac>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d03b      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <HAL_DMA_Abort_IT+0x1b0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d036      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <HAL_DMA_Abort_IT+0x1b4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d031      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <HAL_DMA_Abort_IT+0x1b8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d02c      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a25      	ldr	r2, [pc, #148]	; (8005a48 <HAL_DMA_Abort_IT+0x1bc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d027      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <HAL_DMA_Abort_IT+0x1c0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <HAL_DMA_Abort_IT+0x1c4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <HAL_DMA_Abort_IT+0x1c8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <HAL_DMA_Abort_IT+0x1cc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1d      	ldr	r2, [pc, #116]	; (8005a5c <HAL_DMA_Abort_IT+0x1d0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <HAL_DMA_Abort_IT+0x1d4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <HAL_DMA_Abort_IT+0x1d8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_DMA_Abort_IT+0x17c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <HAL_DMA_Abort_IT+0x1dc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d108      	bne.n	8005a1a <HAL_DMA_Abort_IT+0x18e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	e178      	b.n	8005d0c <HAL_DMA_Abort_IT+0x480>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e16f      	b.n	8005d0c <HAL_DMA_Abort_IT+0x480>
 8005a2c:	40020010 	.word	0x40020010
 8005a30:	40020028 	.word	0x40020028
 8005a34:	40020040 	.word	0x40020040
 8005a38:	40020058 	.word	0x40020058
 8005a3c:	40020070 	.word	0x40020070
 8005a40:	40020088 	.word	0x40020088
 8005a44:	400200a0 	.word	0x400200a0
 8005a48:	400200b8 	.word	0x400200b8
 8005a4c:	40020410 	.word	0x40020410
 8005a50:	40020428 	.word	0x40020428
 8005a54:	40020440 	.word	0x40020440
 8005a58:	40020458 	.word	0x40020458
 8005a5c:	40020470 	.word	0x40020470
 8005a60:	40020488 	.word	0x40020488
 8005a64:	400204a0 	.word	0x400204a0
 8005a68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 020e 	bic.w	r2, r2, #14
 8005a7a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a6c      	ldr	r2, [pc, #432]	; (8005c34 <HAL_DMA_Abort_IT+0x3a8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d04a      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a6b      	ldr	r2, [pc, #428]	; (8005c38 <HAL_DMA_Abort_IT+0x3ac>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d045      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a69      	ldr	r2, [pc, #420]	; (8005c3c <HAL_DMA_Abort_IT+0x3b0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d040      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a68      	ldr	r2, [pc, #416]	; (8005c40 <HAL_DMA_Abort_IT+0x3b4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d03b      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a66      	ldr	r2, [pc, #408]	; (8005c44 <HAL_DMA_Abort_IT+0x3b8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d036      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a65      	ldr	r2, [pc, #404]	; (8005c48 <HAL_DMA_Abort_IT+0x3bc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d031      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a63      	ldr	r2, [pc, #396]	; (8005c4c <HAL_DMA_Abort_IT+0x3c0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d02c      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a62      	ldr	r2, [pc, #392]	; (8005c50 <HAL_DMA_Abort_IT+0x3c4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d027      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a60      	ldr	r2, [pc, #384]	; (8005c54 <HAL_DMA_Abort_IT+0x3c8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d022      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a5f      	ldr	r2, [pc, #380]	; (8005c58 <HAL_DMA_Abort_IT+0x3cc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d01d      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a5d      	ldr	r2, [pc, #372]	; (8005c5c <HAL_DMA_Abort_IT+0x3d0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a5c      	ldr	r2, [pc, #368]	; (8005c60 <HAL_DMA_Abort_IT+0x3d4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a5a      	ldr	r2, [pc, #360]	; (8005c64 <HAL_DMA_Abort_IT+0x3d8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a59      	ldr	r2, [pc, #356]	; (8005c68 <HAL_DMA_Abort_IT+0x3dc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a57      	ldr	r2, [pc, #348]	; (8005c6c <HAL_DMA_Abort_IT+0x3e0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x290>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a56      	ldr	r2, [pc, #344]	; (8005c70 <HAL_DMA_Abort_IT+0x3e4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d108      	bne.n	8005b2e <HAL_DMA_Abort_IT+0x2a2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	e007      	b.n	8005b3e <HAL_DMA_Abort_IT+0x2b2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a3c      	ldr	r2, [pc, #240]	; (8005c34 <HAL_DMA_Abort_IT+0x3a8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d072      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3a      	ldr	r2, [pc, #232]	; (8005c38 <HAL_DMA_Abort_IT+0x3ac>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d06d      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a39      	ldr	r2, [pc, #228]	; (8005c3c <HAL_DMA_Abort_IT+0x3b0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d068      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a37      	ldr	r2, [pc, #220]	; (8005c40 <HAL_DMA_Abort_IT+0x3b4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d063      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a36      	ldr	r2, [pc, #216]	; (8005c44 <HAL_DMA_Abort_IT+0x3b8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d05e      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a34      	ldr	r2, [pc, #208]	; (8005c48 <HAL_DMA_Abort_IT+0x3bc>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d059      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a33      	ldr	r2, [pc, #204]	; (8005c4c <HAL_DMA_Abort_IT+0x3c0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d054      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a31      	ldr	r2, [pc, #196]	; (8005c50 <HAL_DMA_Abort_IT+0x3c4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d04f      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a30      	ldr	r2, [pc, #192]	; (8005c54 <HAL_DMA_Abort_IT+0x3c8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d04a      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a2e      	ldr	r2, [pc, #184]	; (8005c58 <HAL_DMA_Abort_IT+0x3cc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d045      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a2d      	ldr	r2, [pc, #180]	; (8005c5c <HAL_DMA_Abort_IT+0x3d0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d040      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a2b      	ldr	r2, [pc, #172]	; (8005c60 <HAL_DMA_Abort_IT+0x3d4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d03b      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a2a      	ldr	r2, [pc, #168]	; (8005c64 <HAL_DMA_Abort_IT+0x3d8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d036      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a28      	ldr	r2, [pc, #160]	; (8005c68 <HAL_DMA_Abort_IT+0x3dc>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d031      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <HAL_DMA_Abort_IT+0x3e0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d02c      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <HAL_DMA_Abort_IT+0x3e4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d027      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a24      	ldr	r2, [pc, #144]	; (8005c74 <HAL_DMA_Abort_IT+0x3e8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d022      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a22      	ldr	r2, [pc, #136]	; (8005c78 <HAL_DMA_Abort_IT+0x3ec>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01d      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <HAL_DMA_Abort_IT+0x3f0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d018      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <HAL_DMA_Abort_IT+0x3f4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <HAL_DMA_Abort_IT+0x3f8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00e      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <HAL_DMA_Abort_IT+0x3fc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d009      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <HAL_DMA_Abort_IT+0x400>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x3a2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a19      	ldr	r2, [pc, #100]	; (8005c90 <HAL_DMA_Abort_IT+0x404>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d132      	bne.n	8005c94 <HAL_DMA_Abort_IT+0x408>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e031      	b.n	8005c96 <HAL_DMA_Abort_IT+0x40a>
 8005c32:	bf00      	nop
 8005c34:	40020010 	.word	0x40020010
 8005c38:	40020028 	.word	0x40020028
 8005c3c:	40020040 	.word	0x40020040
 8005c40:	40020058 	.word	0x40020058
 8005c44:	40020070 	.word	0x40020070
 8005c48:	40020088 	.word	0x40020088
 8005c4c:	400200a0 	.word	0x400200a0
 8005c50:	400200b8 	.word	0x400200b8
 8005c54:	40020410 	.word	0x40020410
 8005c58:	40020428 	.word	0x40020428
 8005c5c:	40020440 	.word	0x40020440
 8005c60:	40020458 	.word	0x40020458
 8005c64:	40020470 	.word	0x40020470
 8005c68:	40020488 	.word	0x40020488
 8005c6c:	400204a0 	.word	0x400204a0
 8005c70:	400204b8 	.word	0x400204b8
 8005c74:	58025408 	.word	0x58025408
 8005c78:	5802541c 	.word	0x5802541c
 8005c7c:	58025430 	.word	0x58025430
 8005c80:	58025444 	.word	0x58025444
 8005c84:	58025458 	.word	0x58025458
 8005c88:	5802546c 	.word	0x5802546c
 8005c8c:	58025480 	.word	0x58025480
 8005c90:	58025494 	.word	0x58025494
 8005c94:	2300      	movs	r3, #0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d028      	beq.n	8005cec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ca8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	2201      	movs	r2, #1
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005cc8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00c      	beq.n	8005cec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop

08005d18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	; 0x28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d24:	4b67      	ldr	r3, [pc, #412]	; (8005ec4 <HAL_DMA_IRQHandler+0x1ac>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a67      	ldr	r2, [pc, #412]	; (8005ec8 <HAL_DMA_IRQHandler+0x1b0>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	0a9b      	lsrs	r3, r3, #10
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a5f      	ldr	r2, [pc, #380]	; (8005ecc <HAL_DMA_IRQHandler+0x1b4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d04a      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5d      	ldr	r2, [pc, #372]	; (8005ed0 <HAL_DMA_IRQHandler+0x1b8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d045      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5c      	ldr	r2, [pc, #368]	; (8005ed4 <HAL_DMA_IRQHandler+0x1bc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d040      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a5a      	ldr	r2, [pc, #360]	; (8005ed8 <HAL_DMA_IRQHandler+0x1c0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d03b      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a59      	ldr	r2, [pc, #356]	; (8005edc <HAL_DMA_IRQHandler+0x1c4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d036      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a57      	ldr	r2, [pc, #348]	; (8005ee0 <HAL_DMA_IRQHandler+0x1c8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d031      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a56      	ldr	r2, [pc, #344]	; (8005ee4 <HAL_DMA_IRQHandler+0x1cc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d02c      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a54      	ldr	r2, [pc, #336]	; (8005ee8 <HAL_DMA_IRQHandler+0x1d0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d027      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a53      	ldr	r2, [pc, #332]	; (8005eec <HAL_DMA_IRQHandler+0x1d4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d022      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a51      	ldr	r2, [pc, #324]	; (8005ef0 <HAL_DMA_IRQHandler+0x1d8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01d      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a50      	ldr	r2, [pc, #320]	; (8005ef4 <HAL_DMA_IRQHandler+0x1dc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d018      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a4e      	ldr	r2, [pc, #312]	; (8005ef8 <HAL_DMA_IRQHandler+0x1e0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a4d      	ldr	r2, [pc, #308]	; (8005efc <HAL_DMA_IRQHandler+0x1e4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00e      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a4b      	ldr	r2, [pc, #300]	; (8005f00 <HAL_DMA_IRQHandler+0x1e8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4a      	ldr	r2, [pc, #296]	; (8005f04 <HAL_DMA_IRQHandler+0x1ec>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <HAL_DMA_IRQHandler+0xd2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a48      	ldr	r2, [pc, #288]	; (8005f08 <HAL_DMA_IRQHandler+0x1f0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d101      	bne.n	8005dee <HAL_DMA_IRQHandler+0xd6>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <HAL_DMA_IRQHandler+0xd8>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 842b 	beq.w	800664c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2208      	movs	r2, #8
 8005e00:	409a      	lsls	r2, r3
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80a2 	beq.w	8005f50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2e      	ldr	r2, [pc, #184]	; (8005ecc <HAL_DMA_IRQHandler+0x1b4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d04a      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2d      	ldr	r2, [pc, #180]	; (8005ed0 <HAL_DMA_IRQHandler+0x1b8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d045      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a2b      	ldr	r2, [pc, #172]	; (8005ed4 <HAL_DMA_IRQHandler+0x1bc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d040      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a2a      	ldr	r2, [pc, #168]	; (8005ed8 <HAL_DMA_IRQHandler+0x1c0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d03b      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a28      	ldr	r2, [pc, #160]	; (8005edc <HAL_DMA_IRQHandler+0x1c4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d036      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a27      	ldr	r2, [pc, #156]	; (8005ee0 <HAL_DMA_IRQHandler+0x1c8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d031      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a25      	ldr	r2, [pc, #148]	; (8005ee4 <HAL_DMA_IRQHandler+0x1cc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d02c      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a24      	ldr	r2, [pc, #144]	; (8005ee8 <HAL_DMA_IRQHandler+0x1d0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d027      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a22      	ldr	r2, [pc, #136]	; (8005eec <HAL_DMA_IRQHandler+0x1d4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d022      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <HAL_DMA_IRQHandler+0x1d8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d01d      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <HAL_DMA_IRQHandler+0x1dc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d018      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <HAL_DMA_IRQHandler+0x1e0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <HAL_DMA_IRQHandler+0x1e4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <HAL_DMA_IRQHandler+0x1e8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <HAL_DMA_IRQHandler+0x1ec>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_DMA_IRQHandler+0x194>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <HAL_DMA_IRQHandler+0x1f0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d12f      	bne.n	8005f0c <HAL_DMA_IRQHandler+0x1f4>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bf14      	ite	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	2300      	moveq	r3, #0
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	e02e      	b.n	8005f20 <HAL_DMA_IRQHandler+0x208>
 8005ec2:	bf00      	nop
 8005ec4:	24000000 	.word	0x24000000
 8005ec8:	1b4e81b5 	.word	0x1b4e81b5
 8005ecc:	40020010 	.word	0x40020010
 8005ed0:	40020028 	.word	0x40020028
 8005ed4:	40020040 	.word	0x40020040
 8005ed8:	40020058 	.word	0x40020058
 8005edc:	40020070 	.word	0x40020070
 8005ee0:	40020088 	.word	0x40020088
 8005ee4:	400200a0 	.word	0x400200a0
 8005ee8:	400200b8 	.word	0x400200b8
 8005eec:	40020410 	.word	0x40020410
 8005ef0:	40020428 	.word	0x40020428
 8005ef4:	40020440 	.word	0x40020440
 8005ef8:	40020458 	.word	0x40020458
 8005efc:	40020470 	.word	0x40020470
 8005f00:	40020488 	.word	0x40020488
 8005f04:	400204a0 	.word	0x400204a0
 8005f08:	400204b8 	.word	0x400204b8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bf14      	ite	ne
 8005f1a:	2301      	movne	r3, #1
 8005f1c:	2300      	moveq	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d015      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0204 	bic.w	r2, r2, #4
 8005f32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f48:	f043 0201 	orr.w	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d06e      	beq.n	8006044 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a69      	ldr	r2, [pc, #420]	; (8006110 <HAL_DMA_IRQHandler+0x3f8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d04a      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a67      	ldr	r2, [pc, #412]	; (8006114 <HAL_DMA_IRQHandler+0x3fc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d045      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a66      	ldr	r2, [pc, #408]	; (8006118 <HAL_DMA_IRQHandler+0x400>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d040      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a64      	ldr	r2, [pc, #400]	; (800611c <HAL_DMA_IRQHandler+0x404>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d03b      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a63      	ldr	r2, [pc, #396]	; (8006120 <HAL_DMA_IRQHandler+0x408>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d036      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a61      	ldr	r2, [pc, #388]	; (8006124 <HAL_DMA_IRQHandler+0x40c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d031      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a60      	ldr	r2, [pc, #384]	; (8006128 <HAL_DMA_IRQHandler+0x410>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d02c      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a5e      	ldr	r2, [pc, #376]	; (800612c <HAL_DMA_IRQHandler+0x414>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d027      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a5d      	ldr	r2, [pc, #372]	; (8006130 <HAL_DMA_IRQHandler+0x418>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d022      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a5b      	ldr	r2, [pc, #364]	; (8006134 <HAL_DMA_IRQHandler+0x41c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01d      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a5a      	ldr	r2, [pc, #360]	; (8006138 <HAL_DMA_IRQHandler+0x420>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d018      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a58      	ldr	r2, [pc, #352]	; (800613c <HAL_DMA_IRQHandler+0x424>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a57      	ldr	r2, [pc, #348]	; (8006140 <HAL_DMA_IRQHandler+0x428>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00e      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a55      	ldr	r2, [pc, #340]	; (8006144 <HAL_DMA_IRQHandler+0x42c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a54      	ldr	r2, [pc, #336]	; (8006148 <HAL_DMA_IRQHandler+0x430>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d004      	beq.n	8006006 <HAL_DMA_IRQHandler+0x2ee>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a52      	ldr	r2, [pc, #328]	; (800614c <HAL_DMA_IRQHandler+0x434>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d10a      	bne.n	800601c <HAL_DMA_IRQHandler+0x304>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	e003      	b.n	8006024 <HAL_DMA_IRQHandler+0x30c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2201      	movs	r2, #1
 8006032:	409a      	lsls	r2, r3
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f043 0202 	orr.w	r2, r3, #2
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	2204      	movs	r2, #4
 800604e:	409a      	lsls	r2, r3
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 808f 	beq.w	8006178 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <HAL_DMA_IRQHandler+0x3f8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04a      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <HAL_DMA_IRQHandler+0x3fc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d045      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a29      	ldr	r2, [pc, #164]	; (8006118 <HAL_DMA_IRQHandler+0x400>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <HAL_DMA_IRQHandler+0x404>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d03b      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a26      	ldr	r2, [pc, #152]	; (8006120 <HAL_DMA_IRQHandler+0x408>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d036      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a24      	ldr	r2, [pc, #144]	; (8006124 <HAL_DMA_IRQHandler+0x40c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a23      	ldr	r2, [pc, #140]	; (8006128 <HAL_DMA_IRQHandler+0x410>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d02c      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a21      	ldr	r2, [pc, #132]	; (800612c <HAL_DMA_IRQHandler+0x414>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d027      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a20      	ldr	r2, [pc, #128]	; (8006130 <HAL_DMA_IRQHandler+0x418>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d022      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1e      	ldr	r2, [pc, #120]	; (8006134 <HAL_DMA_IRQHandler+0x41c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01d      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1d      	ldr	r2, [pc, #116]	; (8006138 <HAL_DMA_IRQHandler+0x420>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1b      	ldr	r2, [pc, #108]	; (800613c <HAL_DMA_IRQHandler+0x424>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1a      	ldr	r2, [pc, #104]	; (8006140 <HAL_DMA_IRQHandler+0x428>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a18      	ldr	r2, [pc, #96]	; (8006144 <HAL_DMA_IRQHandler+0x42c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a17      	ldr	r2, [pc, #92]	; (8006148 <HAL_DMA_IRQHandler+0x430>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3e2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a15      	ldr	r2, [pc, #84]	; (800614c <HAL_DMA_IRQHandler+0x434>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d12a      	bne.n	8006150 <HAL_DMA_IRQHandler+0x438>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	e023      	b.n	8006158 <HAL_DMA_IRQHandler+0x440>
 8006110:	40020010 	.word	0x40020010
 8006114:	40020028 	.word	0x40020028
 8006118:	40020040 	.word	0x40020040
 800611c:	40020058 	.word	0x40020058
 8006120:	40020070 	.word	0x40020070
 8006124:	40020088 	.word	0x40020088
 8006128:	400200a0 	.word	0x400200a0
 800612c:	400200b8 	.word	0x400200b8
 8006130:	40020410 	.word	0x40020410
 8006134:	40020428 	.word	0x40020428
 8006138:	40020440 	.word	0x40020440
 800613c:	40020458 	.word	0x40020458
 8006140:	40020470 	.word	0x40020470
 8006144:	40020488 	.word	0x40020488
 8006148:	400204a0 	.word	0x400204a0
 800614c:	400204b8 	.word	0x400204b8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00d      	beq.n	8006178 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	2204      	movs	r2, #4
 8006166:	409a      	lsls	r2, r3
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	f043 0204 	orr.w	r2, r3, #4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	2210      	movs	r2, #16
 8006182:	409a      	lsls	r2, r3
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80a6 	beq.w	80062da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a85      	ldr	r2, [pc, #532]	; (80063a8 <HAL_DMA_IRQHandler+0x690>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d04a      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a83      	ldr	r2, [pc, #524]	; (80063ac <HAL_DMA_IRQHandler+0x694>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d045      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a82      	ldr	r2, [pc, #520]	; (80063b0 <HAL_DMA_IRQHandler+0x698>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d040      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a80      	ldr	r2, [pc, #512]	; (80063b4 <HAL_DMA_IRQHandler+0x69c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d03b      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a7f      	ldr	r2, [pc, #508]	; (80063b8 <HAL_DMA_IRQHandler+0x6a0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d036      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a7d      	ldr	r2, [pc, #500]	; (80063bc <HAL_DMA_IRQHandler+0x6a4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d031      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a7c      	ldr	r2, [pc, #496]	; (80063c0 <HAL_DMA_IRQHandler+0x6a8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d02c      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a7a      	ldr	r2, [pc, #488]	; (80063c4 <HAL_DMA_IRQHandler+0x6ac>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d027      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a79      	ldr	r2, [pc, #484]	; (80063c8 <HAL_DMA_IRQHandler+0x6b0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d022      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a77      	ldr	r2, [pc, #476]	; (80063cc <HAL_DMA_IRQHandler+0x6b4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01d      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a76      	ldr	r2, [pc, #472]	; (80063d0 <HAL_DMA_IRQHandler+0x6b8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d018      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a74      	ldr	r2, [pc, #464]	; (80063d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a73      	ldr	r2, [pc, #460]	; (80063d8 <HAL_DMA_IRQHandler+0x6c0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00e      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a71      	ldr	r2, [pc, #452]	; (80063dc <HAL_DMA_IRQHandler+0x6c4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d009      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a70      	ldr	r2, [pc, #448]	; (80063e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d004      	beq.n	800622e <HAL_DMA_IRQHandler+0x516>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a6e      	ldr	r2, [pc, #440]	; (80063e4 <HAL_DMA_IRQHandler+0x6cc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10a      	bne.n	8006244 <HAL_DMA_IRQHandler+0x52c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	e009      	b.n	8006258 <HAL_DMA_IRQHandler+0x540>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0304 	and.w	r3, r3, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	bf14      	ite	ne
 8006252:	2301      	movne	r3, #1
 8006254:	2300      	moveq	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d03e      	beq.n	80062da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2210      	movs	r2, #16
 8006266:	409a      	lsls	r2, r3
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d018      	beq.n	80062ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d108      	bne.n	800629a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d024      	beq.n	80062da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
 8006298:	e01f      	b.n	80062da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01b      	beq.n	80062da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
 80062aa:	e016      	b.n	80062da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d107      	bne.n	80062ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0208 	bic.w	r2, r2, #8
 80062c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2220      	movs	r2, #32
 80062e4:	409a      	lsls	r2, r3
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8110 	beq.w	8006510 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a2c      	ldr	r2, [pc, #176]	; (80063a8 <HAL_DMA_IRQHandler+0x690>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d04a      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a2b      	ldr	r2, [pc, #172]	; (80063ac <HAL_DMA_IRQHandler+0x694>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d045      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <HAL_DMA_IRQHandler+0x698>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d040      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <HAL_DMA_IRQHandler+0x69c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d03b      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <HAL_DMA_IRQHandler+0x6a0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d036      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a25      	ldr	r2, [pc, #148]	; (80063bc <HAL_DMA_IRQHandler+0x6a4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d031      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a23      	ldr	r2, [pc, #140]	; (80063c0 <HAL_DMA_IRQHandler+0x6a8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d02c      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <HAL_DMA_IRQHandler+0x6ac>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d027      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a20      	ldr	r2, [pc, #128]	; (80063c8 <HAL_DMA_IRQHandler+0x6b0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d022      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <HAL_DMA_IRQHandler+0x6b4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d01d      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <HAL_DMA_IRQHandler+0x6b8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d018      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a1c      	ldr	r2, [pc, #112]	; (80063d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d013      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1a      	ldr	r2, [pc, #104]	; (80063d8 <HAL_DMA_IRQHandler+0x6c0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00e      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a19      	ldr	r2, [pc, #100]	; (80063dc <HAL_DMA_IRQHandler+0x6c4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d009      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a17      	ldr	r2, [pc, #92]	; (80063e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <HAL_DMA_IRQHandler+0x678>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a16      	ldr	r2, [pc, #88]	; (80063e4 <HAL_DMA_IRQHandler+0x6cc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d12b      	bne.n	80063e8 <HAL_DMA_IRQHandler+0x6d0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0310 	and.w	r3, r3, #16
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	e02a      	b.n	80063fc <HAL_DMA_IRQHandler+0x6e4>
 80063a6:	bf00      	nop
 80063a8:	40020010 	.word	0x40020010
 80063ac:	40020028 	.word	0x40020028
 80063b0:	40020040 	.word	0x40020040
 80063b4:	40020058 	.word	0x40020058
 80063b8:	40020070 	.word	0x40020070
 80063bc:	40020088 	.word	0x40020088
 80063c0:	400200a0 	.word	0x400200a0
 80063c4:	400200b8 	.word	0x400200b8
 80063c8:	40020410 	.word	0x40020410
 80063cc:	40020428 	.word	0x40020428
 80063d0:	40020440 	.word	0x40020440
 80063d4:	40020458 	.word	0x40020458
 80063d8:	40020470 	.word	0x40020470
 80063dc:	40020488 	.word	0x40020488
 80063e0:	400204a0 	.word	0x400204a0
 80063e4:	400204b8 	.word	0x400204b8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf14      	ite	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2300      	moveq	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8087 	beq.w	8006510 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	2220      	movs	r2, #32
 800640c:	409a      	lsls	r2, r3
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b04      	cmp	r3, #4
 800641c:	d139      	bne.n	8006492 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0216 	bic.w	r2, r2, #22
 800642c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800643c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <HAL_DMA_IRQHandler+0x736>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0208 	bic.w	r2, r2, #8
 800645c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	223f      	movs	r2, #63	; 0x3f
 8006468:	409a      	lsls	r2, r3
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 834a 	beq.w	8006b1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
          }
          return;
 8006490:	e344      	b.n	8006b1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d018      	beq.n	80064d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d108      	bne.n	80064c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02c      	beq.n	8006510 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3
 80064be:	e027      	b.n	8006510 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d023      	beq.n	8006510 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
 80064d0:	e01e      	b.n	8006510 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10f      	bne.n	8006500 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0210 	bic.w	r2, r2, #16
 80064ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8306 	beq.w	8006b26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8088 	beq.w	8006638 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2204      	movs	r2, #4
 800652c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a7a      	ldr	r2, [pc, #488]	; (8006720 <HAL_DMA_IRQHandler+0xa08>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d04a      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a79      	ldr	r2, [pc, #484]	; (8006724 <HAL_DMA_IRQHandler+0xa0c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d045      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a77      	ldr	r2, [pc, #476]	; (8006728 <HAL_DMA_IRQHandler+0xa10>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d040      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a76      	ldr	r2, [pc, #472]	; (800672c <HAL_DMA_IRQHandler+0xa14>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d03b      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a74      	ldr	r2, [pc, #464]	; (8006730 <HAL_DMA_IRQHandler+0xa18>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d036      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a73      	ldr	r2, [pc, #460]	; (8006734 <HAL_DMA_IRQHandler+0xa1c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d031      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a71      	ldr	r2, [pc, #452]	; (8006738 <HAL_DMA_IRQHandler+0xa20>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d02c      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a70      	ldr	r2, [pc, #448]	; (800673c <HAL_DMA_IRQHandler+0xa24>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d027      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a6e      	ldr	r2, [pc, #440]	; (8006740 <HAL_DMA_IRQHandler+0xa28>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d022      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a6d      	ldr	r2, [pc, #436]	; (8006744 <HAL_DMA_IRQHandler+0xa2c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d01d      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a6b      	ldr	r2, [pc, #428]	; (8006748 <HAL_DMA_IRQHandler+0xa30>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d018      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a6a      	ldr	r2, [pc, #424]	; (800674c <HAL_DMA_IRQHandler+0xa34>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a68      	ldr	r2, [pc, #416]	; (8006750 <HAL_DMA_IRQHandler+0xa38>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00e      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a67      	ldr	r2, [pc, #412]	; (8006754 <HAL_DMA_IRQHandler+0xa3c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d009      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a65      	ldr	r2, [pc, #404]	; (8006758 <HAL_DMA_IRQHandler+0xa40>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d004      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x8b8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a64      	ldr	r2, [pc, #400]	; (800675c <HAL_DMA_IRQHandler+0xa44>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d108      	bne.n	80065e2 <HAL_DMA_IRQHandler+0x8ca>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e007      	b.n	80065f2 <HAL_DMA_IRQHandler+0x8da>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d307      	bcc.n	800660e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1f2      	bne.n	80065f2 <HAL_DMA_IRQHandler+0x8da>
 800660c:	e000      	b.n	8006610 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800660e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2203      	movs	r2, #3
 8006622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006626:	e003      	b.n	8006630 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8272 	beq.w	8006b26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
 800664a:	e26c      	b.n	8006b26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a43      	ldr	r2, [pc, #268]	; (8006760 <HAL_DMA_IRQHandler+0xa48>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d022      	beq.n	800669c <HAL_DMA_IRQHandler+0x984>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a42      	ldr	r2, [pc, #264]	; (8006764 <HAL_DMA_IRQHandler+0xa4c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d01d      	beq.n	800669c <HAL_DMA_IRQHandler+0x984>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a40      	ldr	r2, [pc, #256]	; (8006768 <HAL_DMA_IRQHandler+0xa50>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d018      	beq.n	800669c <HAL_DMA_IRQHandler+0x984>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a3f      	ldr	r2, [pc, #252]	; (800676c <HAL_DMA_IRQHandler+0xa54>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <HAL_DMA_IRQHandler+0x984>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a3d      	ldr	r2, [pc, #244]	; (8006770 <HAL_DMA_IRQHandler+0xa58>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00e      	beq.n	800669c <HAL_DMA_IRQHandler+0x984>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a3c      	ldr	r2, [pc, #240]	; (8006774 <HAL_DMA_IRQHandler+0xa5c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d009      	beq.n	800669c <HAL_DMA_IRQHandler+0x984>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a3a      	ldr	r2, [pc, #232]	; (8006778 <HAL_DMA_IRQHandler+0xa60>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <HAL_DMA_IRQHandler+0x984>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a39      	ldr	r2, [pc, #228]	; (800677c <HAL_DMA_IRQHandler+0xa64>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d101      	bne.n	80066a0 <HAL_DMA_IRQHandler+0x988>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <HAL_DMA_IRQHandler+0x98a>
 80066a0:	2300      	movs	r3, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 823f 	beq.w	8006b26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2204      	movs	r2, #4
 80066ba:	409a      	lsls	r2, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80cd 	beq.w	8006860 <HAL_DMA_IRQHandler+0xb48>
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80c7 	beq.w	8006860 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	2204      	movs	r2, #4
 80066dc:	409a      	lsls	r2, r3
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d049      	beq.n	8006780 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 8210 	beq.w	8006b20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006708:	e20a      	b.n	8006b20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 8206 	beq.w	8006b20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800671c:	e200      	b.n	8006b20 <HAL_DMA_IRQHandler+0xe08>
 800671e:	bf00      	nop
 8006720:	40020010 	.word	0x40020010
 8006724:	40020028 	.word	0x40020028
 8006728:	40020040 	.word	0x40020040
 800672c:	40020058 	.word	0x40020058
 8006730:	40020070 	.word	0x40020070
 8006734:	40020088 	.word	0x40020088
 8006738:	400200a0 	.word	0x400200a0
 800673c:	400200b8 	.word	0x400200b8
 8006740:	40020410 	.word	0x40020410
 8006744:	40020428 	.word	0x40020428
 8006748:	40020440 	.word	0x40020440
 800674c:	40020458 	.word	0x40020458
 8006750:	40020470 	.word	0x40020470
 8006754:	40020488 	.word	0x40020488
 8006758:	400204a0 	.word	0x400204a0
 800675c:	400204b8 	.word	0x400204b8
 8006760:	58025408 	.word	0x58025408
 8006764:	5802541c 	.word	0x5802541c
 8006768:	58025430 	.word	0x58025430
 800676c:	58025444 	.word	0x58025444
 8006770:	58025458 	.word	0x58025458
 8006774:	5802546c 	.word	0x5802546c
 8006778:	58025480 	.word	0x58025480
 800677c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d160      	bne.n	800684c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a7f      	ldr	r2, [pc, #508]	; (800698c <HAL_DMA_IRQHandler+0xc74>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d04a      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a7d      	ldr	r2, [pc, #500]	; (8006990 <HAL_DMA_IRQHandler+0xc78>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d045      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a7c      	ldr	r2, [pc, #496]	; (8006994 <HAL_DMA_IRQHandler+0xc7c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d040      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a7a      	ldr	r2, [pc, #488]	; (8006998 <HAL_DMA_IRQHandler+0xc80>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d03b      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a79      	ldr	r2, [pc, #484]	; (800699c <HAL_DMA_IRQHandler+0xc84>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d036      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a77      	ldr	r2, [pc, #476]	; (80069a0 <HAL_DMA_IRQHandler+0xc88>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d031      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a76      	ldr	r2, [pc, #472]	; (80069a4 <HAL_DMA_IRQHandler+0xc8c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d02c      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a74      	ldr	r2, [pc, #464]	; (80069a8 <HAL_DMA_IRQHandler+0xc90>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d027      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a73      	ldr	r2, [pc, #460]	; (80069ac <HAL_DMA_IRQHandler+0xc94>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d022      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a71      	ldr	r2, [pc, #452]	; (80069b0 <HAL_DMA_IRQHandler+0xc98>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01d      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a70      	ldr	r2, [pc, #448]	; (80069b4 <HAL_DMA_IRQHandler+0xc9c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d018      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a6e      	ldr	r2, [pc, #440]	; (80069b8 <HAL_DMA_IRQHandler+0xca0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a6d      	ldr	r2, [pc, #436]	; (80069bc <HAL_DMA_IRQHandler+0xca4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00e      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6b      	ldr	r2, [pc, #428]	; (80069c0 <HAL_DMA_IRQHandler+0xca8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d009      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a6a      	ldr	r2, [pc, #424]	; (80069c4 <HAL_DMA_IRQHandler+0xcac>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d004      	beq.n	800682a <HAL_DMA_IRQHandler+0xb12>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a68      	ldr	r2, [pc, #416]	; (80069c8 <HAL_DMA_IRQHandler+0xcb0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <HAL_DMA_IRQHandler+0xb24>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0208 	bic.w	r2, r2, #8
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e007      	b.n	800684c <HAL_DMA_IRQHandler+0xb34>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0204 	bic.w	r2, r2, #4
 800684a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8165 	beq.w	8006b20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800685e:	e15f      	b.n	8006b20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	2202      	movs	r2, #2
 800686a:	409a      	lsls	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	4013      	ands	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80c5 	beq.w	8006a00 <HAL_DMA_IRQHandler+0xce8>
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 80bf 	beq.w	8006a00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	2202      	movs	r2, #2
 800688c:	409a      	lsls	r2, r3
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d018      	beq.n	80068ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 813a 	beq.w	8006b24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068b8:	e134      	b.n	8006b24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8130 	beq.w	8006b24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068cc:	e12a      	b.n	8006b24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f040 8089 	bne.w	80069ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2b      	ldr	r2, [pc, #172]	; (800698c <HAL_DMA_IRQHandler+0xc74>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d04a      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a29      	ldr	r2, [pc, #164]	; (8006990 <HAL_DMA_IRQHandler+0xc78>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d045      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a28      	ldr	r2, [pc, #160]	; (8006994 <HAL_DMA_IRQHandler+0xc7c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d040      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a26      	ldr	r2, [pc, #152]	; (8006998 <HAL_DMA_IRQHandler+0xc80>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d03b      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a25      	ldr	r2, [pc, #148]	; (800699c <HAL_DMA_IRQHandler+0xc84>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d036      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a23      	ldr	r2, [pc, #140]	; (80069a0 <HAL_DMA_IRQHandler+0xc88>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d031      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a22      	ldr	r2, [pc, #136]	; (80069a4 <HAL_DMA_IRQHandler+0xc8c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d02c      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a20      	ldr	r2, [pc, #128]	; (80069a8 <HAL_DMA_IRQHandler+0xc90>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d027      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1f      	ldr	r2, [pc, #124]	; (80069ac <HAL_DMA_IRQHandler+0xc94>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d022      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <HAL_DMA_IRQHandler+0xc98>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01d      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <HAL_DMA_IRQHandler+0xc9c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <HAL_DMA_IRQHandler+0xca0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a19      	ldr	r2, [pc, #100]	; (80069bc <HAL_DMA_IRQHandler+0xca4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a17      	ldr	r2, [pc, #92]	; (80069c0 <HAL_DMA_IRQHandler+0xca8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a16      	ldr	r2, [pc, #88]	; (80069c4 <HAL_DMA_IRQHandler+0xcac>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_DMA_IRQHandler+0xc62>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <HAL_DMA_IRQHandler+0xcb0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d128      	bne.n	80069cc <HAL_DMA_IRQHandler+0xcb4>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0214 	bic.w	r2, r2, #20
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e027      	b.n	80069dc <HAL_DMA_IRQHandler+0xcc4>
 800698c:	40020010 	.word	0x40020010
 8006990:	40020028 	.word	0x40020028
 8006994:	40020040 	.word	0x40020040
 8006998:	40020058 	.word	0x40020058
 800699c:	40020070 	.word	0x40020070
 80069a0:	40020088 	.word	0x40020088
 80069a4:	400200a0 	.word	0x400200a0
 80069a8:	400200b8 	.word	0x400200b8
 80069ac:	40020410 	.word	0x40020410
 80069b0:	40020428 	.word	0x40020428
 80069b4:	40020440 	.word	0x40020440
 80069b8:	40020458 	.word	0x40020458
 80069bc:	40020470 	.word	0x40020470
 80069c0:	40020488 	.word	0x40020488
 80069c4:	400204a0 	.word	0x400204a0
 80069c8:	400204b8 	.word	0x400204b8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 020a 	bic.w	r2, r2, #10
 80069da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8097 	beq.w	8006b24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069fe:	e091      	b.n	8006b24 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	2208      	movs	r2, #8
 8006a0a:	409a      	lsls	r2, r3
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8088 	beq.w	8006b26 <HAL_DMA_IRQHandler+0xe0e>
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 8082 	beq.w	8006b26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a41      	ldr	r2, [pc, #260]	; (8006b2c <HAL_DMA_IRQHandler+0xe14>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d04a      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a3f      	ldr	r2, [pc, #252]	; (8006b30 <HAL_DMA_IRQHandler+0xe18>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d045      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3e      	ldr	r2, [pc, #248]	; (8006b34 <HAL_DMA_IRQHandler+0xe1c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d040      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a3c      	ldr	r2, [pc, #240]	; (8006b38 <HAL_DMA_IRQHandler+0xe20>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d03b      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a3b      	ldr	r2, [pc, #236]	; (8006b3c <HAL_DMA_IRQHandler+0xe24>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d036      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a39      	ldr	r2, [pc, #228]	; (8006b40 <HAL_DMA_IRQHandler+0xe28>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d031      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a38      	ldr	r2, [pc, #224]	; (8006b44 <HAL_DMA_IRQHandler+0xe2c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d02c      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a36      	ldr	r2, [pc, #216]	; (8006b48 <HAL_DMA_IRQHandler+0xe30>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d027      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a35      	ldr	r2, [pc, #212]	; (8006b4c <HAL_DMA_IRQHandler+0xe34>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d022      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a33      	ldr	r2, [pc, #204]	; (8006b50 <HAL_DMA_IRQHandler+0xe38>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d01d      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a32      	ldr	r2, [pc, #200]	; (8006b54 <HAL_DMA_IRQHandler+0xe3c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d018      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a30      	ldr	r2, [pc, #192]	; (8006b58 <HAL_DMA_IRQHandler+0xe40>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a2f      	ldr	r2, [pc, #188]	; (8006b5c <HAL_DMA_IRQHandler+0xe44>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00e      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a2d      	ldr	r2, [pc, #180]	; (8006b60 <HAL_DMA_IRQHandler+0xe48>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d009      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <HAL_DMA_IRQHandler+0xe4c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d004      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xdaa>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <HAL_DMA_IRQHandler+0xe50>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d108      	bne.n	8006ad4 <HAL_DMA_IRQHandler+0xdbc>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 021c 	bic.w	r2, r2, #28
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e007      	b.n	8006ae4 <HAL_DMA_IRQHandler+0xdcc>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 020e 	bic.w	r2, r2, #14
 8006ae2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	2201      	movs	r2, #1
 8006aee:	409a      	lsls	r2, r3
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
 8006b1a:	e004      	b.n	8006b26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b26:	3728      	adds	r7, #40	; 0x28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40020010 	.word	0x40020010
 8006b30:	40020028 	.word	0x40020028
 8006b34:	40020040 	.word	0x40020040
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	40020070 	.word	0x40020070
 8006b40:	40020088 	.word	0x40020088
 8006b44:	400200a0 	.word	0x400200a0
 8006b48:	400200b8 	.word	0x400200b8
 8006b4c:	40020410 	.word	0x40020410
 8006b50:	40020428 	.word	0x40020428
 8006b54:	40020440 	.word	0x40020440
 8006b58:	40020458 	.word	0x40020458
 8006b5c:	40020470 	.word	0x40020470
 8006b60:	40020488 	.word	0x40020488
 8006b64:	400204a0 	.word	0x400204a0
 8006b68:	400204b8 	.word	0x400204b8

08006b6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a7f      	ldr	r2, [pc, #508]	; (8006d88 <DMA_SetConfig+0x21c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d072      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a7d      	ldr	r2, [pc, #500]	; (8006d8c <DMA_SetConfig+0x220>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d06d      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a7c      	ldr	r2, [pc, #496]	; (8006d90 <DMA_SetConfig+0x224>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d068      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a7a      	ldr	r2, [pc, #488]	; (8006d94 <DMA_SetConfig+0x228>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d063      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a79      	ldr	r2, [pc, #484]	; (8006d98 <DMA_SetConfig+0x22c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d05e      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a77      	ldr	r2, [pc, #476]	; (8006d9c <DMA_SetConfig+0x230>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d059      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a76      	ldr	r2, [pc, #472]	; (8006da0 <DMA_SetConfig+0x234>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d054      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a74      	ldr	r2, [pc, #464]	; (8006da4 <DMA_SetConfig+0x238>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d04f      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a73      	ldr	r2, [pc, #460]	; (8006da8 <DMA_SetConfig+0x23c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d04a      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a71      	ldr	r2, [pc, #452]	; (8006dac <DMA_SetConfig+0x240>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d045      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a70      	ldr	r2, [pc, #448]	; (8006db0 <DMA_SetConfig+0x244>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d040      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6e      	ldr	r2, [pc, #440]	; (8006db4 <DMA_SetConfig+0x248>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d03b      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a6d      	ldr	r2, [pc, #436]	; (8006db8 <DMA_SetConfig+0x24c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d036      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a6b      	ldr	r2, [pc, #428]	; (8006dbc <DMA_SetConfig+0x250>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d031      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a6a      	ldr	r2, [pc, #424]	; (8006dc0 <DMA_SetConfig+0x254>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d02c      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a68      	ldr	r2, [pc, #416]	; (8006dc4 <DMA_SetConfig+0x258>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d027      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a67      	ldr	r2, [pc, #412]	; (8006dc8 <DMA_SetConfig+0x25c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d022      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a65      	ldr	r2, [pc, #404]	; (8006dcc <DMA_SetConfig+0x260>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d01d      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a64      	ldr	r2, [pc, #400]	; (8006dd0 <DMA_SetConfig+0x264>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d018      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a62      	ldr	r2, [pc, #392]	; (8006dd4 <DMA_SetConfig+0x268>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a61      	ldr	r2, [pc, #388]	; (8006dd8 <DMA_SetConfig+0x26c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00e      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a5f      	ldr	r2, [pc, #380]	; (8006ddc <DMA_SetConfig+0x270>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a5e      	ldr	r2, [pc, #376]	; (8006de0 <DMA_SetConfig+0x274>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <DMA_SetConfig+0x10a>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a5c      	ldr	r2, [pc, #368]	; (8006de4 <DMA_SetConfig+0x278>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d101      	bne.n	8006c7a <DMA_SetConfig+0x10e>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <DMA_SetConfig+0x110>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00d      	beq.n	8006c9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a39      	ldr	r2, [pc, #228]	; (8006d88 <DMA_SetConfig+0x21c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d04a      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a38      	ldr	r2, [pc, #224]	; (8006d8c <DMA_SetConfig+0x220>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d045      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a36      	ldr	r2, [pc, #216]	; (8006d90 <DMA_SetConfig+0x224>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d040      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a35      	ldr	r2, [pc, #212]	; (8006d94 <DMA_SetConfig+0x228>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d03b      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a33      	ldr	r2, [pc, #204]	; (8006d98 <DMA_SetConfig+0x22c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d036      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a32      	ldr	r2, [pc, #200]	; (8006d9c <DMA_SetConfig+0x230>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d031      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a30      	ldr	r2, [pc, #192]	; (8006da0 <DMA_SetConfig+0x234>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d02c      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2f      	ldr	r2, [pc, #188]	; (8006da4 <DMA_SetConfig+0x238>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d027      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2d      	ldr	r2, [pc, #180]	; (8006da8 <DMA_SetConfig+0x23c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d022      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2c      	ldr	r2, [pc, #176]	; (8006dac <DMA_SetConfig+0x240>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d01d      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <DMA_SetConfig+0x244>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d018      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a29      	ldr	r2, [pc, #164]	; (8006db4 <DMA_SetConfig+0x248>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d013      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <DMA_SetConfig+0x24c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00e      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a26      	ldr	r2, [pc, #152]	; (8006dbc <DMA_SetConfig+0x250>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d009      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a24      	ldr	r2, [pc, #144]	; (8006dc0 <DMA_SetConfig+0x254>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <DMA_SetConfig+0x1d0>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <DMA_SetConfig+0x258>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d101      	bne.n	8006d40 <DMA_SetConfig+0x1d4>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e000      	b.n	8006d42 <DMA_SetConfig+0x1d6>
 8006d40:	2300      	movs	r3, #0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d059      	beq.n	8006dfa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	223f      	movs	r2, #63	; 0x3f
 8006d50:	409a      	lsls	r2, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d138      	bne.n	8006de8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d86:	e086      	b.n	8006e96 <DMA_SetConfig+0x32a>
 8006d88:	40020010 	.word	0x40020010
 8006d8c:	40020028 	.word	0x40020028
 8006d90:	40020040 	.word	0x40020040
 8006d94:	40020058 	.word	0x40020058
 8006d98:	40020070 	.word	0x40020070
 8006d9c:	40020088 	.word	0x40020088
 8006da0:	400200a0 	.word	0x400200a0
 8006da4:	400200b8 	.word	0x400200b8
 8006da8:	40020410 	.word	0x40020410
 8006dac:	40020428 	.word	0x40020428
 8006db0:	40020440 	.word	0x40020440
 8006db4:	40020458 	.word	0x40020458
 8006db8:	40020470 	.word	0x40020470
 8006dbc:	40020488 	.word	0x40020488
 8006dc0:	400204a0 	.word	0x400204a0
 8006dc4:	400204b8 	.word	0x400204b8
 8006dc8:	58025408 	.word	0x58025408
 8006dcc:	5802541c 	.word	0x5802541c
 8006dd0:	58025430 	.word	0x58025430
 8006dd4:	58025444 	.word	0x58025444
 8006dd8:	58025458 	.word	0x58025458
 8006ddc:	5802546c 	.word	0x5802546c
 8006de0:	58025480 	.word	0x58025480
 8006de4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	60da      	str	r2, [r3, #12]
}
 8006df8:	e04d      	b.n	8006e96 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a29      	ldr	r2, [pc, #164]	; (8006ea4 <DMA_SetConfig+0x338>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d022      	beq.n	8006e4a <DMA_SetConfig+0x2de>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a27      	ldr	r2, [pc, #156]	; (8006ea8 <DMA_SetConfig+0x33c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d01d      	beq.n	8006e4a <DMA_SetConfig+0x2de>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a26      	ldr	r2, [pc, #152]	; (8006eac <DMA_SetConfig+0x340>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d018      	beq.n	8006e4a <DMA_SetConfig+0x2de>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a24      	ldr	r2, [pc, #144]	; (8006eb0 <DMA_SetConfig+0x344>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <DMA_SetConfig+0x2de>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a23      	ldr	r2, [pc, #140]	; (8006eb4 <DMA_SetConfig+0x348>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00e      	beq.n	8006e4a <DMA_SetConfig+0x2de>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a21      	ldr	r2, [pc, #132]	; (8006eb8 <DMA_SetConfig+0x34c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d009      	beq.n	8006e4a <DMA_SetConfig+0x2de>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a20      	ldr	r2, [pc, #128]	; (8006ebc <DMA_SetConfig+0x350>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <DMA_SetConfig+0x2de>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1e      	ldr	r2, [pc, #120]	; (8006ec0 <DMA_SetConfig+0x354>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d101      	bne.n	8006e4e <DMA_SetConfig+0x2e2>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <DMA_SetConfig+0x2e4>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d020      	beq.n	8006e96 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	d108      	bne.n	8006e86 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	60da      	str	r2, [r3, #12]
}
 8006e84:	e007      	b.n	8006e96 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	60da      	str	r2, [r3, #12]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	58025408 	.word	0x58025408
 8006ea8:	5802541c 	.word	0x5802541c
 8006eac:	58025430 	.word	0x58025430
 8006eb0:	58025444 	.word	0x58025444
 8006eb4:	58025458 	.word	0x58025458
 8006eb8:	5802546c 	.word	0x5802546c
 8006ebc:	58025480 	.word	0x58025480
 8006ec0:	58025494 	.word	0x58025494

08006ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a42      	ldr	r2, [pc, #264]	; (8006fdc <DMA_CalcBaseAndBitshift+0x118>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d04a      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a41      	ldr	r2, [pc, #260]	; (8006fe0 <DMA_CalcBaseAndBitshift+0x11c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d045      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a3f      	ldr	r2, [pc, #252]	; (8006fe4 <DMA_CalcBaseAndBitshift+0x120>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d040      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a3e      	ldr	r2, [pc, #248]	; (8006fe8 <DMA_CalcBaseAndBitshift+0x124>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d03b      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a3c      	ldr	r2, [pc, #240]	; (8006fec <DMA_CalcBaseAndBitshift+0x128>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d036      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a3b      	ldr	r2, [pc, #236]	; (8006ff0 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d031      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a39      	ldr	r2, [pc, #228]	; (8006ff4 <DMA_CalcBaseAndBitshift+0x130>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d02c      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a38      	ldr	r2, [pc, #224]	; (8006ff8 <DMA_CalcBaseAndBitshift+0x134>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d027      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a36      	ldr	r2, [pc, #216]	; (8006ffc <DMA_CalcBaseAndBitshift+0x138>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d022      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a35      	ldr	r2, [pc, #212]	; (8007000 <DMA_CalcBaseAndBitshift+0x13c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d01d      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a33      	ldr	r2, [pc, #204]	; (8007004 <DMA_CalcBaseAndBitshift+0x140>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d018      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a32      	ldr	r2, [pc, #200]	; (8007008 <DMA_CalcBaseAndBitshift+0x144>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d013      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a30      	ldr	r2, [pc, #192]	; (800700c <DMA_CalcBaseAndBitshift+0x148>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00e      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a2f      	ldr	r2, [pc, #188]	; (8007010 <DMA_CalcBaseAndBitshift+0x14c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d009      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <DMA_CalcBaseAndBitshift+0x150>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <DMA_CalcBaseAndBitshift+0xa8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2c      	ldr	r2, [pc, #176]	; (8007018 <DMA_CalcBaseAndBitshift+0x154>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d101      	bne.n	8006f70 <DMA_CalcBaseAndBitshift+0xac>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <DMA_CalcBaseAndBitshift+0xae>
 8006f70:	2300      	movs	r3, #0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d024      	beq.n	8006fc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	3b10      	subs	r3, #16
 8006f7e:	4a27      	ldr	r2, [pc, #156]	; (800701c <DMA_CalcBaseAndBitshift+0x158>)
 8006f80:	fba2 2303 	umull	r2, r3, r2, r3
 8006f84:	091b      	lsrs	r3, r3, #4
 8006f86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	4a24      	ldr	r2, [pc, #144]	; (8007020 <DMA_CalcBaseAndBitshift+0x15c>)
 8006f90:	5cd3      	ldrb	r3, [r2, r3]
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d908      	bls.n	8006fb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4b1f      	ldr	r3, [pc, #124]	; (8007024 <DMA_CalcBaseAndBitshift+0x160>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	1d1a      	adds	r2, r3, #4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	659a      	str	r2, [r3, #88]	; 0x58
 8006fae:	e00d      	b.n	8006fcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <DMA_CalcBaseAndBitshift+0x160>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8006fbe:	e005      	b.n	8006fcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	40020010 	.word	0x40020010
 8006fe0:	40020028 	.word	0x40020028
 8006fe4:	40020040 	.word	0x40020040
 8006fe8:	40020058 	.word	0x40020058
 8006fec:	40020070 	.word	0x40020070
 8006ff0:	40020088 	.word	0x40020088
 8006ff4:	400200a0 	.word	0x400200a0
 8006ff8:	400200b8 	.word	0x400200b8
 8006ffc:	40020410 	.word	0x40020410
 8007000:	40020428 	.word	0x40020428
 8007004:	40020440 	.word	0x40020440
 8007008:	40020458 	.word	0x40020458
 800700c:	40020470 	.word	0x40020470
 8007010:	40020488 	.word	0x40020488
 8007014:	400204a0 	.word	0x400204a0
 8007018:	400204b8 	.word	0x400204b8
 800701c:	aaaaaaab 	.word	0xaaaaaaab
 8007020:	0800f39c 	.word	0x0800f39c
 8007024:	fffffc00 	.word	0xfffffc00

08007028 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d120      	bne.n	800707e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	2b03      	cmp	r3, #3
 8007042:	d858      	bhi.n	80070f6 <DMA_CheckFifoParam+0xce>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <DMA_CheckFifoParam+0x24>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	0800705d 	.word	0x0800705d
 8007050:	0800706f 	.word	0x0800706f
 8007054:	0800705d 	.word	0x0800705d
 8007058:	080070f7 	.word	0x080070f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d048      	beq.n	80070fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800706c:	e045      	b.n	80070fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007076:	d142      	bne.n	80070fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800707c:	e03f      	b.n	80070fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007086:	d123      	bne.n	80070d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	2b03      	cmp	r3, #3
 800708e:	d838      	bhi.n	8007102 <DMA_CheckFifoParam+0xda>
 8007090:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <DMA_CheckFifoParam+0x70>)
 8007092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007096:	bf00      	nop
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070af 	.word	0x080070af
 80070a0:	080070a9 	.word	0x080070a9
 80070a4:	080070c1 	.word	0x080070c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
        break;
 80070ac:	e030      	b.n	8007110 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d025      	beq.n	8007106 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070be:	e022      	b.n	8007106 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070c8:	d11f      	bne.n	800710a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070ce:	e01c      	b.n	800710a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d902      	bls.n	80070de <DMA_CheckFifoParam+0xb6>
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d003      	beq.n	80070e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80070dc:	e018      	b.n	8007110 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
        break;
 80070e2:	e015      	b.n	8007110 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00e      	beq.n	800710e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
    break;
 80070f4:	e00b      	b.n	800710e <DMA_CheckFifoParam+0xe6>
        break;
 80070f6:	bf00      	nop
 80070f8:	e00a      	b.n	8007110 <DMA_CheckFifoParam+0xe8>
        break;
 80070fa:	bf00      	nop
 80070fc:	e008      	b.n	8007110 <DMA_CheckFifoParam+0xe8>
        break;
 80070fe:	bf00      	nop
 8007100:	e006      	b.n	8007110 <DMA_CheckFifoParam+0xe8>
        break;
 8007102:	bf00      	nop
 8007104:	e004      	b.n	8007110 <DMA_CheckFifoParam+0xe8>
        break;
 8007106:	bf00      	nop
 8007108:	e002      	b.n	8007110 <DMA_CheckFifoParam+0xe8>
        break;
 800710a:	bf00      	nop
 800710c:	e000      	b.n	8007110 <DMA_CheckFifoParam+0xe8>
    break;
 800710e:	bf00      	nop
    }
  }

  return status;
 8007110:	7bfb      	ldrb	r3, [r7, #15]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop

08007120 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a38      	ldr	r2, [pc, #224]	; (8007214 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d022      	beq.n	800717e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a36      	ldr	r2, [pc, #216]	; (8007218 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01d      	beq.n	800717e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a35      	ldr	r2, [pc, #212]	; (800721c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d018      	beq.n	800717e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a33      	ldr	r2, [pc, #204]	; (8007220 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a32      	ldr	r2, [pc, #200]	; (8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00e      	beq.n	800717e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a30      	ldr	r2, [pc, #192]	; (8007228 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d009      	beq.n	800717e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a2f      	ldr	r2, [pc, #188]	; (800722c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d004      	beq.n	800717e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2d      	ldr	r2, [pc, #180]	; (8007230 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d101      	bne.n	8007182 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007182:	2300      	movs	r3, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01a      	beq.n	80071be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	3b08      	subs	r3, #8
 8007190:	4a28      	ldr	r2, [pc, #160]	; (8007234 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	091b      	lsrs	r3, r3, #4
 8007198:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4b26      	ldr	r3, [pc, #152]	; (8007238 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	461a      	mov	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a24      	ldr	r2, [pc, #144]	; (800723c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80071ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	2201      	movs	r2, #1
 80071b6:	409a      	lsls	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80071bc:	e024      	b.n	8007208 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	3b10      	subs	r3, #16
 80071c6:	4a1e      	ldr	r2, [pc, #120]	; (8007240 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	091b      	lsrs	r3, r3, #4
 80071ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4a1c      	ldr	r2, [pc, #112]	; (8007244 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d806      	bhi.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4a1b      	ldr	r2, [pc, #108]	; (8007248 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d902      	bls.n	80071e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3308      	adds	r3, #8
 80071e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4b18      	ldr	r3, [pc, #96]	; (800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a16      	ldr	r2, [pc, #88]	; (8007250 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80071f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	2201      	movs	r2, #1
 8007202:	409a      	lsls	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	58025408 	.word	0x58025408
 8007218:	5802541c 	.word	0x5802541c
 800721c:	58025430 	.word	0x58025430
 8007220:	58025444 	.word	0x58025444
 8007224:	58025458 	.word	0x58025458
 8007228:	5802546c 	.word	0x5802546c
 800722c:	58025480 	.word	0x58025480
 8007230:	58025494 	.word	0x58025494
 8007234:	cccccccd 	.word	0xcccccccd
 8007238:	16009600 	.word	0x16009600
 800723c:	58025880 	.word	0x58025880
 8007240:	aaaaaaab 	.word	0xaaaaaaab
 8007244:	400204b8 	.word	0x400204b8
 8007248:	4002040f 	.word	0x4002040f
 800724c:	10008200 	.word	0x10008200
 8007250:	40020880 	.word	0x40020880

08007254 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d04a      	beq.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b08      	cmp	r3, #8
 800726e:	d847      	bhi.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a25      	ldr	r2, [pc, #148]	; (800730c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d022      	beq.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a24      	ldr	r2, [pc, #144]	; (8007310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d01d      	beq.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a22      	ldr	r2, [pc, #136]	; (8007314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d018      	beq.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a21      	ldr	r2, [pc, #132]	; (8007318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d013      	beq.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1f      	ldr	r2, [pc, #124]	; (800731c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00e      	beq.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d009      	beq.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1b      	ldr	r2, [pc, #108]	; (8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d101      	bne.n	80072c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80072c0:	2301      	movs	r3, #1
 80072c2:	e000      	b.n	80072c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80072c4:	2300      	movs	r3, #0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4b17      	ldr	r3, [pc, #92]	; (800732c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a15      	ldr	r2, [pc, #84]	; (8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80072dc:	671a      	str	r2, [r3, #112]	; 0x70
 80072de:	e009      	b.n	80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4b14      	ldr	r3, [pc, #80]	; (8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a11      	ldr	r2, [pc, #68]	; (8007338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80072f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	2201      	movs	r2, #1
 80072fa:	409a      	lsls	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	58025408 	.word	0x58025408
 8007310:	5802541c 	.word	0x5802541c
 8007314:	58025430 	.word	0x58025430
 8007318:	58025444 	.word	0x58025444
 800731c:	58025458 	.word	0x58025458
 8007320:	5802546c 	.word	0x5802546c
 8007324:	58025480 	.word	0x58025480
 8007328:	58025494 	.word	0x58025494
 800732c:	1600963f 	.word	0x1600963f
 8007330:	58025940 	.word	0x58025940
 8007334:	1000823f 	.word	0x1000823f
 8007338:	40020940 	.word	0x40020940

0800733c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e0e3      	b.n	8007516 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2223      	movs	r2, #35	; 0x23
 800735c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7fa fef3 	bl	800214c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007366:	4b6e      	ldr	r3, [pc, #440]	; (8007520 <HAL_ETH_Init+0x1e4>)
 8007368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800736c:	4a6c      	ldr	r2, [pc, #432]	; (8007520 <HAL_ETH_Init+0x1e4>)
 800736e:	f043 0302 	orr.w	r3, r3, #2
 8007372:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007376:	4b6a      	ldr	r3, [pc, #424]	; (8007520 <HAL_ETH_Init+0x1e4>)
 8007378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7a1b      	ldrb	r3, [r3, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800738c:	2000      	movs	r0, #0
 800738e:	f7fb fbe1 	bl	8002b54 <HAL_SYSCFG_ETHInterfaceSelect>
 8007392:	e003      	b.n	800739c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007394:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007398:	f7fb fbdc 	bl	8002b54 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800739c:	4b61      	ldr	r3, [pc, #388]	; (8007524 <HAL_ETH_Init+0x1e8>)
 800739e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073b8:	f7fb fb90 	bl	8002adc <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80073be:	e011      	b.n	80073e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80073c0:	f7fb fb8c 	bl	8002adc <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80073ce:	d909      	bls.n	80073e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2204      	movs	r2, #4
 80073d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	22e0      	movs	r2, #224	; 0xe0
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e098      	b.n	8007516 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e4      	bne.n	80073c0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f89e 	bl	8007538 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80073fc:	f001 ff06 	bl	800920c <HAL_RCC_GetHCLKFreq>
 8007400:	4603      	mov	r3, r0
 8007402:	4a49      	ldr	r2, [pc, #292]	; (8007528 <HAL_ETH_Init+0x1ec>)
 8007404:	fba2 2303 	umull	r2, r3, r2, r3
 8007408:	0c9a      	lsrs	r2, r3, #18
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3a01      	subs	r2, #1
 8007410:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fa81 	bl	800791c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007422:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007426:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007436:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d009      	beq.n	800745a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	22e0      	movs	r2, #224	; 0xe0
 8007452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e05d      	b.n	8007516 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007462:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007466:	4b31      	ldr	r3, [pc, #196]	; (800752c <HAL_ETH_Init+0x1f0>)
 8007468:	4013      	ands	r3, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6952      	ldr	r2, [r2, #20]
 800746e:	0051      	lsls	r1, r2, #1
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	430b      	orrs	r3, r1
 8007476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800747a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fae9 	bl	8007a56 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fb2f 	bl	8007ae8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	3305      	adds	r3, #5
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	021a      	lsls	r2, r3, #8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	3304      	adds	r3, #4
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	4619      	mov	r1, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	3303      	adds	r3, #3
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	061a      	lsls	r2, r3, #24
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	3302      	adds	r3, #2
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	3301      	adds	r3, #1
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80074c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80074d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80074d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	4b11      	ldr	r3, [pc, #68]	; (8007530 <HAL_ETH_Init+0x1f4>)
 80074ea:	430b      	orrs	r3, r1
 80074ec:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <HAL_ETH_Init+0x1f8>)
 80074fe:	430b      	orrs	r3, r1
 8007500:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2210      	movs	r2, #16
 8007510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	58024400 	.word	0x58024400
 8007524:	58000400 	.word	0x58000400
 8007528:	431bde83 	.word	0x431bde83
 800752c:	ffff8001 	.word	0xffff8001
 8007530:	0c020060 	.word	0x0c020060
 8007534:	0c20c000 	.word	0x0c20c000

08007538 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007548:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007550:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007552:	f001 fe5b 	bl	800920c <HAL_RCC_GetHCLKFreq>
 8007556:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a1a      	ldr	r2, [pc, #104]	; (80075c4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d804      	bhi.n	800756a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e022      	b.n	80075b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	4a16      	ldr	r2, [pc, #88]	; (80075c8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d204      	bcs.n	800757c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	e019      	b.n	80075b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4a13      	ldr	r2, [pc, #76]	; (80075cc <HAL_ETH_SetMDIOClockRange+0x94>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d915      	bls.n	80075b0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d804      	bhi.n	8007596 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e00c      	b.n	80075b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	4a0e      	ldr	r2, [pc, #56]	; (80075d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d804      	bhi.n	80075a8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e003      	b.n	80075b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80075ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	02160ebf 	.word	0x02160ebf
 80075c8:	03938700 	.word	0x03938700
 80075cc:	05f5e0ff 	.word	0x05f5e0ff
 80075d0:	08f0d17f 	.word	0x08f0d17f
 80075d4:	0ee6b27f 	.word	0x0ee6b27f

080075d8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80075ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	791b      	ldrb	r3, [r3, #4]
 80075f0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80075f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	7b1b      	ldrb	r3, [r3, #12]
 80075f8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80075fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	7b5b      	ldrb	r3, [r3, #13]
 8007600:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007602:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	7b9b      	ldrb	r3, [r3, #14]
 8007608:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800760a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	7bdb      	ldrb	r3, [r3, #15]
 8007610:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007612:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	7c12      	ldrb	r2, [r2, #16]
 8007618:	2a00      	cmp	r2, #0
 800761a:	d102      	bne.n	8007622 <ETH_SetMACConfig+0x4a>
 800761c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007620:	e000      	b.n	8007624 <ETH_SetMACConfig+0x4c>
 8007622:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007624:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	7c52      	ldrb	r2, [r2, #17]
 800762a:	2a00      	cmp	r2, #0
 800762c:	d102      	bne.n	8007634 <ETH_SetMACConfig+0x5c>
 800762e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007632:	e000      	b.n	8007636 <ETH_SetMACConfig+0x5e>
 8007634:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	7c9b      	ldrb	r3, [r3, #18]
 800763c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800763e:	431a      	orrs	r2, r3
               macconf->Speed |
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8007644:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800764a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	7f1b      	ldrb	r3, [r3, #28]
 8007650:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8007652:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	7f5b      	ldrb	r3, [r3, #29]
 8007658:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800765a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	7f92      	ldrb	r2, [r2, #30]
 8007660:	2a00      	cmp	r2, #0
 8007662:	d102      	bne.n	800766a <ETH_SetMACConfig+0x92>
 8007664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007668:	e000      	b.n	800766c <ETH_SetMACConfig+0x94>
 800766a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800766c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	7fdb      	ldrb	r3, [r3, #31]
 8007672:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007674:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	f892 2020 	ldrb.w	r2, [r2, #32]
 800767c:	2a00      	cmp	r2, #0
 800767e:	d102      	bne.n	8007686 <ETH_SetMACConfig+0xae>
 8007680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007684:	e000      	b.n	8007688 <ETH_SetMACConfig+0xb0>
 8007686:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007688:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800768e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007696:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007698:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	4b56      	ldr	r3, [pc, #344]	; (8007804 <ETH_SetMACConfig+0x22c>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	68f9      	ldr	r1, [r7, #12]
 80076b2:	430b      	orrs	r3, r1
 80076b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80076c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80076ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80076d6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80076d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80076e0:	2a00      	cmp	r2, #0
 80076e2:	d102      	bne.n	80076ea <ETH_SetMACConfig+0x112>
 80076e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076e8:	e000      	b.n	80076ec <ETH_SetMACConfig+0x114>
 80076ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80076ec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	4b42      	ldr	r3, [pc, #264]	; (8007808 <ETH_SetMACConfig+0x230>)
 80076fe:	4013      	ands	r3, r2
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	68f9      	ldr	r1, [r7, #12]
 8007706:	430b      	orrs	r3, r1
 8007708:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007710:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	4b3a      	ldr	r3, [pc, #232]	; (800780c <ETH_SetMACConfig+0x234>)
 8007722:	4013      	ands	r3, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	68f9      	ldr	r1, [r7, #12]
 800772a:	430b      	orrs	r3, r1
 800772c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007734:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800773a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007742:	2a00      	cmp	r2, #0
 8007744:	d101      	bne.n	800774a <ETH_SetMACConfig+0x172>
 8007746:	2280      	movs	r2, #128	; 0x80
 8007748:	e000      	b.n	800774c <ETH_SetMACConfig+0x174>
 800774a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800774c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007752:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800775e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007762:	4013      	ands	r3, r2
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	68f9      	ldr	r1, [r7, #12]
 800776a:	430b      	orrs	r3, r1
 800776c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007774:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800777c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778a:	f023 0103 	bic.w	r1, r3, #3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	430a      	orrs	r2, r1
 8007796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80077a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80077be:	2a00      	cmp	r2, #0
 80077c0:	d101      	bne.n	80077c6 <ETH_SetMACConfig+0x1ee>
 80077c2:	2240      	movs	r2, #64	; 0x40
 80077c4:	e000      	b.n	80077c8 <ETH_SetMACConfig+0x1f0>
 80077c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80077c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80077d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80077d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80077da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80077e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	00048083 	.word	0x00048083
 8007808:	c0f88000 	.word	0xc0f88000
 800780c:	fffffef0 	.word	0xfffffef0

08007810 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	4b38      	ldr	r3, [pc, #224]	; (8007908 <ETH_SetDMAConfig+0xf8>)
 8007826:	4013      	ands	r3, r2
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	6811      	ldr	r1, [r2, #0]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	430b      	orrs	r3, r1
 8007832:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007836:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	791b      	ldrb	r3, [r3, #4]
 800783c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007842:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	7b1b      	ldrb	r3, [r3, #12]
 8007848:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	4b2c      	ldr	r3, [pc, #176]	; (800790c <ETH_SetDMAConfig+0xfc>)
 800785a:	4013      	ands	r3, r2
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	6812      	ldr	r2, [r2, #0]
 8007860:	68f9      	ldr	r1, [r7, #12]
 8007862:	430b      	orrs	r3, r1
 8007864:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007868:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	7b5b      	ldrb	r3, [r3, #13]
 800786e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007880:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007884:	4b22      	ldr	r3, [pc, #136]	; (8007910 <ETH_SetDMAConfig+0x100>)
 8007886:	4013      	ands	r3, r2
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6812      	ldr	r2, [r2, #0]
 800788c:	68f9      	ldr	r1, [r7, #12]
 800788e:	430b      	orrs	r3, r1
 8007890:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007894:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	7d1b      	ldrb	r3, [r3, #20]
 80078a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80078a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	7f5b      	ldrb	r3, [r3, #29]
 80078a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80078ba:	4b16      	ldr	r3, [pc, #88]	; (8007914 <ETH_SetDMAConfig+0x104>)
 80078bc:	4013      	ands	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	68f9      	ldr	r1, [r7, #12]
 80078c4:	430b      	orrs	r3, r1
 80078c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	7f1b      	ldrb	r3, [r3, #28]
 80078d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80078e8:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <ETH_SetDMAConfig+0x108>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	68f9      	ldr	r1, [r7, #12]
 80078f2:	430b      	orrs	r3, r1
 80078f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	ffff87fd 	.word	0xffff87fd
 800790c:	ffff2ffe 	.word	0xffff2ffe
 8007910:	fffec000 	.word	0xfffec000
 8007914:	ffc0efef 	.word	0xffc0efef
 8007918:	7fc0ffff 	.word	0x7fc0ffff

0800791c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b0a4      	sub	sp, #144	; 0x90
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800792a:	2300      	movs	r3, #0
 800792c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800792e:	2300      	movs	r3, #0
 8007930:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007934:	2300      	movs	r3, #0
 8007936:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007946:	2301      	movs	r3, #1
 8007948:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800794c:	2300      	movs	r3, #0
 800794e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800795c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800795e:	2300      	movs	r3, #0
 8007960:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8007964:	2300      	movs	r3, #0
 8007966:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007968:	2300      	movs	r3, #0
 800796a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800796e:	2300      	movs	r3, #0
 8007970:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8007974:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007978:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800797a:	2300      	movs	r3, #0
 800797c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007980:	2300      	movs	r3, #0
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800798a:	2300      	movs	r3, #0
 800798c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007990:	2300      	movs	r3, #0
 8007992:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007996:	2300      	movs	r3, #0
 8007998:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800799a:	2300      	movs	r3, #0
 800799c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800799e:	2300      	movs	r3, #0
 80079a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80079a2:	2300      	movs	r3, #0
 80079a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80079b4:	2320      	movs	r3, #32
 80079b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80079c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80079cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80079d8:	2302      	movs	r3, #2
 80079da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80079de:	2300      	movs	r3, #0
 80079e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80079f6:	2300      	movs	r3, #0
 80079f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff fde6 	bl	80075d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007a10:	2301      	movs	r3, #1
 8007a12:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007a26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a2a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007a3c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007a42:	f107 0308 	add.w	r3, r7, #8
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff fee1 	bl	8007810 <ETH_SetDMAConfig>
}
 8007a4e:	bf00      	nop
 8007a50:	3790      	adds	r7, #144	; 0x90
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	e01d      	b.n	8007aa0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68d9      	ldr	r1, [r3, #12]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	4413      	add	r3, r2
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	440b      	add	r3, r1
 8007a74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2200      	movs	r2, #0
 8007a86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	3206      	adds	r2, #6
 8007a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d9de      	bls.n	8007a64 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e023      	b.n	8007b3e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6919      	ldr	r1, [r3, #16]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4613      	mov	r3, r2
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	4413      	add	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	440b      	add	r3, r1
 8007b06:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2200      	movs	r2, #0
 8007b12:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2200      	movs	r2, #0
 8007b18:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2200      	movs	r2, #0
 8007b24:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	3212      	adds	r2, #18
 8007b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d9d8      	bls.n	8007af6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b92:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8007b96:	bf00      	nop
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
	...

08007ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b089      	sub	sp, #36	; 0x24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bb2:	4b89      	ldr	r3, [pc, #548]	; (8007dd8 <HAL_GPIO_Init+0x234>)
 8007bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bb6:	e194      	b.n	8007ee2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8186 	beq.w	8007edc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f003 0303 	and.w	r3, r3, #3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d005      	beq.n	8007be8 <HAL_GPIO_Init+0x44>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d130      	bne.n	8007c4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	2203      	movs	r2, #3
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c1e:	2201      	movs	r2, #1
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	fa02 f303 	lsl.w	r3, r2, r3
 8007c26:	43db      	mvns	r3, r3
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	091b      	lsrs	r3, r3, #4
 8007c34:	f003 0201 	and.w	r2, r3, #1
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d017      	beq.n	8007c86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	2203      	movs	r2, #3
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	43db      	mvns	r3, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d123      	bne.n	8007cda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	08da      	lsrs	r2, r3, #3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3208      	adds	r2, #8
 8007c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	220f      	movs	r2, #15
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	08da      	lsrs	r2, r3, #3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3208      	adds	r2, #8
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	43db      	mvns	r3, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f003 0203 	and.w	r2, r3, #3
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 80e0 	beq.w	8007edc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d1c:	4b2f      	ldr	r3, [pc, #188]	; (8007ddc <HAL_GPIO_Init+0x238>)
 8007d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d22:	4a2e      	ldr	r2, [pc, #184]	; (8007ddc <HAL_GPIO_Init+0x238>)
 8007d24:	f043 0302 	orr.w	r3, r3, #2
 8007d28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d2c:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <HAL_GPIO_Init+0x238>)
 8007d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d3a:	4a29      	ldr	r2, [pc, #164]	; (8007de0 <HAL_GPIO_Init+0x23c>)
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	089b      	lsrs	r3, r3, #2
 8007d40:	3302      	adds	r3, #2
 8007d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	220f      	movs	r2, #15
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	43db      	mvns	r3, r3
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a20      	ldr	r2, [pc, #128]	; (8007de4 <HAL_GPIO_Init+0x240>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d052      	beq.n	8007e0c <HAL_GPIO_Init+0x268>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a1f      	ldr	r2, [pc, #124]	; (8007de8 <HAL_GPIO_Init+0x244>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d031      	beq.n	8007dd2 <HAL_GPIO_Init+0x22e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a1e      	ldr	r2, [pc, #120]	; (8007dec <HAL_GPIO_Init+0x248>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d02b      	beq.n	8007dce <HAL_GPIO_Init+0x22a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a1d      	ldr	r2, [pc, #116]	; (8007df0 <HAL_GPIO_Init+0x24c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d025      	beq.n	8007dca <HAL_GPIO_Init+0x226>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a1c      	ldr	r2, [pc, #112]	; (8007df4 <HAL_GPIO_Init+0x250>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d01f      	beq.n	8007dc6 <HAL_GPIO_Init+0x222>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <HAL_GPIO_Init+0x254>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d019      	beq.n	8007dc2 <HAL_GPIO_Init+0x21e>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a1a      	ldr	r2, [pc, #104]	; (8007dfc <HAL_GPIO_Init+0x258>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d013      	beq.n	8007dbe <HAL_GPIO_Init+0x21a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a19      	ldr	r2, [pc, #100]	; (8007e00 <HAL_GPIO_Init+0x25c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00d      	beq.n	8007dba <HAL_GPIO_Init+0x216>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a18      	ldr	r2, [pc, #96]	; (8007e04 <HAL_GPIO_Init+0x260>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <HAL_GPIO_Init+0x212>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <HAL_GPIO_Init+0x264>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d101      	bne.n	8007db2 <HAL_GPIO_Init+0x20e>
 8007dae:	2309      	movs	r3, #9
 8007db0:	e02d      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007db2:	230a      	movs	r3, #10
 8007db4:	e02b      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007db6:	2308      	movs	r3, #8
 8007db8:	e029      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007dba:	2307      	movs	r3, #7
 8007dbc:	e027      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007dbe:	2306      	movs	r3, #6
 8007dc0:	e025      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007dc2:	2305      	movs	r3, #5
 8007dc4:	e023      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007dc6:	2304      	movs	r3, #4
 8007dc8:	e021      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e01f      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e01d      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e01b      	b.n	8007e0e <HAL_GPIO_Init+0x26a>
 8007dd6:	bf00      	nop
 8007dd8:	58000080 	.word	0x58000080
 8007ddc:	58024400 	.word	0x58024400
 8007de0:	58000400 	.word	0x58000400
 8007de4:	58020000 	.word	0x58020000
 8007de8:	58020400 	.word	0x58020400
 8007dec:	58020800 	.word	0x58020800
 8007df0:	58020c00 	.word	0x58020c00
 8007df4:	58021000 	.word	0x58021000
 8007df8:	58021400 	.word	0x58021400
 8007dfc:	58021800 	.word	0x58021800
 8007e00:	58021c00 	.word	0x58021c00
 8007e04:	58022000 	.word	0x58022000
 8007e08:	58022400 	.word	0x58022400
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	f002 0203 	and.w	r2, r2, #3
 8007e14:	0092      	lsls	r2, r2, #2
 8007e16:	4093      	lsls	r3, r2
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e1e:	4938      	ldr	r1, [pc, #224]	; (8007f00 <HAL_GPIO_Init+0x35c>)
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	089b      	lsrs	r3, r3, #2
 8007e24:	3302      	adds	r3, #2
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	43db      	mvns	r3, r3
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	43db      	mvns	r3, r3
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	4013      	ands	r3, r2
 8007e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	43db      	mvns	r3, r3
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f47f ae63 	bne.w	8007bb8 <HAL_GPIO_Init+0x14>
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	3724      	adds	r7, #36	; 0x24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	58000400 	.word	0x58000400

08007f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	887b      	ldrh	r3, [r7, #2]
 8007f16:	4013      	ands	r3, r2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
 8007f20:	e001      	b.n	8007f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	807b      	strh	r3, [r7, #2]
 8007f40:	4613      	mov	r3, r2
 8007f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f44:	787b      	ldrb	r3, [r7, #1]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f4a:	887a      	ldrh	r2, [r7, #2]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f50:	e003      	b.n	8007f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f52:	887b      	ldrh	r3, [r7, #2]
 8007f54:	041a      	lsls	r2, r3, #16
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	619a      	str	r2, [r3, #24]
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007f70:	4a08      	ldr	r2, [pc, #32]	; (8007f94 <HAL_HSEM_FastTake+0x2c>)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3320      	adds	r3, #32
 8007f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f7a:	4a07      	ldr	r2, [pc, #28]	; (8007f98 <HAL_HSEM_FastTake+0x30>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d101      	bne.n	8007f84 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	e000      	b.n	8007f86 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	58026400 	.word	0x58026400
 8007f98:	80000300 	.word	0x80000300

08007f9c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007fa6:	4906      	ldr	r1, [pc, #24]	; (8007fc0 <HAL_HSEM_Release+0x24>)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	58026400 	.word	0x58026400

08007fc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af02      	add	r7, sp, #8
 8007fca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e0fe      	b.n	80081d4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d106      	bne.n	8007ff0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7fa fbd0 	bl	8002790 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f006 feb3 	bl	800ed68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	7c1a      	ldrb	r2, [r3, #16]
 800800a:	f88d 2000 	strb.w	r2, [sp]
 800800e:	3304      	adds	r3, #4
 8008010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008012:	f006 fe37 	bl	800ec84 <USB_CoreInit>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e0d5      	b.n	80081d4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f006 feab 	bl	800ed8a <USB_SetCurrentMode>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e0c6      	b.n	80081d4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
 800804a:	e04a      	b.n	80080e2 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800804c:	7bfa      	ldrb	r2, [r7, #15]
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4613      	mov	r3, r2
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	3315      	adds	r3, #21
 800805c:	2201      	movs	r2, #1
 800805e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008060:	7bfa      	ldrb	r2, [r7, #15]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	3314      	adds	r3, #20
 8008070:	7bfa      	ldrb	r2, [r7, #15]
 8008072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008074:	7bfa      	ldrb	r2, [r7, #15]
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	b298      	uxth	r0, r3
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	4613      	mov	r3, r2
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	440b      	add	r3, r1
 8008086:	332e      	adds	r3, #46	; 0x2e
 8008088:	4602      	mov	r2, r0
 800808a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800808c:	7bfa      	ldrb	r2, [r7, #15]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	3318      	adds	r3, #24
 800809c:	2200      	movs	r2, #0
 800809e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80080a0:	7bfa      	ldrb	r2, [r7, #15]
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	4613      	mov	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	331c      	adds	r3, #28
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80080b4:	7bfa      	ldrb	r2, [r7, #15]
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	4613      	mov	r3, r2
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	3320      	adds	r3, #32
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80080c8:	7bfa      	ldrb	r2, [r7, #15]
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3324      	adds	r3, #36	; 0x24
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	3301      	adds	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	791b      	ldrb	r3, [r3, #4]
 80080e6:	7bfa      	ldrb	r2, [r7, #15]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d3af      	bcc.n	800804c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
 80080f0:	e044      	b.n	800817c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80080f2:	7bfa      	ldrb	r2, [r7, #15]
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	f203 2355 	addw	r3, r3, #597	; 0x255
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008108:	7bfa      	ldrb	r2, [r7, #15]
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	4613      	mov	r3, r2
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800811a:	7bfa      	ldrb	r2, [r7, #15]
 800811c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800811e:	7bfa      	ldrb	r2, [r7, #15]
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008134:	7bfa      	ldrb	r2, [r7, #15]
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	4613      	mov	r3, r2
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	440b      	add	r3, r1
 8008142:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800814a:	7bfa      	ldrb	r2, [r7, #15]
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	440b      	add	r3, r1
 8008158:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008160:	7bfa      	ldrb	r2, [r7, #15]
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	3301      	adds	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	791b      	ldrb	r3, [r3, #4]
 8008180:	7bfa      	ldrb	r2, [r7, #15]
 8008182:	429a      	cmp	r2, r3
 8008184:	d3b5      	bcc.n	80080f2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	7c1a      	ldrb	r2, [r3, #16]
 800818e:	f88d 2000 	strb.w	r2, [sp]
 8008192:	3304      	adds	r3, #4
 8008194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008196:	f006 fe45 	bl	800ee24 <USB_DevInit>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e013      	b.n	80081d4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	7b1b      	ldrb	r3, [r3, #12]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d102      	bne.n	80081c8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f80a 	bl	80081dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f007 f800 	bl	800f1d2 <USB_DevDisconnect>

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <HAL_PCDEx_ActivateLPM+0x44>)
 800820c:	4313      	orrs	r3, r2
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	10000003 	.word	0x10000003

08008224 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800822c:	4b29      	ldr	r3, [pc, #164]	; (80082d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	2b06      	cmp	r3, #6
 8008236:	d00a      	beq.n	800824e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008238:	4b26      	ldr	r3, [pc, #152]	; (80082d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d001      	beq.n	800824a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e040      	b.n	80082cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	e03e      	b.n	80082cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800824e:	4b21      	ldr	r3, [pc, #132]	; (80082d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8008256:	491f      	ldr	r1, [pc, #124]	; (80082d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4313      	orrs	r3, r2
 800825c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800825e:	f7fa fc3d 	bl	8002adc <HAL_GetTick>
 8008262:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008264:	e009      	b.n	800827a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008266:	f7fa fc39 	bl	8002adc <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008274:	d901      	bls.n	800827a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e028      	b.n	80082cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008286:	d1ee      	bne.n	8008266 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b1e      	cmp	r3, #30
 800828c:	d008      	beq.n	80082a0 <HAL_PWREx_ConfigSupply+0x7c>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b2e      	cmp	r3, #46	; 0x2e
 8008292:	d005      	beq.n	80082a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b1d      	cmp	r3, #29
 8008298:	d002      	beq.n	80082a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b2d      	cmp	r3, #45	; 0x2d
 800829e:	d114      	bne.n	80082ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80082a0:	f7fa fc1c 	bl	8002adc <HAL_GetTick>
 80082a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80082a6:	e009      	b.n	80082bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082a8:	f7fa fc18 	bl	8002adc <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082b6:	d901      	bls.n	80082bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e007      	b.n	80082cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c8:	d1ee      	bne.n	80082a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	58024800 	.word	0x58024800

080082d8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	4a04      	ldr	r2, [pc, #16]	; (80082f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80082e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082e6:	60d3      	str	r3, [r2, #12]
}
 80082e8:	bf00      	nop
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	58024800 	.word	0x58024800

080082f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08c      	sub	sp, #48	; 0x30
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	f000 bc48 	b.w	8008b9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8088 	beq.w	800842a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800831a:	4b99      	ldr	r3, [pc, #612]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008322:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008324:	4b96      	ldr	r3, [pc, #600]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	2b10      	cmp	r3, #16
 800832e:	d007      	beq.n	8008340 <HAL_RCC_OscConfig+0x48>
 8008330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008332:	2b18      	cmp	r3, #24
 8008334:	d111      	bne.n	800835a <HAL_RCC_OscConfig+0x62>
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d10c      	bne.n	800835a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008340:	4b8f      	ldr	r3, [pc, #572]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d06d      	beq.n	8008428 <HAL_RCC_OscConfig+0x130>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d169      	bne.n	8008428 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	f000 bc21 	b.w	8008b9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008362:	d106      	bne.n	8008372 <HAL_RCC_OscConfig+0x7a>
 8008364:	4b86      	ldr	r3, [pc, #536]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a85      	ldr	r2, [pc, #532]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800836a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	e02e      	b.n	80083d0 <HAL_RCC_OscConfig+0xd8>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10c      	bne.n	8008394 <HAL_RCC_OscConfig+0x9c>
 800837a:	4b81      	ldr	r3, [pc, #516]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a80      	ldr	r2, [pc, #512]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	4b7e      	ldr	r3, [pc, #504]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a7d      	ldr	r2, [pc, #500]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800838c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	e01d      	b.n	80083d0 <HAL_RCC_OscConfig+0xd8>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800839c:	d10c      	bne.n	80083b8 <HAL_RCC_OscConfig+0xc0>
 800839e:	4b78      	ldr	r3, [pc, #480]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a77      	ldr	r2, [pc, #476]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	4b75      	ldr	r3, [pc, #468]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a74      	ldr	r2, [pc, #464]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	e00b      	b.n	80083d0 <HAL_RCC_OscConfig+0xd8>
 80083b8:	4b71      	ldr	r3, [pc, #452]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a70      	ldr	r2, [pc, #448]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	4b6e      	ldr	r3, [pc, #440]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a6d      	ldr	r2, [pc, #436]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d013      	beq.n	8008400 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d8:	f7fa fb80 	bl	8002adc <HAL_GetTick>
 80083dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083e0:	f7fa fb7c 	bl	8002adc <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b64      	cmp	r3, #100	; 0x64
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e3d4      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083f2:	4b63      	ldr	r3, [pc, #396]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f0      	beq.n	80083e0 <HAL_RCC_OscConfig+0xe8>
 80083fe:	e014      	b.n	800842a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008400:	f7fa fb6c 	bl	8002adc <HAL_GetTick>
 8008404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008406:	e008      	b.n	800841a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008408:	f7fa fb68 	bl	8002adc <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b64      	cmp	r3, #100	; 0x64
 8008414:	d901      	bls.n	800841a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e3c0      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800841a:	4b59      	ldr	r3, [pc, #356]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1f0      	bne.n	8008408 <HAL_RCC_OscConfig+0x110>
 8008426:	e000      	b.n	800842a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 80ca 	beq.w	80085cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008438:	4b51      	ldr	r3, [pc, #324]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008440:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008442:	4b4f      	ldr	r3, [pc, #316]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <HAL_RCC_OscConfig+0x166>
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	2b18      	cmp	r3, #24
 8008452:	d156      	bne.n	8008502 <HAL_RCC_OscConfig+0x20a>
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d151      	bne.n	8008502 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800845e:	4b48      	ldr	r3, [pc, #288]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <HAL_RCC_OscConfig+0x17e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e392      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008476:	4b42      	ldr	r3, [pc, #264]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f023 0219 	bic.w	r2, r3, #25
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	493f      	ldr	r1, [pc, #252]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008484:	4313      	orrs	r3, r2
 8008486:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008488:	f7fa fb28 	bl	8002adc <HAL_GetTick>
 800848c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008490:	f7fa fb24 	bl	8002adc <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e37c      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084a2:	4b37      	ldr	r3, [pc, #220]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0304 	and.w	r3, r3, #4
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0f0      	beq.n	8008490 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ae:	f7fa fb45 	bl	8002b3c <HAL_GetREVID>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d817      	bhi.n	80084ec <HAL_RCC_OscConfig+0x1f4>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	d108      	bne.n	80084d6 <HAL_RCC_OscConfig+0x1de>
 80084c4:	4b2e      	ldr	r3, [pc, #184]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084cc:	4a2c      	ldr	r2, [pc, #176]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80084ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084d4:	e07a      	b.n	80085cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d6:	4b2a      	ldr	r3, [pc, #168]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	031b      	lsls	r3, r3, #12
 80084e4:	4926      	ldr	r1, [pc, #152]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084ea:	e06f      	b.n	80085cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ec:	4b24      	ldr	r3, [pc, #144]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	061b      	lsls	r3, r3, #24
 80084fa:	4921      	ldr	r1, [pc, #132]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008500:	e064      	b.n	80085cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d047      	beq.n	800859a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f023 0219 	bic.w	r2, r3, #25
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	491a      	ldr	r1, [pc, #104]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008518:	4313      	orrs	r3, r2
 800851a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851c:	f7fa fade 	bl	8002adc <HAL_GetTick>
 8008520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008524:	f7fa fada 	bl	8002adc <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e332      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008536:	4b12      	ldr	r3, [pc, #72]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0f0      	beq.n	8008524 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008542:	f7fa fafb 	bl	8002b3c <HAL_GetREVID>
 8008546:	4603      	mov	r3, r0
 8008548:	f241 0203 	movw	r2, #4099	; 0x1003
 800854c:	4293      	cmp	r3, r2
 800854e:	d819      	bhi.n	8008584 <HAL_RCC_OscConfig+0x28c>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b40      	cmp	r3, #64	; 0x40
 8008556:	d108      	bne.n	800856a <HAL_RCC_OscConfig+0x272>
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008560:	4a07      	ldr	r2, [pc, #28]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 8008562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008566:	6053      	str	r3, [r2, #4]
 8008568:	e030      	b.n	80085cc <HAL_RCC_OscConfig+0x2d4>
 800856a:	4b05      	ldr	r3, [pc, #20]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	031b      	lsls	r3, r3, #12
 8008578:	4901      	ldr	r1, [pc, #4]	; (8008580 <HAL_RCC_OscConfig+0x288>)
 800857a:	4313      	orrs	r3, r2
 800857c:	604b      	str	r3, [r1, #4]
 800857e:	e025      	b.n	80085cc <HAL_RCC_OscConfig+0x2d4>
 8008580:	58024400 	.word	0x58024400
 8008584:	4b9a      	ldr	r3, [pc, #616]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	061b      	lsls	r3, r3, #24
 8008592:	4997      	ldr	r1, [pc, #604]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008594:	4313      	orrs	r3, r2
 8008596:	604b      	str	r3, [r1, #4]
 8008598:	e018      	b.n	80085cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800859a:	4b95      	ldr	r3, [pc, #596]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a94      	ldr	r2, [pc, #592]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80085a0:	f023 0301 	bic.w	r3, r3, #1
 80085a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a6:	f7fa fa99 	bl	8002adc <HAL_GetTick>
 80085aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085ac:	e008      	b.n	80085c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085ae:	f7fa fa95 	bl	8002adc <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e2ed      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085c0:	4b8b      	ldr	r3, [pc, #556]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1f0      	bne.n	80085ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 80a9 	beq.w	800872c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085da:	4b85      	ldr	r3, [pc, #532]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085e4:	4b82      	ldr	r3, [pc, #520]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80085e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d007      	beq.n	8008600 <HAL_RCC_OscConfig+0x308>
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	2b18      	cmp	r3, #24
 80085f4:	d13a      	bne.n	800866c <HAL_RCC_OscConfig+0x374>
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d135      	bne.n	800866c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008600:	4b7b      	ldr	r3, [pc, #492]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_RCC_OscConfig+0x320>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	2b80      	cmp	r3, #128	; 0x80
 8008612:	d001      	beq.n	8008618 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e2c1      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008618:	f7fa fa90 	bl	8002b3c <HAL_GetREVID>
 800861c:	4603      	mov	r3, r0
 800861e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008622:	4293      	cmp	r3, r2
 8008624:	d817      	bhi.n	8008656 <HAL_RCC_OscConfig+0x35e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	2b20      	cmp	r3, #32
 800862c:	d108      	bne.n	8008640 <HAL_RCC_OscConfig+0x348>
 800862e:	4b70      	ldr	r3, [pc, #448]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008636:	4a6e      	ldr	r2, [pc, #440]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800863c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800863e:	e075      	b.n	800872c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008640:	4b6b      	ldr	r3, [pc, #428]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	069b      	lsls	r3, r3, #26
 800864e:	4968      	ldr	r1, [pc, #416]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008650:	4313      	orrs	r3, r2
 8008652:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008654:	e06a      	b.n	800872c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008656:	4b66      	ldr	r3, [pc, #408]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	061b      	lsls	r3, r3, #24
 8008664:	4962      	ldr	r1, [pc, #392]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008666:	4313      	orrs	r3, r2
 8008668:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800866a:	e05f      	b.n	800872c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d042      	beq.n	80086fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008674:	4b5e      	ldr	r3, [pc, #376]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a5d      	ldr	r2, [pc, #372]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 800867a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008680:	f7fa fa2c 	bl	8002adc <HAL_GetTick>
 8008684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008686:	e008      	b.n	800869a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008688:	f7fa fa28 	bl	8002adc <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d901      	bls.n	800869a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e280      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800869a:	4b55      	ldr	r3, [pc, #340]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0f0      	beq.n	8008688 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086a6:	f7fa fa49 	bl	8002b3c <HAL_GetREVID>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d817      	bhi.n	80086e4 <HAL_RCC_OscConfig+0x3ec>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	2b20      	cmp	r3, #32
 80086ba:	d108      	bne.n	80086ce <HAL_RCC_OscConfig+0x3d6>
 80086bc:	4b4c      	ldr	r3, [pc, #304]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086c4:	4a4a      	ldr	r2, [pc, #296]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80086c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086ca:	6053      	str	r3, [r2, #4]
 80086cc:	e02e      	b.n	800872c <HAL_RCC_OscConfig+0x434>
 80086ce:	4b48      	ldr	r3, [pc, #288]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	069b      	lsls	r3, r3, #26
 80086dc:	4944      	ldr	r1, [pc, #272]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	604b      	str	r3, [r1, #4]
 80086e2:	e023      	b.n	800872c <HAL_RCC_OscConfig+0x434>
 80086e4:	4b42      	ldr	r3, [pc, #264]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	061b      	lsls	r3, r3, #24
 80086f2:	493f      	ldr	r1, [pc, #252]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60cb      	str	r3, [r1, #12]
 80086f8:	e018      	b.n	800872c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086fa:	4b3d      	ldr	r3, [pc, #244]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a3c      	ldr	r2, [pc, #240]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008706:	f7fa f9e9 	bl	8002adc <HAL_GetTick>
 800870a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800870c:	e008      	b.n	8008720 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800870e:	f7fa f9e5 	bl	8002adc <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d901      	bls.n	8008720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e23d      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008720:	4b33      	ldr	r3, [pc, #204]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f0      	bne.n	800870e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0308 	and.w	r3, r3, #8
 8008734:	2b00      	cmp	r3, #0
 8008736:	d036      	beq.n	80087a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d019      	beq.n	8008774 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008740:	4b2b      	ldr	r3, [pc, #172]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008744:	4a2a      	ldr	r2, [pc, #168]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800874c:	f7fa f9c6 	bl	8002adc <HAL_GetTick>
 8008750:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008754:	f7fa f9c2 	bl	8002adc <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e21a      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008766:	4b22      	ldr	r3, [pc, #136]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f0      	beq.n	8008754 <HAL_RCC_OscConfig+0x45c>
 8008772:	e018      	b.n	80087a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008774:	4b1e      	ldr	r3, [pc, #120]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 8008776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008778:	4a1d      	ldr	r2, [pc, #116]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008780:	f7fa f9ac 	bl	8002adc <HAL_GetTick>
 8008784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008786:	e008      	b.n	800879a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008788:	f7fa f9a8 	bl	8002adc <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b02      	cmp	r3, #2
 8008794:	d901      	bls.n	800879a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e200      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800879a:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 800879c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f0      	bne.n	8008788 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d039      	beq.n	8008826 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01c      	beq.n	80087f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a0c      	ldr	r2, [pc, #48]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80087c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087c6:	f7fa f989 	bl	8002adc <HAL_GetTick>
 80087ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087ce:	f7fa f985 	bl	8002adc <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e1dd      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087e0:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <HAL_RCC_OscConfig+0x4f8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCC_OscConfig+0x4d6>
 80087ec:	e01b      	b.n	8008826 <HAL_RCC_OscConfig+0x52e>
 80087ee:	bf00      	nop
 80087f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087f4:	4b9b      	ldr	r3, [pc, #620]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a9a      	ldr	r2, [pc, #616]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80087fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008800:	f7fa f96c 	bl	8002adc <HAL_GetTick>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008808:	f7fa f968 	bl	8002adc <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e1c0      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800881a:	4b92      	ldr	r3, [pc, #584]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 8081 	beq.w	8008936 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008834:	4b8c      	ldr	r3, [pc, #560]	; (8008a68 <HAL_RCC_OscConfig+0x770>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a8b      	ldr	r2, [pc, #556]	; (8008a68 <HAL_RCC_OscConfig+0x770>)
 800883a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800883e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008840:	f7fa f94c 	bl	8002adc <HAL_GetTick>
 8008844:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008848:	f7fa f948 	bl	8002adc <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b64      	cmp	r3, #100	; 0x64
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e1a0      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800885a:	4b83      	ldr	r3, [pc, #524]	; (8008a68 <HAL_RCC_OscConfig+0x770>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0f0      	beq.n	8008848 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d106      	bne.n	800887c <HAL_RCC_OscConfig+0x584>
 800886e:	4b7d      	ldr	r3, [pc, #500]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008872:	4a7c      	ldr	r2, [pc, #496]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008874:	f043 0301 	orr.w	r3, r3, #1
 8008878:	6713      	str	r3, [r2, #112]	; 0x70
 800887a:	e02d      	b.n	80088d8 <HAL_RCC_OscConfig+0x5e0>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10c      	bne.n	800889e <HAL_RCC_OscConfig+0x5a6>
 8008884:	4b77      	ldr	r3, [pc, #476]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008888:	4a76      	ldr	r2, [pc, #472]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 800888a:	f023 0301 	bic.w	r3, r3, #1
 800888e:	6713      	str	r3, [r2, #112]	; 0x70
 8008890:	4b74      	ldr	r3, [pc, #464]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008894:	4a73      	ldr	r2, [pc, #460]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008896:	f023 0304 	bic.w	r3, r3, #4
 800889a:	6713      	str	r3, [r2, #112]	; 0x70
 800889c:	e01c      	b.n	80088d8 <HAL_RCC_OscConfig+0x5e0>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d10c      	bne.n	80088c0 <HAL_RCC_OscConfig+0x5c8>
 80088a6:	4b6f      	ldr	r3, [pc, #444]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	4a6e      	ldr	r2, [pc, #440]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80088ac:	f043 0304 	orr.w	r3, r3, #4
 80088b0:	6713      	str	r3, [r2, #112]	; 0x70
 80088b2:	4b6c      	ldr	r3, [pc, #432]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80088b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b6:	4a6b      	ldr	r2, [pc, #428]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6713      	str	r3, [r2, #112]	; 0x70
 80088be:	e00b      	b.n	80088d8 <HAL_RCC_OscConfig+0x5e0>
 80088c0:	4b68      	ldr	r3, [pc, #416]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80088c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c4:	4a67      	ldr	r2, [pc, #412]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	6713      	str	r3, [r2, #112]	; 0x70
 80088cc:	4b65      	ldr	r3, [pc, #404]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80088ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d0:	4a64      	ldr	r2, [pc, #400]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80088d2:	f023 0304 	bic.w	r3, r3, #4
 80088d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e0:	f7fa f8fc 	bl	8002adc <HAL_GetTick>
 80088e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088e6:	e00a      	b.n	80088fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088e8:	f7fa f8f8 	bl	8002adc <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e14e      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088fe:	4b59      	ldr	r3, [pc, #356]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0ee      	beq.n	80088e8 <HAL_RCC_OscConfig+0x5f0>
 800890a:	e014      	b.n	8008936 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800890c:	f7fa f8e6 	bl	8002adc <HAL_GetTick>
 8008910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008912:	e00a      	b.n	800892a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008914:	f7fa f8e2 	bl	8002adc <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008922:	4293      	cmp	r3, r2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e138      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800892a:	4b4e      	ldr	r3, [pc, #312]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1ee      	bne.n	8008914 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 812d 	beq.w	8008b9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008940:	4b48      	ldr	r3, [pc, #288]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008948:	2b18      	cmp	r3, #24
 800894a:	f000 80bd 	beq.w	8008ac8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	2b02      	cmp	r3, #2
 8008954:	f040 809e 	bne.w	8008a94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008958:	4b42      	ldr	r3, [pc, #264]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a41      	ldr	r2, [pc, #260]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 800895e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008964:	f7fa f8ba 	bl	8002adc <HAL_GetTick>
 8008968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800896a:	e008      	b.n	800897e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800896c:	f7fa f8b6 	bl	8002adc <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b02      	cmp	r3, #2
 8008978:	d901      	bls.n	800897e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e10e      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800897e:	4b39      	ldr	r3, [pc, #228]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f0      	bne.n	800896c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800898a:	4b36      	ldr	r3, [pc, #216]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 800898c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800898e:	4b37      	ldr	r3, [pc, #220]	; (8008a6c <HAL_RCC_OscConfig+0x774>)
 8008990:	4013      	ands	r3, r2
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800899a:	0112      	lsls	r2, r2, #4
 800899c:	430a      	orrs	r2, r1
 800899e:	4931      	ldr	r1, [pc, #196]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	628b      	str	r3, [r1, #40]	; 0x28
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	3b01      	subs	r3, #1
 80089aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	3b01      	subs	r3, #1
 80089b4:	025b      	lsls	r3, r3, #9
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089be:	3b01      	subs	r3, #1
 80089c0:	041b      	lsls	r3, r3, #16
 80089c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089c6:	431a      	orrs	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089cc:	3b01      	subs	r3, #1
 80089ce:	061b      	lsls	r3, r3, #24
 80089d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089d4:	4923      	ldr	r1, [pc, #140]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80089da:	4b22      	ldr	r3, [pc, #136]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	4a21      	ldr	r2, [pc, #132]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80089e0:	f023 0301 	bic.w	r3, r3, #1
 80089e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089e6:	4b1f      	ldr	r3, [pc, #124]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80089e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ea:	4b21      	ldr	r3, [pc, #132]	; (8008a70 <HAL_RCC_OscConfig+0x778>)
 80089ec:	4013      	ands	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089f2:	00d2      	lsls	r2, r2, #3
 80089f4:	491b      	ldr	r1, [pc, #108]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80089fa:	4b1a      	ldr	r3, [pc, #104]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	f023 020c 	bic.w	r2, r3, #12
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	4917      	ldr	r1, [pc, #92]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a0c:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	f023 0202 	bic.w	r2, r3, #2
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a18:	4912      	ldr	r1, [pc, #72]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a1e:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	4a0a      	ldr	r2, [pc, #40]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	4a07      	ldr	r2, [pc, #28]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a48:	f043 0301 	orr.w	r3, r3, #1
 8008a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a04      	ldr	r2, [pc, #16]	; (8008a64 <HAL_RCC_OscConfig+0x76c>)
 8008a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5a:	f7fa f83f 	bl	8002adc <HAL_GetTick>
 8008a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a60:	e011      	b.n	8008a86 <HAL_RCC_OscConfig+0x78e>
 8008a62:	bf00      	nop
 8008a64:	58024400 	.word	0x58024400
 8008a68:	58024800 	.word	0x58024800
 8008a6c:	fffffc0c 	.word	0xfffffc0c
 8008a70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a74:	f7fa f832 	bl	8002adc <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e08a      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a86:	4b47      	ldr	r3, [pc, #284]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0f0      	beq.n	8008a74 <HAL_RCC_OscConfig+0x77c>
 8008a92:	e082      	b.n	8008b9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a94:	4b43      	ldr	r3, [pc, #268]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a42      	ldr	r2, [pc, #264]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa0:	f7fa f81c 	bl	8002adc <HAL_GetTick>
 8008aa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa8:	f7fa f818 	bl	8002adc <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e070      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aba:	4b3a      	ldr	r3, [pc, #232]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f0      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x7b0>
 8008ac6:	e068      	b.n	8008b9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ac8:	4b36      	ldr	r3, [pc, #216]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ace:	4b35      	ldr	r3, [pc, #212]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d031      	beq.n	8008b40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f003 0203 	and.w	r2, r3, #3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d12a      	bne.n	8008b40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	091b      	lsrs	r3, r3, #4
 8008aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d122      	bne.n	8008b40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d11a      	bne.n	8008b40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	0a5b      	lsrs	r3, r3, #9
 8008b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d111      	bne.n	8008b40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	0c1b      	lsrs	r3, r3, #16
 8008b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d108      	bne.n	8008b40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	0e1b      	lsrs	r3, r3, #24
 8008b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d001      	beq.n	8008b44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e02b      	b.n	8008b9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b44:	4b17      	ldr	r3, [pc, #92]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b48:	08db      	lsrs	r3, r3, #3
 8008b4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d01f      	beq.n	8008b9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b5a:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5e:	4a11      	ldr	r2, [pc, #68]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008b60:	f023 0301 	bic.w	r3, r3, #1
 8008b64:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b66:	f7f9 ffb9 	bl	8002adc <HAL_GetTick>
 8008b6a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b6c:	bf00      	nop
 8008b6e:	f7f9 ffb5 	bl	8002adc <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d0f9      	beq.n	8008b6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <HAL_RCC_OscConfig+0x8b0>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b86:	00d2      	lsls	r2, r2, #3
 8008b88:	4906      	ldr	r1, [pc, #24]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008b8e:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	4a04      	ldr	r2, [pc, #16]	; (8008ba4 <HAL_RCC_OscConfig+0x8ac>)
 8008b94:	f043 0301 	orr.w	r3, r3, #1
 8008b98:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3730      	adds	r7, #48	; 0x30
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	58024400 	.word	0x58024400
 8008ba8:	ffff0007 	.word	0xffff0007

08008bac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e19c      	b.n	8008efa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bc0:	4b8a      	ldr	r3, [pc, #552]	; (8008dec <HAL_RCC_ClockConfig+0x240>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d910      	bls.n	8008bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bce:	4b87      	ldr	r3, [pc, #540]	; (8008dec <HAL_RCC_ClockConfig+0x240>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f023 020f 	bic.w	r2, r3, #15
 8008bd6:	4985      	ldr	r1, [pc, #532]	; (8008dec <HAL_RCC_ClockConfig+0x240>)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bde:	4b83      	ldr	r3, [pc, #524]	; (8008dec <HAL_RCC_ClockConfig+0x240>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d001      	beq.n	8008bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e184      	b.n	8008efa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d010      	beq.n	8008c1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	4b7b      	ldr	r3, [pc, #492]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d908      	bls.n	8008c1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c0c:	4b78      	ldr	r3, [pc, #480]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	4975      	ldr	r1, [pc, #468]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d010      	beq.n	8008c4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695a      	ldr	r2, [r3, #20]
 8008c2e:	4b70      	ldr	r3, [pc, #448]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d908      	bls.n	8008c4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c3a:	4b6d      	ldr	r3, [pc, #436]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	496a      	ldr	r1, [pc, #424]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d010      	beq.n	8008c7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	4b64      	ldr	r3, [pc, #400]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d908      	bls.n	8008c7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c68:	4b61      	ldr	r3, [pc, #388]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	495e      	ldr	r1, [pc, #376]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d010      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69da      	ldr	r2, [r3, #28]
 8008c8a:	4b59      	ldr	r3, [pc, #356]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d908      	bls.n	8008ca8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c96:	4b56      	ldr	r3, [pc, #344]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	4953      	ldr	r1, [pc, #332]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d010      	beq.n	8008cd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	4b4d      	ldr	r3, [pc, #308]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d908      	bls.n	8008cd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cc4:	4b4a      	ldr	r3, [pc, #296]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f023 020f 	bic.w	r2, r3, #15
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	4947      	ldr	r1, [pc, #284]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d055      	beq.n	8008d8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ce2:	4b43      	ldr	r3, [pc, #268]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	4940      	ldr	r1, [pc, #256]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d107      	bne.n	8008d0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cfc:	4b3c      	ldr	r3, [pc, #240]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d121      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e0f6      	b.n	8008efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d107      	bne.n	8008d24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d14:	4b36      	ldr	r3, [pc, #216]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d115      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e0ea      	b.n	8008efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d107      	bne.n	8008d3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d2c:	4b30      	ldr	r3, [pc, #192]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d109      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e0de      	b.n	8008efa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d3c:	4b2c      	ldr	r3, [pc, #176]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0d6      	b.n	8008efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d4c:	4b28      	ldr	r3, [pc, #160]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	f023 0207 	bic.w	r2, r3, #7
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	4925      	ldr	r1, [pc, #148]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5e:	f7f9 febd 	bl	8002adc <HAL_GetTick>
 8008d62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d64:	e00a      	b.n	8008d7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d66:	f7f9 feb9 	bl	8002adc <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d901      	bls.n	8008d7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e0be      	b.n	8008efa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d7c:	4b1c      	ldr	r3, [pc, #112]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d1eb      	bne.n	8008d66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d010      	beq.n	8008dbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	4b14      	ldr	r3, [pc, #80]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	f003 030f 	and.w	r3, r3, #15
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d208      	bcs.n	8008dbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008daa:	4b11      	ldr	r3, [pc, #68]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f023 020f 	bic.w	r2, r3, #15
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	490e      	ldr	r1, [pc, #56]	; (8008df0 <HAL_RCC_ClockConfig+0x244>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dbc:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <HAL_RCC_ClockConfig+0x240>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 030f 	and.w	r3, r3, #15
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d214      	bcs.n	8008df4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dca:	4b08      	ldr	r3, [pc, #32]	; (8008dec <HAL_RCC_ClockConfig+0x240>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f023 020f 	bic.w	r2, r3, #15
 8008dd2:	4906      	ldr	r1, [pc, #24]	; (8008dec <HAL_RCC_ClockConfig+0x240>)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dda:	4b04      	ldr	r3, [pc, #16]	; (8008dec <HAL_RCC_ClockConfig+0x240>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d005      	beq.n	8008df4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e086      	b.n	8008efa <HAL_RCC_ClockConfig+0x34e>
 8008dec:	52002000 	.word	0x52002000
 8008df0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d010      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	4b3f      	ldr	r3, [pc, #252]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d208      	bcs.n	8008e22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e10:	4b3c      	ldr	r3, [pc, #240]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	4939      	ldr	r1, [pc, #228]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d010      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695a      	ldr	r2, [r3, #20]
 8008e32:	4b34      	ldr	r3, [pc, #208]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d208      	bcs.n	8008e50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e3e:	4b31      	ldr	r3, [pc, #196]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	492e      	ldr	r1, [pc, #184]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d010      	beq.n	8008e7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	699a      	ldr	r2, [r3, #24]
 8008e60:	4b28      	ldr	r3, [pc, #160]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d208      	bcs.n	8008e7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e6c:	4b25      	ldr	r3, [pc, #148]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	4922      	ldr	r1, [pc, #136]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d010      	beq.n	8008eac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69da      	ldr	r2, [r3, #28]
 8008e8e:	4b1d      	ldr	r3, [pc, #116]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d208      	bcs.n	8008eac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e9a:	4b1a      	ldr	r3, [pc, #104]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	4917      	ldr	r1, [pc, #92]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008eac:	f000 f834 	bl	8008f18 <HAL_RCC_GetSysClockFreq>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	4b14      	ldr	r3, [pc, #80]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	4912      	ldr	r1, [pc, #72]	; (8008f08 <HAL_RCC_ClockConfig+0x35c>)
 8008ebe:	5ccb      	ldrb	r3, [r1, r3]
 8008ec0:	f003 031f 	and.w	r3, r3, #31
 8008ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008eca:	4b0e      	ldr	r3, [pc, #56]	; (8008f04 <HAL_RCC_ClockConfig+0x358>)
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	4a0d      	ldr	r2, [pc, #52]	; (8008f08 <HAL_RCC_ClockConfig+0x35c>)
 8008ed4:	5cd3      	ldrb	r3, [r2, r3]
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <HAL_RCC_ClockConfig+0x360>)
 8008ee2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ee4:	4a0a      	ldr	r2, [pc, #40]	; (8008f10 <HAL_RCC_ClockConfig+0x364>)
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008eea:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <HAL_RCC_ClockConfig+0x368>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f9 fdaa 	bl	8002a48 <HAL_InitTick>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	58024400 	.word	0x58024400
 8008f08:	0800f38c 	.word	0x0800f38c
 8008f0c:	24000004 	.word	0x24000004
 8008f10:	24000000 	.word	0x24000000
 8008f14:	240002e0 	.word	0x240002e0

08008f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b089      	sub	sp, #36	; 0x24
 8008f1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f1e:	4bb3      	ldr	r3, [pc, #716]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f26:	2b18      	cmp	r3, #24
 8008f28:	f200 8155 	bhi.w	80091d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f2c:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008f99 	.word	0x08008f99
 8008f38:	080091d7 	.word	0x080091d7
 8008f3c:	080091d7 	.word	0x080091d7
 8008f40:	080091d7 	.word	0x080091d7
 8008f44:	080091d7 	.word	0x080091d7
 8008f48:	080091d7 	.word	0x080091d7
 8008f4c:	080091d7 	.word	0x080091d7
 8008f50:	080091d7 	.word	0x080091d7
 8008f54:	08008fbf 	.word	0x08008fbf
 8008f58:	080091d7 	.word	0x080091d7
 8008f5c:	080091d7 	.word	0x080091d7
 8008f60:	080091d7 	.word	0x080091d7
 8008f64:	080091d7 	.word	0x080091d7
 8008f68:	080091d7 	.word	0x080091d7
 8008f6c:	080091d7 	.word	0x080091d7
 8008f70:	080091d7 	.word	0x080091d7
 8008f74:	08008fc5 	.word	0x08008fc5
 8008f78:	080091d7 	.word	0x080091d7
 8008f7c:	080091d7 	.word	0x080091d7
 8008f80:	080091d7 	.word	0x080091d7
 8008f84:	080091d7 	.word	0x080091d7
 8008f88:	080091d7 	.word	0x080091d7
 8008f8c:	080091d7 	.word	0x080091d7
 8008f90:	080091d7 	.word	0x080091d7
 8008f94:	08008fcb 	.word	0x08008fcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f98:	4b94      	ldr	r3, [pc, #592]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fa4:	4b91      	ldr	r3, [pc, #580]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	08db      	lsrs	r3, r3, #3
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	4a90      	ldr	r2, [pc, #576]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008fb6:	e111      	b.n	80091dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fb8:	4b8d      	ldr	r3, [pc, #564]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fba:	61bb      	str	r3, [r7, #24]
      break;
 8008fbc:	e10e      	b.n	80091dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008fbe:	4b8d      	ldr	r3, [pc, #564]	; (80091f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fc0:	61bb      	str	r3, [r7, #24]
      break;
 8008fc2:	e10b      	b.n	80091dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008fc4:	4b8c      	ldr	r3, [pc, #560]	; (80091f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008fc6:	61bb      	str	r3, [r7, #24]
      break;
 8008fc8:	e108      	b.n	80091dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fca:	4b88      	ldr	r3, [pc, #544]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008fd4:	4b85      	ldr	r3, [pc, #532]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	091b      	lsrs	r3, r3, #4
 8008fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fde:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fe0:	4b82      	ldr	r3, [pc, #520]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fea:	4b80      	ldr	r3, [pc, #512]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fee:	08db      	lsrs	r3, r3, #3
 8008ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 80e1 	beq.w	80091d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b02      	cmp	r3, #2
 8009012:	f000 8083 	beq.w	800911c <HAL_RCC_GetSysClockFreq+0x204>
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b02      	cmp	r3, #2
 800901a:	f200 80a1 	bhi.w	8009160 <HAL_RCC_GetSysClockFreq+0x248>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <HAL_RCC_GetSysClockFreq+0x114>
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d056      	beq.n	80090d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800902a:	e099      	b.n	8009160 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800902c:	4b6f      	ldr	r3, [pc, #444]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	d02d      	beq.n	8009094 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009038:	4b6c      	ldr	r3, [pc, #432]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	08db      	lsrs	r3, r3, #3
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	4a6b      	ldr	r2, [pc, #428]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009044:	fa22 f303 	lsr.w	r3, r2, r3
 8009048:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	ee07 3a90 	vmov	s15, r3
 8009050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009062:	4b62      	ldr	r3, [pc, #392]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906a:	ee07 3a90 	vmov	s15, r3
 800906e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009072:	ed97 6a02 	vldr	s12, [r7, #8]
 8009076:	eddf 5a61 	vldr	s11, [pc, #388]	; 80091fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800907a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009092:	e087      	b.n	80091a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a6:	4b51      	ldr	r3, [pc, #324]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80091fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80090be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090d6:	e065      	b.n	80091a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009204 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ea:	4b40      	ldr	r3, [pc, #256]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80090fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80091fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800911a:	e043      	b.n	80091a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009126:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009208 <HAL_RCC_GetSysClockFreq+0x2f0>
 800912a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912e:	4b2f      	ldr	r3, [pc, #188]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009142:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80091fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800915e:	e021      	b.n	80091a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009204 <HAL_RCC_GetSysClockFreq+0x2ec>
 800916e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009172:	4b1e      	ldr	r3, [pc, #120]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a02 	vldr	s12, [r7, #8]
 8009186:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80091fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091a4:	4b11      	ldr	r3, [pc, #68]	; (80091ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a8:	0a5b      	lsrs	r3, r3, #9
 80091aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ae:	3301      	adds	r3, #1
 80091b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	ee07 3a90 	vmov	s15, r3
 80091b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091c8:	ee17 3a90 	vmov	r3, s15
 80091cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80091ce:	e005      	b.n	80091dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61bb      	str	r3, [r7, #24]
      break;
 80091d4:	e002      	b.n	80091dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80091d6:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091d8:	61bb      	str	r3, [r7, #24]
      break;
 80091da:	bf00      	nop
  }

  return sysclockfreq;
 80091dc:	69bb      	ldr	r3, [r7, #24]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3724      	adds	r7, #36	; 0x24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	58024400 	.word	0x58024400
 80091f0:	03d09000 	.word	0x03d09000
 80091f4:	003d0900 	.word	0x003d0900
 80091f8:	007a1200 	.word	0x007a1200
 80091fc:	46000000 	.word	0x46000000
 8009200:	4c742400 	.word	0x4c742400
 8009204:	4a742400 	.word	0x4a742400
 8009208:	4af42400 	.word	0x4af42400

0800920c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009212:	f7ff fe81 	bl	8008f18 <HAL_RCC_GetSysClockFreq>
 8009216:	4602      	mov	r2, r0
 8009218:	4b10      	ldr	r3, [pc, #64]	; (800925c <HAL_RCC_GetHCLKFreq+0x50>)
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	0a1b      	lsrs	r3, r3, #8
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	490f      	ldr	r1, [pc, #60]	; (8009260 <HAL_RCC_GetHCLKFreq+0x54>)
 8009224:	5ccb      	ldrb	r3, [r1, r3]
 8009226:	f003 031f 	and.w	r3, r3, #31
 800922a:	fa22 f303 	lsr.w	r3, r2, r3
 800922e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009230:	4b0a      	ldr	r3, [pc, #40]	; (800925c <HAL_RCC_GetHCLKFreq+0x50>)
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	4a09      	ldr	r2, [pc, #36]	; (8009260 <HAL_RCC_GetHCLKFreq+0x54>)
 800923a:	5cd3      	ldrb	r3, [r2, r3]
 800923c:	f003 031f 	and.w	r3, r3, #31
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	fa22 f303 	lsr.w	r3, r2, r3
 8009246:	4a07      	ldr	r2, [pc, #28]	; (8009264 <HAL_RCC_GetHCLKFreq+0x58>)
 8009248:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800924a:	4a07      	ldr	r2, [pc, #28]	; (8009268 <HAL_RCC_GetHCLKFreq+0x5c>)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009250:	4b04      	ldr	r3, [pc, #16]	; (8009264 <HAL_RCC_GetHCLKFreq+0x58>)
 8009252:	681b      	ldr	r3, [r3, #0]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	58024400 	.word	0x58024400
 8009260:	0800f38c 	.word	0x0800f38c
 8009264:	24000004 	.word	0x24000004
 8009268:	24000000 	.word	0x24000000

0800926c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009270:	f7ff ffcc 	bl	800920c <HAL_RCC_GetHCLKFreq>
 8009274:	4602      	mov	r2, r0
 8009276:	4b06      	ldr	r3, [pc, #24]	; (8009290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	091b      	lsrs	r3, r3, #4
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	4904      	ldr	r1, [pc, #16]	; (8009294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009282:	5ccb      	ldrb	r3, [r1, r3]
 8009284:	f003 031f 	and.w	r3, r3, #31
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800928c:	4618      	mov	r0, r3
 800928e:	bd80      	pop	{r7, pc}
 8009290:	58024400 	.word	0x58024400
 8009294:	0800f38c 	.word	0x0800f38c

08009298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800929c:	f7ff ffb6 	bl	800920c <HAL_RCC_GetHCLKFreq>
 80092a0:	4602      	mov	r2, r0
 80092a2:	4b06      	ldr	r3, [pc, #24]	; (80092bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	4904      	ldr	r1, [pc, #16]	; (80092c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092ae:	5ccb      	ldrb	r3, [r1, r3]
 80092b0:	f003 031f 	and.w	r3, r3, #31
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	58024400 	.word	0x58024400
 80092c0:	0800f38c 	.word	0x0800f38c

080092c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092c8:	b0ca      	sub	sp, #296	; 0x128
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092d0:	2300      	movs	r3, #0
 80092d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092d6:	2300      	movs	r3, #0
 80092d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80092e8:	2500      	movs	r5, #0
 80092ea:	ea54 0305 	orrs.w	r3, r4, r5
 80092ee:	d049      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80092f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092fa:	d02f      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80092fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009300:	d828      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009306:	d01a      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800930c:	d822      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009316:	d007      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009318:	e01c      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931a:	4bb8      	ldr	r3, [pc, #736]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800931c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931e:	4ab7      	ldr	r2, [pc, #732]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009324:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009326:	e01a      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800932c:	3308      	adds	r3, #8
 800932e:	2102      	movs	r1, #2
 8009330:	4618      	mov	r0, r3
 8009332:	f002 fb61 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009336:	4603      	mov	r3, r0
 8009338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800933c:	e00f      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800933e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009342:	3328      	adds	r3, #40	; 0x28
 8009344:	2102      	movs	r1, #2
 8009346:	4618      	mov	r0, r3
 8009348:	f002 fc08 	bl	800bb5c <RCCEx_PLL3_Config>
 800934c:	4603      	mov	r3, r0
 800934e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009352:	e004      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800935a:	e000      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800935c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800935e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009366:	4ba5      	ldr	r3, [pc, #660]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800936e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009374:	4aa1      	ldr	r2, [pc, #644]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009376:	430b      	orrs	r3, r1
 8009378:	6513      	str	r3, [r2, #80]	; 0x50
 800937a:	e003      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009390:	f04f 0900 	mov.w	r9, #0
 8009394:	ea58 0309 	orrs.w	r3, r8, r9
 8009398:	d047      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800939a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d82a      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093a4:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093c1 	.word	0x080093c1
 80093b0:	080093cf 	.word	0x080093cf
 80093b4:	080093e5 	.word	0x080093e5
 80093b8:	08009403 	.word	0x08009403
 80093bc:	08009403 	.word	0x08009403
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c0:	4b8e      	ldr	r3, [pc, #568]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	4a8d      	ldr	r2, [pc, #564]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093cc:	e01a      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d2:	3308      	adds	r3, #8
 80093d4:	2100      	movs	r1, #0
 80093d6:	4618      	mov	r0, r3
 80093d8:	f002 fb0e 	bl	800b9f8 <RCCEx_PLL2_Config>
 80093dc:	4603      	mov	r3, r0
 80093de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093e2:	e00f      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e8:	3328      	adds	r3, #40	; 0x28
 80093ea:	2100      	movs	r1, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f002 fbb5 	bl	800bb5c <RCCEx_PLL3_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093f8:	e004      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009400:	e000      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800940c:	4b7b      	ldr	r3, [pc, #492]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800940e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009410:	f023 0107 	bic.w	r1, r3, #7
 8009414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941a:	4a78      	ldr	r2, [pc, #480]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800941c:	430b      	orrs	r3, r1
 800941e:	6513      	str	r3, [r2, #80]	; 0x50
 8009420:	e003      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800942a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009436:	f04f 0b00 	mov.w	fp, #0
 800943a:	ea5a 030b 	orrs.w	r3, sl, fp
 800943e:	d04c      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800944a:	d030      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800944c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009450:	d829      	bhi.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009452:	2bc0      	cmp	r3, #192	; 0xc0
 8009454:	d02d      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009456:	2bc0      	cmp	r3, #192	; 0xc0
 8009458:	d825      	bhi.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800945a:	2b80      	cmp	r3, #128	; 0x80
 800945c:	d018      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800945e:	2b80      	cmp	r3, #128	; 0x80
 8009460:	d821      	bhi.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009466:	2b40      	cmp	r3, #64	; 0x40
 8009468:	d007      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800946a:	e01c      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800946c:	4b63      	ldr	r3, [pc, #396]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009470:	4a62      	ldr	r2, [pc, #392]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009478:	e01c      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800947a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947e:	3308      	adds	r3, #8
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f002 fab8 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009488:	4603      	mov	r3, r0
 800948a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800948e:	e011      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009494:	3328      	adds	r3, #40	; 0x28
 8009496:	2100      	movs	r1, #0
 8009498:	4618      	mov	r0, r3
 800949a:	f002 fb5f 	bl	800bb5c <RCCEx_PLL3_Config>
 800949e:	4603      	mov	r3, r0
 80094a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094a4:	e006      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094ac:	e002      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094ae:	bf00      	nop
 80094b0:	e000      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80094bc:	4b4f      	ldr	r3, [pc, #316]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80094c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ca:	4a4c      	ldr	r2, [pc, #304]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094cc:	430b      	orrs	r3, r1
 80094ce:	6513      	str	r3, [r2, #80]	; 0x50
 80094d0:	e003      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80094e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80094ea:	2300      	movs	r3, #0
 80094ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80094f4:	460b      	mov	r3, r1
 80094f6:	4313      	orrs	r3, r2
 80094f8:	d053      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80094fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009506:	d035      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800950c:	d82e      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800950e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009512:	d031      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009514:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009518:	d828      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800951a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800951e:	d01a      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009524:	d822      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800952a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800952e:	d007      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009530:	e01c      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009532:	4b32      	ldr	r3, [pc, #200]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009536:	4a31      	ldr	r2, [pc, #196]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800953c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800953e:	e01c      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009544:	3308      	adds	r3, #8
 8009546:	2100      	movs	r1, #0
 8009548:	4618      	mov	r0, r3
 800954a:	f002 fa55 	bl	800b9f8 <RCCEx_PLL2_Config>
 800954e:	4603      	mov	r3, r0
 8009550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009554:	e011      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955a:	3328      	adds	r3, #40	; 0x28
 800955c:	2100      	movs	r1, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f002 fafc 	bl	800bb5c <RCCEx_PLL3_Config>
 8009564:	4603      	mov	r3, r0
 8009566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800956a:	e006      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009572:	e002      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009574:	bf00      	nop
 8009576:	e000      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800957a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10b      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009582:	4b1e      	ldr	r3, [pc, #120]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009586:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800958a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009592:	4a1a      	ldr	r2, [pc, #104]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009594:	430b      	orrs	r3, r1
 8009596:	6593      	str	r3, [r2, #88]	; 0x58
 8009598:	e003      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800959e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80095ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095b2:	2300      	movs	r3, #0
 80095b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80095bc:	460b      	mov	r3, r1
 80095be:	4313      	orrs	r3, r2
 80095c0:	d056      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80095c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095ce:	d038      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80095d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095d4:	d831      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095da:	d034      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80095dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095e0:	d82b      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095e6:	d01d      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80095e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ec:	d825      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d006      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80095f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095f6:	d00a      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80095f8:	e01f      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095fa:	bf00      	nop
 80095fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009600:	4ba2      	ldr	r3, [pc, #648]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	4aa1      	ldr	r2, [pc, #644]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800960a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800960c:	e01c      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800960e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009612:	3308      	adds	r3, #8
 8009614:	2100      	movs	r1, #0
 8009616:	4618      	mov	r0, r3
 8009618:	f002 f9ee 	bl	800b9f8 <RCCEx_PLL2_Config>
 800961c:	4603      	mov	r3, r0
 800961e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009622:	e011      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009628:	3328      	adds	r3, #40	; 0x28
 800962a:	2100      	movs	r1, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f002 fa95 	bl	800bb5c <RCCEx_PLL3_Config>
 8009632:	4603      	mov	r3, r0
 8009634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009638:	e006      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009640:	e002      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009642:	bf00      	nop
 8009644:	e000      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10b      	bne.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009650:	4b8e      	ldr	r3, [pc, #568]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009654:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009660:	4a8a      	ldr	r2, [pc, #552]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009662:	430b      	orrs	r3, r1
 8009664:	6593      	str	r3, [r2, #88]	; 0x58
 8009666:	e003      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800966c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800967c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009680:	2300      	movs	r3, #0
 8009682:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009686:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800968a:	460b      	mov	r3, r1
 800968c:	4313      	orrs	r3, r2
 800968e:	d03a      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009696:	2b30      	cmp	r3, #48	; 0x30
 8009698:	d01f      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800969a:	2b30      	cmp	r3, #48	; 0x30
 800969c:	d819      	bhi.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800969e:	2b20      	cmp	r3, #32
 80096a0:	d00c      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	d815      	bhi.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d019      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80096aa:	2b10      	cmp	r3, #16
 80096ac:	d111      	bne.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ae:	4b77      	ldr	r3, [pc, #476]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b2:	4a76      	ldr	r2, [pc, #472]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80096ba:	e011      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c0:	3308      	adds	r3, #8
 80096c2:	2102      	movs	r1, #2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f002 f997 	bl	800b9f8 <RCCEx_PLL2_Config>
 80096ca:	4603      	mov	r3, r0
 80096cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80096d0:	e006      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096d8:	e002      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80096da:	bf00      	nop
 80096dc:	e000      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80096de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096e8:	4b68      	ldr	r3, [pc, #416]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f6:	4a65      	ldr	r2, [pc, #404]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f8:	430b      	orrs	r3, r1
 80096fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80096fc:	e003      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009702:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009712:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009716:	2300      	movs	r3, #0
 8009718:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800971c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009720:	460b      	mov	r3, r1
 8009722:	4313      	orrs	r3, r2
 8009724:	d051      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009730:	d035      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009736:	d82e      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009738:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800973c:	d031      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800973e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009742:	d828      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009748:	d01a      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800974a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800974e:	d822      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009758:	d007      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800975a:	e01c      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800975c:	4b4b      	ldr	r3, [pc, #300]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	4a4a      	ldr	r2, [pc, #296]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009768:	e01c      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976e:	3308      	adds	r3, #8
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f002 f940 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800977e:	e011      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009784:	3328      	adds	r3, #40	; 0x28
 8009786:	2100      	movs	r1, #0
 8009788:	4618      	mov	r0, r3
 800978a:	f002 f9e7 	bl	800bb5c <RCCEx_PLL3_Config>
 800978e:	4603      	mov	r3, r0
 8009790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009794:	e006      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800979c:	e002      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80097ac:	4b37      	ldr	r3, [pc, #220]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80097b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ba:	4a34      	ldr	r2, [pc, #208]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097bc:	430b      	orrs	r3, r1
 80097be:	6513      	str	r3, [r2, #80]	; 0x50
 80097c0:	e003      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80097d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097da:	2300      	movs	r3, #0
 80097dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80097e4:	460b      	mov	r3, r1
 80097e6:	4313      	orrs	r3, r2
 80097e8:	d056      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097f4:	d033      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80097f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097fa:	d82c      	bhi.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009800:	d02f      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009802:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009806:	d826      	bhi.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009808:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800980c:	d02b      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800980e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009812:	d820      	bhi.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009818:	d012      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800981a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800981e:	d81a      	bhi.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d022      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009828:	d115      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800982a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982e:	3308      	adds	r3, #8
 8009830:	2101      	movs	r1, #1
 8009832:	4618      	mov	r0, r3
 8009834:	f002 f8e0 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009838:	4603      	mov	r3, r0
 800983a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800983e:	e015      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009844:	3328      	adds	r3, #40	; 0x28
 8009846:	2101      	movs	r1, #1
 8009848:	4618      	mov	r0, r3
 800984a:	f002 f987 	bl	800bb5c <RCCEx_PLL3_Config>
 800984e:	4603      	mov	r3, r0
 8009850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009854:	e00a      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800985c:	e006      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800985e:	bf00      	nop
 8009860:	e004      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009862:	bf00      	nop
 8009864:	e002      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009866:	bf00      	nop
 8009868:	e000      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800986a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10d      	bne.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009874:	4b05      	ldr	r3, [pc, #20]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009878:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800987c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009882:	4a02      	ldr	r2, [pc, #8]	; (800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009884:	430b      	orrs	r3, r1
 8009886:	6513      	str	r3, [r2, #80]	; 0x50
 8009888:	e006      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800988a:	bf00      	nop
 800988c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009894:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80098a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098a8:	2300      	movs	r3, #0
 80098aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4313      	orrs	r3, r2
 80098b6:	d055      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80098b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098c4:	d033      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80098c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098ca:	d82c      	bhi.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d0:	d02f      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80098d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d6:	d826      	bhi.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098dc:	d02b      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80098de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098e2:	d820      	bhi.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e8:	d012      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80098ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ee:	d81a      	bhi.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d022      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80098f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098f8:	d115      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fe:	3308      	adds	r3, #8
 8009900:	2101      	movs	r1, #1
 8009902:	4618      	mov	r0, r3
 8009904:	f002 f878 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009908:	4603      	mov	r3, r0
 800990a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800990e:	e015      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009914:	3328      	adds	r3, #40	; 0x28
 8009916:	2101      	movs	r1, #1
 8009918:	4618      	mov	r0, r3
 800991a:	f002 f91f 	bl	800bb5c <RCCEx_PLL3_Config>
 800991e:	4603      	mov	r3, r0
 8009920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009924:	e00a      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800992c:	e006      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800992e:	bf00      	nop
 8009930:	e004      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009932:	bf00      	nop
 8009934:	e002      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009936:	bf00      	nop
 8009938:	e000      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800993a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800993c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10b      	bne.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009944:	4ba3      	ldr	r3, [pc, #652]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009948:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800994c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009954:	4a9f      	ldr	r2, [pc, #636]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009956:	430b      	orrs	r3, r1
 8009958:	6593      	str	r3, [r2, #88]	; 0x58
 800995a:	e003      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009960:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009974:	2300      	movs	r3, #0
 8009976:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800997a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800997e:	460b      	mov	r3, r1
 8009980:	4313      	orrs	r3, r2
 8009982:	d037      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800998e:	d00e      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009994:	d816      	bhi.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d018      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800999a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800999e:	d111      	bne.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a0:	4b8c      	ldr	r3, [pc, #560]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	4a8b      	ldr	r2, [pc, #556]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099ac:	e00f      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b2:	3308      	adds	r3, #8
 80099b4:	2101      	movs	r1, #1
 80099b6:	4618      	mov	r0, r3
 80099b8:	f002 f81e 	bl	800b9f8 <RCCEx_PLL2_Config>
 80099bc:	4603      	mov	r3, r0
 80099be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099c2:	e004      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099ca:	e000      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80099cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10a      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099d6:	4b7f      	ldr	r3, [pc, #508]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099da:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e4:	4a7b      	ldr	r2, [pc, #492]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e6:	430b      	orrs	r3, r1
 80099e8:	6513      	str	r3, [r2, #80]	; 0x50
 80099ea:	e003      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a04:	2300      	movs	r3, #0
 8009a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4313      	orrs	r3, r2
 8009a12:	d039      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d81c      	bhi.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009a1e:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a61 	.word	0x08009a61
 8009a28:	08009a35 	.word	0x08009a35
 8009a2c:	08009a43 	.word	0x08009a43
 8009a30:	08009a61 	.word	0x08009a61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a34:	4b67      	ldr	r3, [pc, #412]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a38:	4a66      	ldr	r2, [pc, #408]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a40:	e00f      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a46:	3308      	adds	r3, #8
 8009a48:	2102      	movs	r1, #2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f001 ffd4 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a56:	e004      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a5e:	e000      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10a      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009a6a:	4b5a      	ldr	r3, [pc, #360]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6e:	f023 0103 	bic.w	r1, r3, #3
 8009a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a78:	4a56      	ldr	r2, [pc, #344]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7a:	430b      	orrs	r3, r1
 8009a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a7e:	e003      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	f000 809f 	beq.w	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009aaa:	4b4b      	ldr	r3, [pc, #300]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a4a      	ldr	r2, [pc, #296]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ab6:	f7f9 f811 	bl	8002adc <HAL_GetTick>
 8009aba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009abe:	e00b      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ac0:	f7f9 f80c 	bl	8002adc <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b64      	cmp	r3, #100	; 0x64
 8009ace:	d903      	bls.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ad6:	e005      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ad8:	4b3f      	ldr	r3, [pc, #252]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0ed      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d179      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009aec:	4b39      	ldr	r3, [pc, #228]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009af8:	4053      	eors	r3, r2
 8009afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d015      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b02:	4b34      	ldr	r3, [pc, #208]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b0e:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b12:	4a30      	ldr	r2, [pc, #192]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b18:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b1a:	4b2e      	ldr	r3, [pc, #184]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1e:	4a2d      	ldr	r2, [pc, #180]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b24:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b26:	4a2b      	ldr	r2, [pc, #172]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b3a:	d118      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3c:	f7f8 ffce 	bl	8002adc <HAL_GetTick>
 8009b40:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b44:	e00d      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b46:	f7f8 ffc9 	bl	8002adc <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009b50:	1ad2      	subs	r2, r2, r3
 8009b52:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d903      	bls.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009b60:	e005      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b62:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d0eb      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d129      	bne.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b86:	d10e      	bne.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009b88:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b98:	091a      	lsrs	r2, r3, #4
 8009b9a:	4b10      	ldr	r3, [pc, #64]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	4a0d      	ldr	r2, [pc, #52]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	6113      	str	r3, [r2, #16]
 8009ba4:	e005      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	4a0a      	ldr	r2, [pc, #40]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009bb0:	6113      	str	r3, [r2, #16]
 8009bb2:	4b08      	ldr	r3, [pc, #32]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bc2:	4a04      	ldr	r2, [pc, #16]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bc4:	430b      	orrs	r3, r1
 8009bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8009bc8:	e00e      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009bd2:	e009      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	58024800 	.word	0x58024800
 8009bdc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009be4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f002 0301 	and.w	r3, r2, #1
 8009bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	f000 8089 	beq.w	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c10:	2b28      	cmp	r3, #40	; 0x28
 8009c12:	d86b      	bhi.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009c14:	a201      	add	r2, pc, #4	; (adr r2, 8009c1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1a:	bf00      	nop
 8009c1c:	08009cf5 	.word	0x08009cf5
 8009c20:	08009ced 	.word	0x08009ced
 8009c24:	08009ced 	.word	0x08009ced
 8009c28:	08009ced 	.word	0x08009ced
 8009c2c:	08009ced 	.word	0x08009ced
 8009c30:	08009ced 	.word	0x08009ced
 8009c34:	08009ced 	.word	0x08009ced
 8009c38:	08009ced 	.word	0x08009ced
 8009c3c:	08009cc1 	.word	0x08009cc1
 8009c40:	08009ced 	.word	0x08009ced
 8009c44:	08009ced 	.word	0x08009ced
 8009c48:	08009ced 	.word	0x08009ced
 8009c4c:	08009ced 	.word	0x08009ced
 8009c50:	08009ced 	.word	0x08009ced
 8009c54:	08009ced 	.word	0x08009ced
 8009c58:	08009ced 	.word	0x08009ced
 8009c5c:	08009cd7 	.word	0x08009cd7
 8009c60:	08009ced 	.word	0x08009ced
 8009c64:	08009ced 	.word	0x08009ced
 8009c68:	08009ced 	.word	0x08009ced
 8009c6c:	08009ced 	.word	0x08009ced
 8009c70:	08009ced 	.word	0x08009ced
 8009c74:	08009ced 	.word	0x08009ced
 8009c78:	08009ced 	.word	0x08009ced
 8009c7c:	08009cf5 	.word	0x08009cf5
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009ced 	.word	0x08009ced
 8009c88:	08009ced 	.word	0x08009ced
 8009c8c:	08009ced 	.word	0x08009ced
 8009c90:	08009ced 	.word	0x08009ced
 8009c94:	08009ced 	.word	0x08009ced
 8009c98:	08009ced 	.word	0x08009ced
 8009c9c:	08009cf5 	.word	0x08009cf5
 8009ca0:	08009ced 	.word	0x08009ced
 8009ca4:	08009ced 	.word	0x08009ced
 8009ca8:	08009ced 	.word	0x08009ced
 8009cac:	08009ced 	.word	0x08009ced
 8009cb0:	08009ced 	.word	0x08009ced
 8009cb4:	08009ced 	.word	0x08009ced
 8009cb8:	08009ced 	.word	0x08009ced
 8009cbc:	08009cf5 	.word	0x08009cf5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc4:	3308      	adds	r3, #8
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f001 fe95 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009cd4:	e00f      	b.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cda:	3328      	adds	r3, #40	; 0x28
 8009cdc:	2101      	movs	r1, #1
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f001 ff3c 	bl	800bb5c <RCCEx_PLL3_Config>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009cea:	e004      	b.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cf2:	e000      	b.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009cfe:	4bbf      	ldr	r3, [pc, #764]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d02:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d0c:	4abb      	ldr	r2, [pc, #748]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d0e:	430b      	orrs	r3, r1
 8009d10:	6553      	str	r3, [r2, #84]	; 0x54
 8009d12:	e003      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f002 0302 	and.w	r3, r2, #2
 8009d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009d36:	460b      	mov	r3, r1
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	d041      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d824      	bhi.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009d46:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4c:	08009d99 	.word	0x08009d99
 8009d50:	08009d65 	.word	0x08009d65
 8009d54:	08009d7b 	.word	0x08009d7b
 8009d58:	08009d99 	.word	0x08009d99
 8009d5c:	08009d99 	.word	0x08009d99
 8009d60:	08009d99 	.word	0x08009d99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d68:	3308      	adds	r3, #8
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f001 fe43 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d78:	e00f      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7e:	3328      	adds	r3, #40	; 0x28
 8009d80:	2101      	movs	r1, #1
 8009d82:	4618      	mov	r0, r3
 8009d84:	f001 feea 	bl	800bb5c <RCCEx_PLL3_Config>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d8e:	e004      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d96:	e000      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10a      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009da2:	4b96      	ldr	r3, [pc, #600]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da6:	f023 0107 	bic.w	r1, r3, #7
 8009daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009db0:	4a92      	ldr	r2, [pc, #584]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009db2:	430b      	orrs	r3, r1
 8009db4:	6553      	str	r3, [r2, #84]	; 0x54
 8009db6:	e003      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f002 0304 	and.w	r3, r2, #4
 8009dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	d044      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009de8:	2b05      	cmp	r3, #5
 8009dea:	d825      	bhi.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e41 	.word	0x08009e41
 8009df8:	08009e0d 	.word	0x08009e0d
 8009dfc:	08009e23 	.word	0x08009e23
 8009e00:	08009e41 	.word	0x08009e41
 8009e04:	08009e41 	.word	0x08009e41
 8009e08:	08009e41 	.word	0x08009e41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e10:	3308      	adds	r3, #8
 8009e12:	2101      	movs	r1, #1
 8009e14:	4618      	mov	r0, r3
 8009e16:	f001 fdef 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e20:	e00f      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e26:	3328      	adds	r3, #40	; 0x28
 8009e28:	2101      	movs	r1, #1
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 fe96 	bl	800bb5c <RCCEx_PLL3_Config>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e36:	e004      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e3e:	e000      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10b      	bne.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e4a:	4b6c      	ldr	r3, [pc, #432]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4e:	f023 0107 	bic.w	r1, r3, #7
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e5a:	4a68      	ldr	r2, [pc, #416]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8009e60:	e003      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	f002 0320 	and.w	r3, r2, #32
 8009e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e84:	460b      	mov	r3, r1
 8009e86:	4313      	orrs	r3, r2
 8009e88:	d055      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e96:	d033      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e9c:	d82c      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ea2:	d02f      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ea8:	d826      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009eaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009eae:	d02b      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009eb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009eb4:	d820      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eba:	d012      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ec0:	d81a      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d022      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eca:	d115      	bne.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fd8f 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ee0:	e015      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee6:	3328      	adds	r3, #40	; 0x28
 8009ee8:	2102      	movs	r1, #2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f001 fe36 	bl	800bb5c <RCCEx_PLL3_Config>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ef6:	e00a      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009efe:	e006      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f00:	bf00      	nop
 8009f02:	e004      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f04:	bf00      	nop
 8009f06:	e002      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f08:	bf00      	nop
 8009f0a:	e000      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10b      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f16:	4b39      	ldr	r3, [pc, #228]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f26:	4a35      	ldr	r2, [pc, #212]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6553      	str	r3, [r2, #84]	; 0x54
 8009f2c:	e003      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f46:	2300      	movs	r3, #0
 8009f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4313      	orrs	r3, r2
 8009f54:	d058      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f62:	d033      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009f64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f68:	d82c      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f6e:	d02f      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f74:	d826      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f7a:	d02b      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f80:	d820      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f86:	d012      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f8c:	d81a      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d022      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f96:	d115      	bne.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f001 fd29 	bl	800b9f8 <RCCEx_PLL2_Config>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009fac:	e015      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb2:	3328      	adds	r3, #40	; 0x28
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f001 fdd0 	bl	800bb5c <RCCEx_PLL3_Config>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009fc2:	e00a      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fca:	e006      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fcc:	bf00      	nop
 8009fce:	e004      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fd0:	bf00      	nop
 8009fd2:	e002      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fd4:	bf00      	nop
 8009fd6:	e000      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10e      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009fe2:	4b06      	ldr	r3, [pc, #24]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ff2:	4a02      	ldr	r2, [pc, #8]	; (8009ffc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8009ff8:	e006      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009ffa:	bf00      	nop
 8009ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a004:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a018:	2300      	movs	r3, #0
 800a01a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a01e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a022:	460b      	mov	r3, r1
 800a024:	4313      	orrs	r3, r2
 800a026:	d055      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a02c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a030:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a034:	d033      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a036:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a03a:	d82c      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a03c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a040:	d02f      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a046:	d826      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a048:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a04c:	d02b      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a04e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a052:	d820      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a058:	d012      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a05a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a05e:	d81a      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a060:	2b00      	cmp	r3, #0
 800a062:	d022      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a068:	d115      	bne.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06e:	3308      	adds	r3, #8
 800a070:	2100      	movs	r1, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fcc0 	bl	800b9f8 <RCCEx_PLL2_Config>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a07e:	e015      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a084:	3328      	adds	r3, #40	; 0x28
 800a086:	2102      	movs	r1, #2
 800a088:	4618      	mov	r0, r3
 800a08a:	f001 fd67 	bl	800bb5c <RCCEx_PLL3_Config>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a094:	e00a      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a09c:	e006      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a09e:	bf00      	nop
 800a0a0:	e004      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0a2:	bf00      	nop
 800a0a4:	e002      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0a6:	bf00      	nop
 800a0a8:	e000      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10b      	bne.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0b4:	4ba1      	ldr	r3, [pc, #644]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0c4:	4a9d      	ldr	r2, [pc, #628]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0c6:	430b      	orrs	r3, r1
 800a0c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a0ca:	e003      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f002 0308 	and.w	r3, r2, #8
 800a0e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	d01e      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a100:	d10c      	bne.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a106:	3328      	adds	r3, #40	; 0x28
 800a108:	2102      	movs	r1, #2
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 fd26 	bl	800bb5c <RCCEx_PLL3_Config>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a11c:	4b87      	ldr	r3, [pc, #540]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a120:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a12c:	4a83      	ldr	r2, [pc, #524]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a12e:	430b      	orrs	r3, r1
 800a130:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	f002 0310 	and.w	r3, r2, #16
 800a13e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a142:	2300      	movs	r3, #0
 800a144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a148:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a14c:	460b      	mov	r3, r1
 800a14e:	4313      	orrs	r3, r2
 800a150:	d01e      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a15e:	d10c      	bne.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a164:	3328      	adds	r3, #40	; 0x28
 800a166:	2102      	movs	r1, #2
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 fcf7 	bl	800bb5c <RCCEx_PLL3_Config>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a17a:	4b70      	ldr	r3, [pc, #448]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a17e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a18a:	4a6c      	ldr	r2, [pc, #432]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a18c:	430b      	orrs	r3, r1
 800a18e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a19c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	d03e      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1bc:	d022      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a1be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1c2:	d81b      	bhi.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d003      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a1c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1cc:	d00b      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a1ce:	e015      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 fc0d 	bl	800b9f8 <RCCEx_PLL2_Config>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a1e4:	e00f      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ea:	3328      	adds	r3, #40	; 0x28
 800a1ec:	2102      	movs	r1, #2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fcb4 	bl	800bb5c <RCCEx_PLL3_Config>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a1fa:	e004      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a202:	e000      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a204:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10b      	bne.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a20e:	4b4b      	ldr	r3, [pc, #300]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a212:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a21e:	4a47      	ldr	r2, [pc, #284]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a220:	430b      	orrs	r3, r1
 800a222:	6593      	str	r3, [r2, #88]	; 0x58
 800a224:	e003      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a22a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a23a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a23c:	2300      	movs	r3, #0
 800a23e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a240:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a244:	460b      	mov	r3, r1
 800a246:	4313      	orrs	r3, r2
 800a248:	d03b      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a252:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a256:	d01f      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a25c:	d818      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a25e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a262:	d003      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a268:	d007      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a26a:	e011      	b.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a26c:	4b33      	ldr	r3, [pc, #204]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	4a32      	ldr	r2, [pc, #200]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a278:	e00f      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a27e:	3328      	adds	r3, #40	; 0x28
 800a280:	2101      	movs	r1, #1
 800a282:	4618      	mov	r0, r3
 800a284:	f001 fc6a 	bl	800bb5c <RCCEx_PLL3_Config>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a28e:	e004      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a296:	e000      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10b      	bne.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2a2:	4b26      	ldr	r3, [pc, #152]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b2:	4a22      	ldr	r2, [pc, #136]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6553      	str	r3, [r2, #84]	; 0x54
 800a2b8:	e003      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a2ce:	673b      	str	r3, [r7, #112]	; 0x70
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	677b      	str	r3, [r7, #116]	; 0x74
 800a2d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	d034      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ec:	d007      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a2ee:	e011      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f0:	4b12      	ldr	r3, [pc, #72]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	4a11      	ldr	r2, [pc, #68]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a2fc:	e00e      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a302:	3308      	adds	r3, #8
 800a304:	2102      	movs	r1, #2
 800a306:	4618      	mov	r0, r3
 800a308:	f001 fb76 	bl	800b9f8 <RCCEx_PLL2_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a312:	e003      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a31c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10d      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a332:	4a02      	ldr	r2, [pc, #8]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a334:	430b      	orrs	r3, r1
 800a336:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a338:	e006      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a33a:	bf00      	nop
 800a33c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a340:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a344:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a354:	66bb      	str	r3, [r7, #104]	; 0x68
 800a356:	2300      	movs	r3, #0
 800a358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a35a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a35e:	460b      	mov	r3, r1
 800a360:	4313      	orrs	r3, r2
 800a362:	d00c      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a368:	3328      	adds	r3, #40	; 0x28
 800a36a:	2102      	movs	r1, #2
 800a36c:	4618      	mov	r0, r3
 800a36e:	f001 fbf5 	bl	800bb5c <RCCEx_PLL3_Config>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a38a:	663b      	str	r3, [r7, #96]	; 0x60
 800a38c:	2300      	movs	r3, #0
 800a38e:	667b      	str	r3, [r7, #100]	; 0x64
 800a390:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a394:	460b      	mov	r3, r1
 800a396:	4313      	orrs	r3, r2
 800a398:	d038      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3a6:	d018      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a3a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3ac:	d811      	bhi.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3b2:	d014      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a3b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3b8:	d80b      	bhi.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d011      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c2:	d106      	bne.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3c4:	4bc3      	ldr	r3, [pc, #780]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	4ac2      	ldr	r2, [pc, #776]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a3d0:	e008      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3d8:	e004      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3da:	bf00      	nop
 800a3dc:	e002      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3de:	bf00      	nop
 800a3e0:	e000      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10b      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3ec:	4bb9      	ldr	r3, [pc, #740]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3fc:	4ab5      	ldr	r2, [pc, #724]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3fe:	430b      	orrs	r3, r1
 800a400:	6553      	str	r3, [r2, #84]	; 0x54
 800a402:	e003      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a418:	65bb      	str	r3, [r7, #88]	; 0x58
 800a41a:	2300      	movs	r3, #0
 800a41c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a41e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a422:	460b      	mov	r3, r1
 800a424:	4313      	orrs	r3, r2
 800a426:	d009      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a428:	4baa      	ldr	r3, [pc, #680]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a42c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a436:	4aa7      	ldr	r2, [pc, #668]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a438:	430b      	orrs	r3, r1
 800a43a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a448:	653b      	str	r3, [r7, #80]	; 0x50
 800a44a:	2300      	movs	r3, #0
 800a44c:	657b      	str	r3, [r7, #84]	; 0x54
 800a44e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a452:	460b      	mov	r3, r1
 800a454:	4313      	orrs	r3, r2
 800a456:	d00a      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a458:	4b9e      	ldr	r3, [pc, #632]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a464:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a468:	4a9a      	ldr	r2, [pc, #616]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a46a:	430b      	orrs	r3, r1
 800a46c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a47a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a47c:	2300      	movs	r3, #0
 800a47e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a480:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a484:	460b      	mov	r3, r1
 800a486:	4313      	orrs	r3, r2
 800a488:	d009      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a48a:	4b92      	ldr	r3, [pc, #584]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a48c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a48e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a498:	4a8e      	ldr	r2, [pc, #568]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a49a:	430b      	orrs	r3, r1
 800a49c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a4aa:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a4b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	d00e      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4ba:	4b86      	ldr	r3, [pc, #536]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	4a85      	ldr	r2, [pc, #532]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4c4:	6113      	str	r3, [r2, #16]
 800a4c6:	4b83      	ldr	r3, [pc, #524]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4c8:	6919      	ldr	r1, [r3, #16]
 800a4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a4d2:	4a80      	ldr	r2, [pc, #512]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4d4:	430b      	orrs	r3, r1
 800a4d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a4e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	d009      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a4f4:	4b77      	ldr	r3, [pc, #476]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a502:	4a74      	ldr	r2, [pc, #464]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a504:	430b      	orrs	r3, r1
 800a506:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a514:	633b      	str	r3, [r7, #48]	; 0x30
 800a516:	2300      	movs	r3, #0
 800a518:	637b      	str	r3, [r7, #52]	; 0x34
 800a51a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a51e:	460b      	mov	r3, r1
 800a520:	4313      	orrs	r3, r2
 800a522:	d00a      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a524:	4b6b      	ldr	r3, [pc, #428]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a528:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a534:	4a67      	ldr	r2, [pc, #412]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a536:	430b      	orrs	r3, r1
 800a538:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	2100      	movs	r1, #0
 800a544:	62b9      	str	r1, [r7, #40]	; 0x28
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a54c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a550:	460b      	mov	r3, r1
 800a552:	4313      	orrs	r3, r2
 800a554:	d011      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a55a:	3308      	adds	r3, #8
 800a55c:	2100      	movs	r1, #0
 800a55e:	4618      	mov	r0, r3
 800a560:	f001 fa4a 	bl	800b9f8 <RCCEx_PLL2_Config>
 800a564:	4603      	mov	r3, r0
 800a566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a56a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	2100      	movs	r1, #0
 800a584:	6239      	str	r1, [r7, #32]
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
 800a58c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a590:	460b      	mov	r3, r1
 800a592:	4313      	orrs	r3, r2
 800a594:	d011      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a59a:	3308      	adds	r3, #8
 800a59c:	2101      	movs	r1, #1
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f001 fa2a 	bl	800b9f8 <RCCEx_PLL2_Config>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	61b9      	str	r1, [r7, #24]
 800a5c6:	f003 0304 	and.w	r3, r3, #4
 800a5ca:	61fb      	str	r3, [r7, #28]
 800a5cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	d011      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5da:	3308      	adds	r3, #8
 800a5dc:	2102      	movs	r1, #2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 fa0a 	bl	800b9f8 <RCCEx_PLL2_Config>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	2100      	movs	r1, #0
 800a604:	6139      	str	r1, [r7, #16]
 800a606:	f003 0308 	and.w	r3, r3, #8
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a610:	460b      	mov	r3, r1
 800a612:	4313      	orrs	r3, r2
 800a614:	d011      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a61a:	3328      	adds	r3, #40	; 0x28
 800a61c:	2100      	movs	r1, #0
 800a61e:	4618      	mov	r0, r3
 800a620:	f001 fa9c 	bl	800bb5c <RCCEx_PLL3_Config>
 800a624:	4603      	mov	r3, r0
 800a626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a62a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	2100      	movs	r1, #0
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a650:	460b      	mov	r3, r1
 800a652:	4313      	orrs	r3, r2
 800a654:	d011      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a65a:	3328      	adds	r3, #40	; 0x28
 800a65c:	2101      	movs	r1, #1
 800a65e:	4618      	mov	r0, r3
 800a660:	f001 fa7c 	bl	800bb5c <RCCEx_PLL3_Config>
 800a664:	4603      	mov	r3, r0
 800a666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a66a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a676:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	2100      	movs	r1, #0
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	f003 0320 	and.w	r3, r3, #32
 800a68a:	607b      	str	r3, [r7, #4]
 800a68c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a690:	460b      	mov	r3, r1
 800a692:	4313      	orrs	r3, r2
 800a694:	d011      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69a:	3328      	adds	r3, #40	; 0x28
 800a69c:	2102      	movs	r1, #2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 fa5c 	bl	800bb5c <RCCEx_PLL3_Config>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a6ba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	e000      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6d4:	58024400 	.word	0x58024400

0800a6d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b090      	sub	sp, #64	; 0x40
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a6e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a6ea:	430b      	orrs	r3, r1
 800a6ec:	f040 8094 	bne.w	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a6f0:	4b9e      	ldr	r3, [pc, #632]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	f200 8087 	bhi.w	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a702:	a201      	add	r2, pc, #4	; (adr r2, 800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a708:	0800a71d 	.word	0x0800a71d
 800a70c:	0800a745 	.word	0x0800a745
 800a710:	0800a76d 	.word	0x0800a76d
 800a714:	0800a809 	.word	0x0800a809
 800a718:	0800a795 	.word	0x0800a795
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a71c:	4b93      	ldr	r3, [pc, #588]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a728:	d108      	bne.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a72a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 f810 	bl	800b754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a738:	f000 bd45 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a740:	f000 bd41 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a744:	4b89      	ldr	r3, [pc, #548]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a74c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a750:	d108      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a752:	f107 0318 	add.w	r3, r7, #24
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fd54 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a760:	f000 bd31 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a768:	f000 bd2d 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a76c:	4b7f      	ldr	r3, [pc, #508]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a778:	d108      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a77a:	f107 030c 	add.w	r3, r7, #12
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fe94 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a788:	f000 bd1d 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a790:	f000 bd19 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a794:	4b75      	ldr	r3, [pc, #468]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a79c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a79e:	4b73      	ldr	r3, [pc, #460]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d10c      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7b0:	4b6e      	ldr	r3, [pc, #440]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	08db      	lsrs	r3, r3, #3
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	4a6d      	ldr	r2, [pc, #436]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c2:	e01f      	b.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7c4:	4b69      	ldr	r3, [pc, #420]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d0:	d106      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7d8:	d102      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7da:	4b66      	ldr	r3, [pc, #408]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7de:	e011      	b.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7e0:	4b62      	ldr	r3, [pc, #392]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7ec:	d106      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7f4:	d102      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7f6:	4b60      	ldr	r3, [pc, #384]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7fa:	e003      	b.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a800:	f000 bce1 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a804:	f000 bcdf 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a808:	4b5c      	ldr	r3, [pc, #368]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a80c:	f000 bcdb 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a814:	f000 bcd7 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a81c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a820:	430b      	orrs	r3, r1
 800a822:	f040 80ad 	bne.w	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a826:	4b51      	ldr	r3, [pc, #324]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a82a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a82e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a836:	d056      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a83e:	f200 8090 	bhi.w	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	2bc0      	cmp	r3, #192	; 0xc0
 800a846:	f000 8088 	beq.w	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	2bc0      	cmp	r3, #192	; 0xc0
 800a84e:	f200 8088 	bhi.w	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	2b80      	cmp	r3, #128	; 0x80
 800a856:	d032      	beq.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	2b80      	cmp	r3, #128	; 0x80
 800a85c:	f200 8081 	bhi.w	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	2b40      	cmp	r3, #64	; 0x40
 800a86a:	d014      	beq.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a86c:	e079      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a86e:	4b3f      	ldr	r3, [pc, #252]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a87a:	d108      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a87c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a880:	4618      	mov	r0, r3
 800a882:	f000 ff67 	bl	800b754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a88a:	f000 bc9c 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a892:	f000 bc98 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a896:	4b35      	ldr	r3, [pc, #212]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a89e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8a2:	d108      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a4:	f107 0318 	add.w	r3, r7, #24
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 fcab 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b2:	f000 bc88 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ba:	f000 bc84 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8be:	4b2b      	ldr	r3, [pc, #172]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ca:	d108      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8cc:	f107 030c 	add.w	r3, r7, #12
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 fdeb 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8da:	f000 bc74 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e2:	f000 bc70 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8e6:	4b21      	ldr	r3, [pc, #132]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8f0:	4b1e      	ldr	r3, [pc, #120]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d10c      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d109      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a902:	4b1a      	ldr	r3, [pc, #104]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	08db      	lsrs	r3, r3, #3
 800a908:	f003 0303 	and.w	r3, r3, #3
 800a90c:	4a18      	ldr	r2, [pc, #96]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a90e:	fa22 f303 	lsr.w	r3, r2, r3
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a914:	e01f      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a916:	4b15      	ldr	r3, [pc, #84]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a922:	d106      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a92a:	d102      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a92c:	4b11      	ldr	r3, [pc, #68]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a930:	e011      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a932:	4b0e      	ldr	r3, [pc, #56]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a93a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a93e:	d106      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a946:	d102      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a948:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a94c:	e003      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a952:	f000 bc38 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a956:	f000 bc36 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a95a:	4b08      	ldr	r3, [pc, #32]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a95e:	f000 bc32 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a966:	f000 bc2e 	b.w	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a96a:	bf00      	nop
 800a96c:	58024400 	.word	0x58024400
 800a970:	03d09000 	.word	0x03d09000
 800a974:	003d0900 	.word	0x003d0900
 800a978:	007a1200 	.word	0x007a1200
 800a97c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a984:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a988:	430b      	orrs	r3, r1
 800a98a:	f040 809c 	bne.w	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a98e:	4b9e      	ldr	r3, [pc, #632]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a992:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a996:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a99e:	d054      	beq.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9a6:	f200 808b 	bhi.w	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9b0:	f000 8083 	beq.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9ba:	f200 8081 	bhi.w	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9c4:	d02f      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9cc:	d878      	bhi.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9da:	d012      	beq.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a9dc:	e070      	b.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9de:	4b8a      	ldr	r3, [pc, #552]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ea:	d107      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 feaf 	bl	800b754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fa:	e3e4      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa00:	e3e1      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa02:	4b81      	ldr	r3, [pc, #516]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa0e:	d107      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa10:	f107 0318 	add.w	r3, r7, #24
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fbf5 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa1e:	e3d2      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa24:	e3cf      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa26:	4b78      	ldr	r3, [pc, #480]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa32:	d107      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa34:	f107 030c 	add.w	r3, r7, #12
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fd37 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa42:	e3c0      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa48:	e3bd      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa4a:	4b6f      	ldr	r3, [pc, #444]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa54:	4b6c      	ldr	r3, [pc, #432]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d10c      	bne.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aa60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d109      	bne.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa66:	4b68      	ldr	r3, [pc, #416]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	08db      	lsrs	r3, r3, #3
 800aa6c:	f003 0303 	and.w	r3, r3, #3
 800aa70:	4a66      	ldr	r2, [pc, #408]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aa72:	fa22 f303 	lsr.w	r3, r2, r3
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa78:	e01e      	b.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa7a:	4b63      	ldr	r3, [pc, #396]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa86:	d106      	bne.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa8e:	d102      	bne.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa90:	4b5f      	ldr	r3, [pc, #380]	; (800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa94:	e010      	b.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa96:	4b5c      	ldr	r3, [pc, #368]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa2:	d106      	bne.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaaa:	d102      	bne.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaac:	4b59      	ldr	r3, [pc, #356]	; (800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aaae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab0:	e002      	b.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aab6:	e386      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aab8:	e385      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aaba:	4b57      	ldr	r3, [pc, #348]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aabe:	e382      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aac4:	e37f      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaca:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aace:	430b      	orrs	r3, r1
 800aad0:	f040 80a7 	bne.w	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aad4:	4b4c      	ldr	r3, [pc, #304]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aadc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aae4:	d055      	beq.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aaec:	f200 8096 	bhi.w	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aaf6:	f000 8084 	beq.w	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab00:	f200 808c 	bhi.w	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab0a:	d030      	beq.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab12:	f200 8083 	bhi.w	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d004      	beq.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab22:	d012      	beq.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ab24:	e07a      	b.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab26:	4b38      	ldr	r3, [pc, #224]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab32:	d107      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 fe0b 	bl	800b754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab42:	e340      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab48:	e33d      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab4a:	4b2f      	ldr	r3, [pc, #188]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab56:	d107      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab58:	f107 0318 	add.w	r3, r7, #24
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fb51 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab66:	e32e      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab6c:	e32b      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab6e:	4b26      	ldr	r3, [pc, #152]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab7a:	d107      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab7c:	f107 030c 	add.w	r3, r7, #12
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 fc93 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab8a:	e31c      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab90:	e319      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab92:	4b1d      	ldr	r3, [pc, #116]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab9c:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0304 	and.w	r3, r3, #4
 800aba4:	2b04      	cmp	r3, #4
 800aba6:	d10c      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d109      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abae:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	08db      	lsrs	r3, r3, #3
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	4a14      	ldr	r2, [pc, #80]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800abba:	fa22 f303 	lsr.w	r3, r2, r3
 800abbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abc0:	e01e      	b.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abc2:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abce:	d106      	bne.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800abd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd6:	d102      	bne.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abd8:	4b0d      	ldr	r3, [pc, #52]	; (800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abdc:	e010      	b.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abde:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abea:	d106      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800abec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abf2:	d102      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abf4:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf8:	e002      	b.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800abfe:	e2e2      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac00:	e2e1      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac02:	4b05      	ldr	r3, [pc, #20]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ac04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac06:	e2de      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac08:	58024400 	.word	0x58024400
 800ac0c:	03d09000 	.word	0x03d09000
 800ac10:	003d0900 	.word	0x003d0900
 800ac14:	007a1200 	.word	0x007a1200
 800ac18:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac20:	e2d1      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ac22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac26:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ac2a:	430b      	orrs	r3, r1
 800ac2c:	f040 809c 	bne.w	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ac30:	4b93      	ldr	r3, [pc, #588]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac34:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ac38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac40:	d054      	beq.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ac42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac48:	f200 808b 	bhi.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac52:	f000 8083 	beq.w	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac5c:	f200 8081 	bhi.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac66:	d02f      	beq.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ac68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac6e:	d878      	bhi.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d004      	beq.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ac76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac7c:	d012      	beq.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ac7e:	e070      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac80:	4b7f      	ldr	r3, [pc, #508]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac8c:	d107      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fd5e 	bl	800b754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9c:	e293      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca2:	e290      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aca4:	4b76      	ldr	r3, [pc, #472]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acb0:	d107      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb2:	f107 0318 	add.w	r3, r7, #24
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 faa4 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc0:	e281      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc6:	e27e      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acc8:	4b6d      	ldr	r3, [pc, #436]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd4:	d107      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acd6:	f107 030c 	add.w	r3, r7, #12
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 fbe6 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace4:	e26f      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acea:	e26c      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acec:	4b64      	ldr	r3, [pc, #400]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acf4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acf6:	4b62      	ldr	r3, [pc, #392]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0304 	and.w	r3, r3, #4
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d10c      	bne.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ad02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d109      	bne.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad08:	4b5d      	ldr	r3, [pc, #372]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	08db      	lsrs	r3, r3, #3
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	4a5c      	ldr	r2, [pc, #368]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad14:	fa22 f303 	lsr.w	r3, r2, r3
 800ad18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad1a:	e01e      	b.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad1c:	4b58      	ldr	r3, [pc, #352]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad28:	d106      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad30:	d102      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad32:	4b55      	ldr	r3, [pc, #340]	; (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad36:	e010      	b.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad38:	4b51      	ldr	r3, [pc, #324]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad44:	d106      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ad46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad4c:	d102      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad4e:	4b4f      	ldr	r3, [pc, #316]	; (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad52:	e002      	b.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad58:	e235      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad5a:	e234      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad5c:	4b4c      	ldr	r3, [pc, #304]	; (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad60:	e231      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad66:	e22e      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ad68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ad70:	430b      	orrs	r3, r1
 800ad72:	f040 808f 	bne.w	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ad76:	4b42      	ldr	r3, [pc, #264]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad7a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ad7e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad86:	d06b      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ad88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad8e:	d874      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad96:	d056      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad9e:	d86c      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ada0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ada6:	d03b      	beq.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ada8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adae:	d864      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adb6:	d021      	beq.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adbe:	d85c      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d004      	beq.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adcc:	d004      	beq.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800adce:	e054      	b.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800add0:	f7fe fa4c 	bl	800926c <HAL_RCC_GetPCLK1Freq>
 800add4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800add6:	e1f6      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800add8:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ade0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ade4:	d107      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ade6:	f107 0318 	add.w	r3, r7, #24
 800adea:	4618      	mov	r0, r3
 800adec:	f000 fa0a 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf4:	e1e7      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adfa:	e1e4      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adfc:	4b20      	ldr	r3, [pc, #128]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae08:	d107      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 fb4c 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae18:	e1d5      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae1e:	e1d2      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae20:	4b17      	ldr	r3, [pc, #92]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b04      	cmp	r3, #4
 800ae2a:	d109      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae2c:	4b14      	ldr	r3, [pc, #80]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	08db      	lsrs	r3, r3, #3
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	4a13      	ldr	r2, [pc, #76]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ae38:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae3e:	e1c2      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae44:	e1bf      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae46:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae52:	d102      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ae54:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae58:	e1b5      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae5e:	e1b2      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae6c:	d102      	bne.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ae6e:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae72:	e1a8      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae78:	e1a5      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae7e:	e1a2      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae80:	58024400 	.word	0x58024400
 800ae84:	03d09000 	.word	0x03d09000
 800ae88:	003d0900 	.word	0x003d0900
 800ae8c:	007a1200 	.word	0x007a1200
 800ae90:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae98:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ae9c:	430b      	orrs	r3, r1
 800ae9e:	d173      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aea0:	4b9c      	ldr	r3, [pc, #624]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aea8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeb0:	d02f      	beq.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeb8:	d863      	bhi.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec6:	d012      	beq.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aec8:	e05b      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeca:	4b92      	ldr	r3, [pc, #584]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aed6:	d107      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aed8:	f107 0318 	add.w	r3, r7, #24
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 f991 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aee6:	e16e      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeec:	e16b      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aeee:	4b89      	ldr	r3, [pc, #548]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aefa:	d107      	bne.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aefc:	f107 030c 	add.w	r3, r7, #12
 800af00:	4618      	mov	r0, r3
 800af02:	f000 fad3 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af0a:	e15c      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af10:	e159      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af12:	4b80      	ldr	r3, [pc, #512]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af1a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af1c:	4b7d      	ldr	r3, [pc, #500]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	2b04      	cmp	r3, #4
 800af26:	d10c      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800af28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af2e:	4b79      	ldr	r3, [pc, #484]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	08db      	lsrs	r3, r3, #3
 800af34:	f003 0303 	and.w	r3, r3, #3
 800af38:	4a77      	ldr	r2, [pc, #476]	; (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800af3a:	fa22 f303 	lsr.w	r3, r2, r3
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af40:	e01e      	b.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af42:	4b74      	ldr	r3, [pc, #464]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af4e:	d106      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800af50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af56:	d102      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af58:	4b70      	ldr	r3, [pc, #448]	; (800b11c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800af5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af5c:	e010      	b.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af5e:	4b6d      	ldr	r3, [pc, #436]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af6a:	d106      	bne.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800af6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af72:	d102      	bne.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af74:	4b6a      	ldr	r3, [pc, #424]	; (800b120 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800af76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af78:	e002      	b.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af7e:	e122      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af80:	e121      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af86:	e11e      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af8c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800af90:	430b      	orrs	r3, r1
 800af92:	d133      	bne.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af94:	4b5f      	ldr	r3, [pc, #380]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d004      	beq.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afaa:	d012      	beq.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800afac:	e023      	b.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afae:	4b59      	ldr	r3, [pc, #356]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afba:	d107      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc0:	4618      	mov	r0, r3
 800afc2:	f000 fbc7 	bl	800b754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afca:	e0fc      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd0:	e0f9      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afd2:	4b50      	ldr	r3, [pc, #320]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afde:	d107      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afe0:	f107 0318 	add.w	r3, r7, #24
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 f90d 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afee:	e0ea      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff4:	e0e7      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800affa:	e0e4      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800affc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b000:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b004:	430b      	orrs	r3, r1
 800b006:	f040 808d 	bne.w	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b00a:	4b42      	ldr	r3, [pc, #264]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b00e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b012:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b01a:	d06b      	beq.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b022:	d874      	bhi.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b02a:	d056      	beq.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b032:	d86c      	bhi.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b03a:	d03b      	beq.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b042:	d864      	bhi.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b04a:	d021      	beq.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b052:	d85c      	bhi.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	2b00      	cmp	r3, #0
 800b058:	d004      	beq.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b060:	d004      	beq.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b062:	e054      	b.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b064:	f000 f8b8 	bl	800b1d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b068:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b06a:	e0ac      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b06c:	4b29      	ldr	r3, [pc, #164]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b078:	d107      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b07a:	f107 0318 	add.w	r3, r7, #24
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f8c0 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b088:	e09d      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08e:	e09a      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b090:	4b20      	ldr	r3, [pc, #128]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b09c:	d107      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b09e:	f107 030c 	add.w	r3, r7, #12
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fa02 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ac:	e08b      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b2:	e088      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0b4:	4b17      	ldr	r3, [pc, #92]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d109      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0c0:	4b14      	ldr	r3, [pc, #80]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	08db      	lsrs	r3, r3, #3
 800b0c6:	f003 0303 	and.w	r3, r3, #3
 800b0ca:	4a13      	ldr	r2, [pc, #76]	; (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d2:	e078      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d8:	e075      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b0da:	4b0e      	ldr	r3, [pc, #56]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e6:	d102      	bne.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b0e8:	4b0c      	ldr	r3, [pc, #48]	; (800b11c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ec:	e06b      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f2:	e068      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0f4:	4b07      	ldr	r3, [pc, #28]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b100:	d102      	bne.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b102:	4b07      	ldr	r3, [pc, #28]	; (800b120 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b106:	e05e      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b10c:	e05b      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b112:	e058      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b114:	58024400 	.word	0x58024400
 800b118:	03d09000 	.word	0x03d09000
 800b11c:	003d0900 	.word	0x003d0900
 800b120:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b124:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b128:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b12c:	430b      	orrs	r3, r1
 800b12e:	d148      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b130:	4b27      	ldr	r3, [pc, #156]	; (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b138:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b140:	d02a      	beq.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b148:	d838      	bhi.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d004      	beq.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b156:	d00d      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b158:	e030      	b.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b15a:	4b1d      	ldr	r3, [pc, #116]	; (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b166:	d102      	bne.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b168:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b16c:	e02b      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b172:	e028      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b174:	4b16      	ldr	r3, [pc, #88]	; (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b17c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b180:	d107      	bne.n	800b192 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b186:	4618      	mov	r0, r3
 800b188:	f000 fae4 	bl	800b754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b190:	e019      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b196:	e016      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b198:	4b0d      	ldr	r3, [pc, #52]	; (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1a4:	d107      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1a6:	f107 0318 	add.w	r3, r7, #24
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 f82a 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1b4:	e007      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ba:	e004      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c0:	e001      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3740      	adds	r7, #64	; 0x40
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	007a1200 	.word	0x007a1200

0800b1d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b1dc:	f7fe f816 	bl	800920c <HAL_RCC_GetHCLKFreq>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	091b      	lsrs	r3, r3, #4
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	4904      	ldr	r1, [pc, #16]	; (800b200 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b1ee:	5ccb      	ldrb	r3, [r1, r3]
 800b1f0:	f003 031f 	and.w	r3, r3, #31
 800b1f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	58024400 	.word	0x58024400
 800b200:	0800f38c 	.word	0x0800f38c

0800b204 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b204:	b480      	push	{r7}
 800b206:	b089      	sub	sp, #36	; 0x24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b20c:	4ba1      	ldr	r3, [pc, #644]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b210:	f003 0303 	and.w	r3, r3, #3
 800b214:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b216:	4b9f      	ldr	r3, [pc, #636]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21a:	0b1b      	lsrs	r3, r3, #12
 800b21c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b220:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b222:	4b9c      	ldr	r3, [pc, #624]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	091b      	lsrs	r3, r3, #4
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b22e:	4b99      	ldr	r3, [pc, #612]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b232:	08db      	lsrs	r3, r3, #3
 800b234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	fb02 f303 	mul.w	r3, r2, r3
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b246:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 8111 	beq.w	800b474 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	2b02      	cmp	r3, #2
 800b256:	f000 8083 	beq.w	800b360 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	f200 80a1 	bhi.w	800b3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d003      	beq.n	800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d056      	beq.n	800b31c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b26e:	e099      	b.n	800b3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b270:	4b88      	ldr	r3, [pc, #544]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 0320 	and.w	r3, r3, #32
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d02d      	beq.n	800b2d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b27c:	4b85      	ldr	r3, [pc, #532]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	08db      	lsrs	r3, r3, #3
 800b282:	f003 0303 	and.w	r3, r3, #3
 800b286:	4a84      	ldr	r2, [pc, #528]	; (800b498 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b288:	fa22 f303 	lsr.w	r3, r2, r3
 800b28c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	ee07 3a90 	vmov	s15, r3
 800b294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2a6:	4b7b      	ldr	r3, [pc, #492]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b49c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2d6:	e087      	b.n	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ea:	4b6a      	ldr	r3, [pc, #424]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b49c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b31a:	e065      	b.n	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	ee07 3a90 	vmov	s15, r3
 800b322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b326:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b32e:	4b59      	ldr	r3, [pc, #356]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b342:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b49c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b35e:	e043      	b.n	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b372:	4b48      	ldr	r3, [pc, #288]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b382:	ed97 6a03 	vldr	s12, [r7, #12]
 800b386:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b49c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3a2:	e021      	b.n	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	ee07 3a90 	vmov	s15, r3
 800b3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b6:	4b37      	ldr	r3, [pc, #220]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b49c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b3e8:	4b2a      	ldr	r3, [pc, #168]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ec:	0a5b      	lsrs	r3, r3, #9
 800b3ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b402:	edd7 6a07 	vldr	s13, [r7, #28]
 800b406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b40a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b40e:	ee17 2a90 	vmov	r2, s15
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b416:	4b1f      	ldr	r3, [pc, #124]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41a:	0c1b      	lsrs	r3, r3, #16
 800b41c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b420:	ee07 3a90 	vmov	s15, r3
 800b424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b428:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b42c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b430:	edd7 6a07 	vldr	s13, [r7, #28]
 800b434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43c:	ee17 2a90 	vmov	r2, s15
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b444:	4b13      	ldr	r3, [pc, #76]	; (800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b448:	0e1b      	lsrs	r3, r3, #24
 800b44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b44e:	ee07 3a90 	vmov	s15, r3
 800b452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b45a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b45e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b46a:	ee17 2a90 	vmov	r2, s15
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b472:	e008      	b.n	800b486 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	609a      	str	r2, [r3, #8]
}
 800b486:	bf00      	nop
 800b488:	3724      	adds	r7, #36	; 0x24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	58024400 	.word	0x58024400
 800b498:	03d09000 	.word	0x03d09000
 800b49c:	46000000 	.word	0x46000000
 800b4a0:	4c742400 	.word	0x4c742400
 800b4a4:	4a742400 	.word	0x4a742400
 800b4a8:	4af42400 	.word	0x4af42400

0800b4ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b089      	sub	sp, #36	; 0x24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4b4:	4ba1      	ldr	r3, [pc, #644]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b8:	f003 0303 	and.w	r3, r3, #3
 800b4bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b4be:	4b9f      	ldr	r3, [pc, #636]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c2:	0d1b      	lsrs	r3, r3, #20
 800b4c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b4ca:	4b9c      	ldr	r3, [pc, #624]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ce:	0a1b      	lsrs	r3, r3, #8
 800b4d0:	f003 0301 	and.w	r3, r3, #1
 800b4d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b4d6:	4b99      	ldr	r3, [pc, #612]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4da:	08db      	lsrs	r3, r3, #3
 800b4dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	fb02 f303 	mul.w	r3, r2, r3
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 8111 	beq.w	800b71c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	f000 8083 	beq.w	800b608 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	2b02      	cmp	r3, #2
 800b506:	f200 80a1 	bhi.w	800b64c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d003      	beq.n	800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d056      	beq.n	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b516:	e099      	b.n	800b64c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b518:	4b88      	ldr	r3, [pc, #544]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 0320 	and.w	r3, r3, #32
 800b520:	2b00      	cmp	r3, #0
 800b522:	d02d      	beq.n	800b580 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b524:	4b85      	ldr	r3, [pc, #532]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	08db      	lsrs	r3, r3, #3
 800b52a:	f003 0303 	and.w	r3, r3, #3
 800b52e:	4a84      	ldr	r2, [pc, #528]	; (800b740 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b530:	fa22 f303 	lsr.w	r3, r2, r3
 800b534:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	ee07 3a90 	vmov	s15, r3
 800b53c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b54e:	4b7b      	ldr	r3, [pc, #492]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b55e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b562:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b57e:	e087      	b.n	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	ee07 3a90 	vmov	s15, r3
 800b586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b748 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b592:	4b6a      	ldr	r3, [pc, #424]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5c2:	e065      	b.n	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	ee07 3a90 	vmov	s15, r3
 800b5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b74c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d6:	4b59      	ldr	r3, [pc, #356]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b606:	e043      	b.n	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	ee07 3a90 	vmov	s15, r3
 800b60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b612:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b61a:	4b48      	ldr	r3, [pc, #288]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b62a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b62e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b63a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b64a:	e021      	b.n	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	ee07 3a90 	vmov	s15, r3
 800b652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b656:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b74c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b65e:	4b37      	ldr	r3, [pc, #220]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b66e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b672:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b67e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b68a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b68e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b690:	4b2a      	ldr	r3, [pc, #168]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b694:	0a5b      	lsrs	r3, r3, #9
 800b696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b69a:	ee07 3a90 	vmov	s15, r3
 800b69e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b6:	ee17 2a90 	vmov	r2, s15
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b6be:	4b1f      	ldr	r3, [pc, #124]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c2:	0c1b      	lsrs	r3, r3, #16
 800b6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c8:	ee07 3a90 	vmov	s15, r3
 800b6cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e4:	ee17 2a90 	vmov	r2, s15
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b6ec:	4b13      	ldr	r3, [pc, #76]	; (800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f0:	0e1b      	lsrs	r3, r3, #24
 800b6f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6f6:	ee07 3a90 	vmov	s15, r3
 800b6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b702:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b706:	edd7 6a07 	vldr	s13, [r7, #28]
 800b70a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b70e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b712:	ee17 2a90 	vmov	r2, s15
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b71a:	e008      	b.n	800b72e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	609a      	str	r2, [r3, #8]
}
 800b72e:	bf00      	nop
 800b730:	3724      	adds	r7, #36	; 0x24
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	58024400 	.word	0x58024400
 800b740:	03d09000 	.word	0x03d09000
 800b744:	46000000 	.word	0x46000000
 800b748:	4c742400 	.word	0x4c742400
 800b74c:	4a742400 	.word	0x4a742400
 800b750:	4af42400 	.word	0x4af42400

0800b754 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b754:	b480      	push	{r7}
 800b756:	b089      	sub	sp, #36	; 0x24
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b75c:	4ba0      	ldr	r3, [pc, #640]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b760:	f003 0303 	and.w	r3, r3, #3
 800b764:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b766:	4b9e      	ldr	r3, [pc, #632]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b76a:	091b      	lsrs	r3, r3, #4
 800b76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b770:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b772:	4b9b      	ldr	r3, [pc, #620]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b77c:	4b98      	ldr	r3, [pc, #608]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b780:	08db      	lsrs	r3, r3, #3
 800b782:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	fb02 f303 	mul.w	r3, r2, r3
 800b78c:	ee07 3a90 	vmov	s15, r3
 800b790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b794:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 8111 	beq.w	800b9c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	f000 8083 	beq.w	800b8ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	f200 80a1 	bhi.w	800b8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d056      	beq.n	800b86a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b7bc:	e099      	b.n	800b8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7be:	4b88      	ldr	r3, [pc, #544]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d02d      	beq.n	800b826 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7ca:	4b85      	ldr	r3, [pc, #532]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	08db      	lsrs	r3, r3, #3
 800b7d0:	f003 0303 	and.w	r3, r3, #3
 800b7d4:	4a83      	ldr	r2, [pc, #524]	; (800b9e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f4:	4b7a      	ldr	r3, [pc, #488]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b804:	ed97 6a03 	vldr	s12, [r7, #12]
 800b808:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b9e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b80c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b81c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b820:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b824:	e087      	b.n	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	ee07 3a90 	vmov	s15, r3
 800b82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b830:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b9ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b838:	4b69      	ldr	r3, [pc, #420]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b840:	ee07 3a90 	vmov	s15, r3
 800b844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b848:	ed97 6a03 	vldr	s12, [r7, #12]
 800b84c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b9e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b864:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b868:	e065      	b.n	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	ee07 3a90 	vmov	s15, r3
 800b870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b874:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b9f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87c:	4b58      	ldr	r3, [pc, #352]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b890:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b9e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ac:	e043      	b.n	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	ee07 3a90 	vmov	s15, r3
 800b8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b8bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c0:	4b47      	ldr	r3, [pc, #284]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b9e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8f0:	e021      	b.n	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	ee07 3a90 	vmov	s15, r3
 800b8f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b9ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b904:	4b36      	ldr	r3, [pc, #216]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90c:	ee07 3a90 	vmov	s15, r3
 800b910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b914:	ed97 6a03 	vldr	s12, [r7, #12]
 800b918:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b9e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b91c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b92c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b930:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b934:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b936:	4b2a      	ldr	r3, [pc, #168]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93a:	0a5b      	lsrs	r3, r3, #9
 800b93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b940:	ee07 3a90 	vmov	s15, r3
 800b944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b94c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b950:	edd7 6a07 	vldr	s13, [r7, #28]
 800b954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b95c:	ee17 2a90 	vmov	r2, s15
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b964:	4b1e      	ldr	r3, [pc, #120]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b968:	0c1b      	lsrs	r3, r3, #16
 800b96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b97a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b97e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b98a:	ee17 2a90 	vmov	r2, s15
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b992:	4b13      	ldr	r3, [pc, #76]	; (800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b996:	0e1b      	lsrs	r3, r3, #24
 800b998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b99c:	ee07 3a90 	vmov	s15, r3
 800b9a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9b8:	ee17 2a90 	vmov	r2, s15
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b9c0:	e008      	b.n	800b9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	609a      	str	r2, [r3, #8]
}
 800b9d4:	bf00      	nop
 800b9d6:	3724      	adds	r7, #36	; 0x24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	58024400 	.word	0x58024400
 800b9e4:	03d09000 	.word	0x03d09000
 800b9e8:	46000000 	.word	0x46000000
 800b9ec:	4c742400 	.word	0x4c742400
 800b9f0:	4a742400 	.word	0x4a742400
 800b9f4:	4af42400 	.word	0x4af42400

0800b9f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba06:	4b53      	ldr	r3, [pc, #332]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800ba08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0a:	f003 0303 	and.w	r3, r3, #3
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d101      	bne.n	800ba16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e099      	b.n	800bb4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ba16:	4b4f      	ldr	r3, [pc, #316]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a4e      	ldr	r2, [pc, #312]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800ba1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ba20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba22:	f7f7 f85b 	bl	8002adc <HAL_GetTick>
 800ba26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba28:	e008      	b.n	800ba3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba2a:	f7f7 f857 	bl	8002adc <HAL_GetTick>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d901      	bls.n	800ba3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e086      	b.n	800bb4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba3c:	4b45      	ldr	r3, [pc, #276]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1f0      	bne.n	800ba2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ba48:	4b42      	ldr	r3, [pc, #264]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800ba4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	031b      	lsls	r3, r3, #12
 800ba56:	493f      	ldr	r1, [pc, #252]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	628b      	str	r3, [r1, #40]	; 0x28
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	025b      	lsls	r3, r3, #9
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	431a      	orrs	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	041b      	lsls	r3, r3, #16
 800ba7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	061b      	lsls	r3, r3, #24
 800ba88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ba8c:	4931      	ldr	r1, [pc, #196]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba92:	4b30      	ldr	r3, [pc, #192]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800ba94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	492d      	ldr	r1, [pc, #180]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800baa0:	4313      	orrs	r3, r2
 800baa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800baa4:	4b2b      	ldr	r3, [pc, #172]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	f023 0220 	bic.w	r2, r3, #32
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	4928      	ldr	r1, [pc, #160]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bab6:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baba:	4a26      	ldr	r2, [pc, #152]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800babc:	f023 0310 	bic.w	r3, r3, #16
 800bac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bac2:	4b24      	ldr	r3, [pc, #144]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bac6:	4b24      	ldr	r3, [pc, #144]	; (800bb58 <RCCEx_PLL2_Config+0x160>)
 800bac8:	4013      	ands	r3, r2
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	69d2      	ldr	r2, [r2, #28]
 800bace:	00d2      	lsls	r2, r2, #3
 800bad0:	4920      	ldr	r1, [pc, #128]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bad2:	4313      	orrs	r3, r2
 800bad4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bad6:	4b1f      	ldr	r3, [pc, #124]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bada:	4a1e      	ldr	r2, [pc, #120]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800badc:	f043 0310 	orr.w	r3, r3, #16
 800bae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d106      	bne.n	800baf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bae8:	4b1a      	ldr	r3, [pc, #104]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	4a19      	ldr	r2, [pc, #100]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800baee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800baf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800baf4:	e00f      	b.n	800bb16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d106      	bne.n	800bb0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bafc:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb00:	4a14      	ldr	r2, [pc, #80]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bb02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb08:	e005      	b.n	800bb16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bb0a:	4b12      	ldr	r3, [pc, #72]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0e:	4a11      	ldr	r2, [pc, #68]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bb10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb16:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a0e      	ldr	r2, [pc, #56]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bb1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb22:	f7f6 ffdb 	bl	8002adc <HAL_GetTick>
 800bb26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb28:	e008      	b.n	800bb3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb2a:	f7f6 ffd7 	bl	8002adc <HAL_GetTick>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d901      	bls.n	800bb3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	e006      	b.n	800bb4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb3c:	4b05      	ldr	r3, [pc, #20]	; (800bb54 <RCCEx_PLL2_Config+0x15c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0f0      	beq.n	800bb2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	58024400 	.word	0x58024400
 800bb58:	ffff0007 	.word	0xffff0007

0800bb5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb6a:	4b53      	ldr	r3, [pc, #332]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6e:	f003 0303 	and.w	r3, r3, #3
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d101      	bne.n	800bb7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e099      	b.n	800bcae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bb7a:	4b4f      	ldr	r3, [pc, #316]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a4e      	ldr	r2, [pc, #312]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bb80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb86:	f7f6 ffa9 	bl	8002adc <HAL_GetTick>
 800bb8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb8c:	e008      	b.n	800bba0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb8e:	f7f6 ffa5 	bl	8002adc <HAL_GetTick>
 800bb92:	4602      	mov	r2, r0
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d901      	bls.n	800bba0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e086      	b.n	800bcae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bba0:	4b45      	ldr	r3, [pc, #276]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1f0      	bne.n	800bb8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bbac:	4b42      	ldr	r3, [pc, #264]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	051b      	lsls	r3, r3, #20
 800bbba:	493f      	ldr	r1, [pc, #252]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	628b      	str	r3, [r1, #40]	; 0x28
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	025b      	lsls	r3, r3, #9
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	041b      	lsls	r3, r3, #16
 800bbde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bbe2:	431a      	orrs	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	061b      	lsls	r3, r3, #24
 800bbec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bbf0:	4931      	ldr	r1, [pc, #196]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bbf6:	4b30      	ldr	r3, [pc, #192]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	492d      	ldr	r1, [pc, #180]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc08:	4b2b      	ldr	r3, [pc, #172]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	4928      	ldr	r1, [pc, #160]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc1a:	4b27      	ldr	r3, [pc, #156]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1e:	4a26      	ldr	r2, [pc, #152]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc26:	4b24      	ldr	r3, [pc, #144]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc2a:	4b24      	ldr	r3, [pc, #144]	; (800bcbc <RCCEx_PLL3_Config+0x160>)
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	69d2      	ldr	r2, [r2, #28]
 800bc32:	00d2      	lsls	r2, r2, #3
 800bc34:	4920      	ldr	r1, [pc, #128]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc3a:	4b1f      	ldr	r3, [pc, #124]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3e:	4a1e      	ldr	r2, [pc, #120]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc4c:	4b1a      	ldr	r3, [pc, #104]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	4a19      	ldr	r2, [pc, #100]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bc56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc58:	e00f      	b.n	800bc7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d106      	bne.n	800bc6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bc60:	4b15      	ldr	r3, [pc, #84]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc64:	4a14      	ldr	r2, [pc, #80]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc6c:	e005      	b.n	800bc7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bc6e:	4b12      	ldr	r3, [pc, #72]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc72:	4a11      	ldr	r2, [pc, #68]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc7a:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a0e      	ldr	r2, [pc, #56]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bc80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc86:	f7f6 ff29 	bl	8002adc <HAL_GetTick>
 800bc8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc8c:	e008      	b.n	800bca0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc8e:	f7f6 ff25 	bl	8002adc <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d901      	bls.n	800bca0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e006      	b.n	800bcae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bca0:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <RCCEx_PLL3_Config+0x15c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0f0      	beq.n	800bc8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	58024400 	.word	0x58024400
 800bcbc:	ffff0007 	.word	0xffff0007

0800bcc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d101      	bne.n	800bcd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e049      	b.n	800bd66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d106      	bne.n	800bcec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7f6 fafe 	bl	80022e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2202      	movs	r2, #2
 800bcf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4610      	mov	r0, r2
 800bd00:	f000 fdc0 	bl	800c884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d001      	beq.n	800bd88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e04c      	b.n	800be22 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a26      	ldr	r2, [pc, #152]	; (800be30 <HAL_TIM_Base_Start+0xc0>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d022      	beq.n	800bde0 <HAL_TIM_Base_Start+0x70>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda2:	d01d      	beq.n	800bde0 <HAL_TIM_Base_Start+0x70>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a22      	ldr	r2, [pc, #136]	; (800be34 <HAL_TIM_Base_Start+0xc4>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d018      	beq.n	800bde0 <HAL_TIM_Base_Start+0x70>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a21      	ldr	r2, [pc, #132]	; (800be38 <HAL_TIM_Base_Start+0xc8>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d013      	beq.n	800bde0 <HAL_TIM_Base_Start+0x70>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a1f      	ldr	r2, [pc, #124]	; (800be3c <HAL_TIM_Base_Start+0xcc>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d00e      	beq.n	800bde0 <HAL_TIM_Base_Start+0x70>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a1e      	ldr	r2, [pc, #120]	; (800be40 <HAL_TIM_Base_Start+0xd0>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d009      	beq.n	800bde0 <HAL_TIM_Base_Start+0x70>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a1c      	ldr	r2, [pc, #112]	; (800be44 <HAL_TIM_Base_Start+0xd4>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d004      	beq.n	800bde0 <HAL_TIM_Base_Start+0x70>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a1b      	ldr	r2, [pc, #108]	; (800be48 <HAL_TIM_Base_Start+0xd8>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d115      	bne.n	800be0c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	689a      	ldr	r2, [r3, #8]
 800bde6:	4b19      	ldr	r3, [pc, #100]	; (800be4c <HAL_TIM_Base_Start+0xdc>)
 800bde8:	4013      	ands	r3, r2
 800bdea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b06      	cmp	r3, #6
 800bdf0:	d015      	beq.n	800be1e <HAL_TIM_Base_Start+0xae>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdf8:	d011      	beq.n	800be1e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f042 0201 	orr.w	r2, r2, #1
 800be08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be0a:	e008      	b.n	800be1e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0201 	orr.w	r2, r2, #1
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	e000      	b.n	800be20 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	40010000 	.word	0x40010000
 800be34:	40000400 	.word	0x40000400
 800be38:	40000800 	.word	0x40000800
 800be3c:	40000c00 	.word	0x40000c00
 800be40:	40010400 	.word	0x40010400
 800be44:	40001800 	.word	0x40001800
 800be48:	40014000 	.word	0x40014000
 800be4c:	00010007 	.word	0x00010007

0800be50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	2b01      	cmp	r3, #1
 800be62:	d001      	beq.n	800be68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e054      	b.n	800bf12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2202      	movs	r2, #2
 800be6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68da      	ldr	r2, [r3, #12]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f042 0201 	orr.w	r2, r2, #1
 800be7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a26      	ldr	r2, [pc, #152]	; (800bf20 <HAL_TIM_Base_Start_IT+0xd0>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d022      	beq.n	800bed0 <HAL_TIM_Base_Start_IT+0x80>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be92:	d01d      	beq.n	800bed0 <HAL_TIM_Base_Start_IT+0x80>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a22      	ldr	r2, [pc, #136]	; (800bf24 <HAL_TIM_Base_Start_IT+0xd4>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d018      	beq.n	800bed0 <HAL_TIM_Base_Start_IT+0x80>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a21      	ldr	r2, [pc, #132]	; (800bf28 <HAL_TIM_Base_Start_IT+0xd8>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d013      	beq.n	800bed0 <HAL_TIM_Base_Start_IT+0x80>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a1f      	ldr	r2, [pc, #124]	; (800bf2c <HAL_TIM_Base_Start_IT+0xdc>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d00e      	beq.n	800bed0 <HAL_TIM_Base_Start_IT+0x80>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a1e      	ldr	r2, [pc, #120]	; (800bf30 <HAL_TIM_Base_Start_IT+0xe0>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d009      	beq.n	800bed0 <HAL_TIM_Base_Start_IT+0x80>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a1c      	ldr	r2, [pc, #112]	; (800bf34 <HAL_TIM_Base_Start_IT+0xe4>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d004      	beq.n	800bed0 <HAL_TIM_Base_Start_IT+0x80>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a1b      	ldr	r2, [pc, #108]	; (800bf38 <HAL_TIM_Base_Start_IT+0xe8>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d115      	bne.n	800befc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689a      	ldr	r2, [r3, #8]
 800bed6:	4b19      	ldr	r3, [pc, #100]	; (800bf3c <HAL_TIM_Base_Start_IT+0xec>)
 800bed8:	4013      	ands	r3, r2
 800beda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2b06      	cmp	r3, #6
 800bee0:	d015      	beq.n	800bf0e <HAL_TIM_Base_Start_IT+0xbe>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bee8:	d011      	beq.n	800bf0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f042 0201 	orr.w	r2, r2, #1
 800bef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800befa:	e008      	b.n	800bf0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f042 0201 	orr.w	r2, r2, #1
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	e000      	b.n	800bf10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3714      	adds	r7, #20
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	40010000 	.word	0x40010000
 800bf24:	40000400 	.word	0x40000400
 800bf28:	40000800 	.word	0x40000800
 800bf2c:	40000c00 	.word	0x40000c00
 800bf30:	40010400 	.word	0x40010400
 800bf34:	40001800 	.word	0x40001800
 800bf38:	40014000 	.word	0x40014000
 800bf3c:	00010007 	.word	0x00010007

0800bf40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e049      	b.n	800bfe6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d106      	bne.n	800bf6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f841 	bl	800bfee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f000 fc80 	bl	800c884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bff6:	bf00      	nop
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
	...

0800c004 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d104      	bne.n	800c01e <HAL_TIM_IC_Start+0x1a>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	e023      	b.n	800c066 <HAL_TIM_IC_Start+0x62>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b04      	cmp	r3, #4
 800c022:	d104      	bne.n	800c02e <HAL_TIM_IC_Start+0x2a>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	e01b      	b.n	800c066 <HAL_TIM_IC_Start+0x62>
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b08      	cmp	r3, #8
 800c032:	d104      	bne.n	800c03e <HAL_TIM_IC_Start+0x3a>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	e013      	b.n	800c066 <HAL_TIM_IC_Start+0x62>
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b0c      	cmp	r3, #12
 800c042:	d104      	bne.n	800c04e <HAL_TIM_IC_Start+0x4a>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	e00b      	b.n	800c066 <HAL_TIM_IC_Start+0x62>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b10      	cmp	r3, #16
 800c052:	d104      	bne.n	800c05e <HAL_TIM_IC_Start+0x5a>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	e003      	b.n	800c066 <HAL_TIM_IC_Start+0x62>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c064:	b2db      	uxtb	r3, r3
 800c066:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d104      	bne.n	800c078 <HAL_TIM_IC_Start+0x74>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c074:	b2db      	uxtb	r3, r3
 800c076:	e013      	b.n	800c0a0 <HAL_TIM_IC_Start+0x9c>
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	d104      	bne.n	800c088 <HAL_TIM_IC_Start+0x84>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c084:	b2db      	uxtb	r3, r3
 800c086:	e00b      	b.n	800c0a0 <HAL_TIM_IC_Start+0x9c>
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2b08      	cmp	r3, #8
 800c08c:	d104      	bne.n	800c098 <HAL_TIM_IC_Start+0x94>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c094:	b2db      	uxtb	r3, r3
 800c096:	e003      	b.n	800c0a0 <HAL_TIM_IC_Start+0x9c>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0a2:	7bfb      	ldrb	r3, [r7, #15]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d102      	bne.n	800c0ae <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d001      	beq.n	800c0b2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e097      	b.n	800c1e2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d104      	bne.n	800c0c2 <HAL_TIM_IC_Start+0xbe>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0c0:	e023      	b.n	800c10a <HAL_TIM_IC_Start+0x106>
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b04      	cmp	r3, #4
 800c0c6:	d104      	bne.n	800c0d2 <HAL_TIM_IC_Start+0xce>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0d0:	e01b      	b.n	800c10a <HAL_TIM_IC_Start+0x106>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b08      	cmp	r3, #8
 800c0d6:	d104      	bne.n	800c0e2 <HAL_TIM_IC_Start+0xde>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2202      	movs	r2, #2
 800c0dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0e0:	e013      	b.n	800c10a <HAL_TIM_IC_Start+0x106>
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b0c      	cmp	r3, #12
 800c0e6:	d104      	bne.n	800c0f2 <HAL_TIM_IC_Start+0xee>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0f0:	e00b      	b.n	800c10a <HAL_TIM_IC_Start+0x106>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2b10      	cmp	r3, #16
 800c0f6:	d104      	bne.n	800c102 <HAL_TIM_IC_Start+0xfe>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c100:	e003      	b.n	800c10a <HAL_TIM_IC_Start+0x106>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2202      	movs	r2, #2
 800c106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d104      	bne.n	800c11a <HAL_TIM_IC_Start+0x116>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2202      	movs	r2, #2
 800c114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c118:	e013      	b.n	800c142 <HAL_TIM_IC_Start+0x13e>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2b04      	cmp	r3, #4
 800c11e:	d104      	bne.n	800c12a <HAL_TIM_IC_Start+0x126>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2202      	movs	r2, #2
 800c124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c128:	e00b      	b.n	800c142 <HAL_TIM_IC_Start+0x13e>
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b08      	cmp	r3, #8
 800c12e:	d104      	bne.n	800c13a <HAL_TIM_IC_Start+0x136>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2202      	movs	r2, #2
 800c134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c138:	e003      	b.n	800c142 <HAL_TIM_IC_Start+0x13e>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2202      	movs	r2, #2
 800c13e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2201      	movs	r2, #1
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 ffb4 	bl	800d0b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a25      	ldr	r2, [pc, #148]	; (800c1ec <HAL_TIM_IC_Start+0x1e8>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d022      	beq.n	800c1a0 <HAL_TIM_IC_Start+0x19c>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c162:	d01d      	beq.n	800c1a0 <HAL_TIM_IC_Start+0x19c>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a21      	ldr	r2, [pc, #132]	; (800c1f0 <HAL_TIM_IC_Start+0x1ec>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d018      	beq.n	800c1a0 <HAL_TIM_IC_Start+0x19c>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a20      	ldr	r2, [pc, #128]	; (800c1f4 <HAL_TIM_IC_Start+0x1f0>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d013      	beq.n	800c1a0 <HAL_TIM_IC_Start+0x19c>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a1e      	ldr	r2, [pc, #120]	; (800c1f8 <HAL_TIM_IC_Start+0x1f4>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00e      	beq.n	800c1a0 <HAL_TIM_IC_Start+0x19c>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a1d      	ldr	r2, [pc, #116]	; (800c1fc <HAL_TIM_IC_Start+0x1f8>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d009      	beq.n	800c1a0 <HAL_TIM_IC_Start+0x19c>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a1b      	ldr	r2, [pc, #108]	; (800c200 <HAL_TIM_IC_Start+0x1fc>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d004      	beq.n	800c1a0 <HAL_TIM_IC_Start+0x19c>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a1a      	ldr	r2, [pc, #104]	; (800c204 <HAL_TIM_IC_Start+0x200>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d115      	bne.n	800c1cc <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	689a      	ldr	r2, [r3, #8]
 800c1a6:	4b18      	ldr	r3, [pc, #96]	; (800c208 <HAL_TIM_IC_Start+0x204>)
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2b06      	cmp	r3, #6
 800c1b0:	d015      	beq.n	800c1de <HAL_TIM_IC_Start+0x1da>
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b8:	d011      	beq.n	800c1de <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f042 0201 	orr.w	r2, r2, #1
 800c1c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ca:	e008      	b.n	800c1de <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f042 0201 	orr.w	r2, r2, #1
 800c1da:	601a      	str	r2, [r3, #0]
 800c1dc:	e000      	b.n	800c1e0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	40010000 	.word	0x40010000
 800c1f0:	40000400 	.word	0x40000400
 800c1f4:	40000800 	.word	0x40000800
 800c1f8:	40000c00 	.word	0x40000c00
 800c1fc:	40010400 	.word	0x40010400
 800c200:	40001800 	.word	0x40001800
 800c204:	40014000 	.word	0x40014000
 800c208:	00010007 	.word	0x00010007

0800c20c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	f003 0302 	and.w	r3, r3, #2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d020      	beq.n	800c270 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f003 0302 	and.w	r3, r3, #2
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01b      	beq.n	800c270 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f06f 0202 	mvn.w	r2, #2
 800c240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	f003 0303 	and.w	r3, r3, #3
 800c252:	2b00      	cmp	r3, #0
 800c254:	d003      	beq.n	800c25e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 faf6 	bl	800c848 <HAL_TIM_IC_CaptureCallback>
 800c25c:	e005      	b.n	800c26a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fae8 	bl	800c834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 faf9 	bl	800c85c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	f003 0304 	and.w	r3, r3, #4
 800c276:	2b00      	cmp	r3, #0
 800c278:	d020      	beq.n	800c2bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	d01b      	beq.n	800c2bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f06f 0204 	mvn.w	r2, #4
 800c28c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2202      	movs	r2, #2
 800c292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d003      	beq.n	800c2aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fad0 	bl	800c848 <HAL_TIM_IC_CaptureCallback>
 800c2a8:	e005      	b.n	800c2b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fac2 	bl	800c834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fad3 	bl	800c85c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	f003 0308 	and.w	r3, r3, #8
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d020      	beq.n	800c308 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f003 0308 	and.w	r3, r3, #8
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d01b      	beq.n	800c308 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f06f 0208 	mvn.w	r2, #8
 800c2d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2204      	movs	r2, #4
 800c2de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	69db      	ldr	r3, [r3, #28]
 800c2e6:	f003 0303 	and.w	r3, r3, #3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 faaa 	bl	800c848 <HAL_TIM_IC_CaptureCallback>
 800c2f4:	e005      	b.n	800c302 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa9c 	bl	800c834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 faad 	bl	800c85c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f003 0310 	and.w	r3, r3, #16
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d020      	beq.n	800c354 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f003 0310 	and.w	r3, r3, #16
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d01b      	beq.n	800c354 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f06f 0210 	mvn.w	r2, #16
 800c324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2208      	movs	r2, #8
 800c32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c336:	2b00      	cmp	r3, #0
 800c338:	d003      	beq.n	800c342 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fa84 	bl	800c848 <HAL_TIM_IC_CaptureCallback>
 800c340:	e005      	b.n	800c34e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fa76 	bl	800c834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fa87 	bl	800c85c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00c      	beq.n	800c378 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d007      	beq.n	800c378 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f06f 0201 	mvn.w	r2, #1
 800c370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7f4 fc26 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d104      	bne.n	800c38c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00c      	beq.n	800c3a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c392:	2b00      	cmp	r3, #0
 800c394:	d007      	beq.n	800c3a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 ff47 	bl	800d234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00c      	beq.n	800c3ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d007      	beq.n	800c3ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c3c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 ff3f 	bl	800d248 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00c      	beq.n	800c3ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d007      	beq.n	800c3ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c3e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fa41 	bl	800c870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	f003 0320 	and.w	r3, r3, #32
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00c      	beq.n	800c412 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f003 0320 	and.w	r3, r3, #32
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d007      	beq.n	800c412 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f06f 0220 	mvn.w	r2, #32
 800c40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 ff07 	bl	800d220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c412:	bf00      	nop
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c432:	2b01      	cmp	r3, #1
 800c434:	d101      	bne.n	800c43a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c436:	2302      	movs	r3, #2
 800c438:	e0ff      	b.n	800c63a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b14      	cmp	r3, #20
 800c446:	f200 80f0 	bhi.w	800c62a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c44a:	a201      	add	r2, pc, #4	; (adr r2, 800c450 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c450:	0800c4a5 	.word	0x0800c4a5
 800c454:	0800c62b 	.word	0x0800c62b
 800c458:	0800c62b 	.word	0x0800c62b
 800c45c:	0800c62b 	.word	0x0800c62b
 800c460:	0800c4e5 	.word	0x0800c4e5
 800c464:	0800c62b 	.word	0x0800c62b
 800c468:	0800c62b 	.word	0x0800c62b
 800c46c:	0800c62b 	.word	0x0800c62b
 800c470:	0800c527 	.word	0x0800c527
 800c474:	0800c62b 	.word	0x0800c62b
 800c478:	0800c62b 	.word	0x0800c62b
 800c47c:	0800c62b 	.word	0x0800c62b
 800c480:	0800c567 	.word	0x0800c567
 800c484:	0800c62b 	.word	0x0800c62b
 800c488:	0800c62b 	.word	0x0800c62b
 800c48c:	0800c62b 	.word	0x0800c62b
 800c490:	0800c5a9 	.word	0x0800c5a9
 800c494:	0800c62b 	.word	0x0800c62b
 800c498:	0800c62b 	.word	0x0800c62b
 800c49c:	0800c62b 	.word	0x0800c62b
 800c4a0:	0800c5e9 	.word	0x0800c5e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 fa90 	bl	800c9d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	699a      	ldr	r2, [r3, #24]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f042 0208 	orr.w	r2, r2, #8
 800c4be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	699a      	ldr	r2, [r3, #24]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f022 0204 	bic.w	r2, r2, #4
 800c4ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6999      	ldr	r1, [r3, #24]
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	691a      	ldr	r2, [r3, #16]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	430a      	orrs	r2, r1
 800c4e0:	619a      	str	r2, [r3, #24]
      break;
 800c4e2:	e0a5      	b.n	800c630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68b9      	ldr	r1, [r7, #8]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fb00 	bl	800caf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	699a      	ldr	r2, [r3, #24]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	699a      	ldr	r2, [r3, #24]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c50e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6999      	ldr	r1, [r3, #24]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	021a      	lsls	r2, r3, #8
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	430a      	orrs	r2, r1
 800c522:	619a      	str	r2, [r3, #24]
      break;
 800c524:	e084      	b.n	800c630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68b9      	ldr	r1, [r7, #8]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 fb69 	bl	800cc04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	69da      	ldr	r2, [r3, #28]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f042 0208 	orr.w	r2, r2, #8
 800c540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	69da      	ldr	r2, [r3, #28]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f022 0204 	bic.w	r2, r2, #4
 800c550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	69d9      	ldr	r1, [r3, #28]
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	691a      	ldr	r2, [r3, #16]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	430a      	orrs	r2, r1
 800c562:	61da      	str	r2, [r3, #28]
      break;
 800c564:	e064      	b.n	800c630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fbd1 	bl	800cd14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	69da      	ldr	r2, [r3, #28]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	69da      	ldr	r2, [r3, #28]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	69d9      	ldr	r1, [r3, #28]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	021a      	lsls	r2, r3, #8
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	430a      	orrs	r2, r1
 800c5a4:	61da      	str	r2, [r3, #28]
      break;
 800c5a6:	e043      	b.n	800c630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68b9      	ldr	r1, [r7, #8]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fc1a 	bl	800cde8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f042 0208 	orr.w	r2, r2, #8
 800c5c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f022 0204 	bic.w	r2, r2, #4
 800c5d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	691a      	ldr	r2, [r3, #16]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c5e6:	e023      	b.n	800c630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68b9      	ldr	r1, [r7, #8]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 fc5e 	bl	800ceb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	021a      	lsls	r2, r3, #8
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	430a      	orrs	r2, r1
 800c626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c628:	e002      	b.n	800c630 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	75fb      	strb	r3, [r7, #23]
      break;
 800c62e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c638:	7dfb      	ldrb	r3, [r7, #23]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop

0800c644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d101      	bne.n	800c660 <HAL_TIM_ConfigClockSource+0x1c>
 800c65c:	2302      	movs	r3, #2
 800c65e:	e0dc      	b.n	800c81a <HAL_TIM_ConfigClockSource+0x1d6>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2202      	movs	r2, #2
 800c66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	4b6a      	ldr	r3, [pc, #424]	; (800c824 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c67c:	4013      	ands	r3, r2
 800c67e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a64      	ldr	r2, [pc, #400]	; (800c828 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c696:	4293      	cmp	r3, r2
 800c698:	f000 80a9 	beq.w	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c69c:	4a62      	ldr	r2, [pc, #392]	; (800c828 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	f200 80ae 	bhi.w	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6a4:	4a61      	ldr	r2, [pc, #388]	; (800c82c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	f000 80a1 	beq.w	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c6ac:	4a5f      	ldr	r2, [pc, #380]	; (800c82c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	f200 80a6 	bhi.w	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6b4:	4a5e      	ldr	r2, [pc, #376]	; (800c830 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	f000 8099 	beq.w	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c6bc:	4a5c      	ldr	r2, [pc, #368]	; (800c830 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	f200 809e 	bhi.w	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c6c8:	f000 8091 	beq.w	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c6cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c6d0:	f200 8096 	bhi.w	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6d8:	f000 8089 	beq.w	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c6dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6e0:	f200 808e 	bhi.w	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6e8:	d03e      	beq.n	800c768 <HAL_TIM_ConfigClockSource+0x124>
 800c6ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6ee:	f200 8087 	bhi.w	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6f6:	f000 8086 	beq.w	800c806 <HAL_TIM_ConfigClockSource+0x1c2>
 800c6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6fe:	d87f      	bhi.n	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c700:	2b70      	cmp	r3, #112	; 0x70
 800c702:	d01a      	beq.n	800c73a <HAL_TIM_ConfigClockSource+0xf6>
 800c704:	2b70      	cmp	r3, #112	; 0x70
 800c706:	d87b      	bhi.n	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c708:	2b60      	cmp	r3, #96	; 0x60
 800c70a:	d050      	beq.n	800c7ae <HAL_TIM_ConfigClockSource+0x16a>
 800c70c:	2b60      	cmp	r3, #96	; 0x60
 800c70e:	d877      	bhi.n	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c710:	2b50      	cmp	r3, #80	; 0x50
 800c712:	d03c      	beq.n	800c78e <HAL_TIM_ConfigClockSource+0x14a>
 800c714:	2b50      	cmp	r3, #80	; 0x50
 800c716:	d873      	bhi.n	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c718:	2b40      	cmp	r3, #64	; 0x40
 800c71a:	d058      	beq.n	800c7ce <HAL_TIM_ConfigClockSource+0x18a>
 800c71c:	2b40      	cmp	r3, #64	; 0x40
 800c71e:	d86f      	bhi.n	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c720:	2b30      	cmp	r3, #48	; 0x30
 800c722:	d064      	beq.n	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c724:	2b30      	cmp	r3, #48	; 0x30
 800c726:	d86b      	bhi.n	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c728:	2b20      	cmp	r3, #32
 800c72a:	d060      	beq.n	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c72c:	2b20      	cmp	r3, #32
 800c72e:	d867      	bhi.n	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
 800c730:	2b00      	cmp	r3, #0
 800c732:	d05c      	beq.n	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c734:	2b10      	cmp	r3, #16
 800c736:	d05a      	beq.n	800c7ee <HAL_TIM_ConfigClockSource+0x1aa>
 800c738:	e062      	b.n	800c800 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c74a:	f000 fc95 	bl	800d078 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c75c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	609a      	str	r2, [r3, #8]
      break;
 800c766:	e04f      	b.n	800c808 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c778:	f000 fc7e 	bl	800d078 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689a      	ldr	r2, [r3, #8]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c78a:	609a      	str	r2, [r3, #8]
      break;
 800c78c:	e03c      	b.n	800c808 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c79a:	461a      	mov	r2, r3
 800c79c:	f000 fbee 	bl	800cf7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2150      	movs	r1, #80	; 0x50
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fc48 	bl	800d03c <TIM_ITRx_SetConfig>
      break;
 800c7ac:	e02c      	b.n	800c808 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f000 fc0d 	bl	800cfda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2160      	movs	r1, #96	; 0x60
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 fc38 	bl	800d03c <TIM_ITRx_SetConfig>
      break;
 800c7cc:	e01c      	b.n	800c808 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7da:	461a      	mov	r2, r3
 800c7dc:	f000 fbce 	bl	800cf7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2140      	movs	r1, #64	; 0x40
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fc28 	bl	800d03c <TIM_ITRx_SetConfig>
      break;
 800c7ec:	e00c      	b.n	800c808 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	f000 fc1f 	bl	800d03c <TIM_ITRx_SetConfig>
      break;
 800c7fe:	e003      	b.n	800c808 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c800:	2301      	movs	r3, #1
 800c802:	73fb      	strb	r3, [r7, #15]
      break;
 800c804:	e000      	b.n	800c808 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c818:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	ffceff88 	.word	0xffceff88
 800c828:	00100040 	.word	0x00100040
 800c82c:	00100030 	.word	0x00100030
 800c830:	00100020 	.word	0x00100020

0800c834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a46      	ldr	r2, [pc, #280]	; (800c9b0 <TIM_Base_SetConfig+0x12c>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d013      	beq.n	800c8c4 <TIM_Base_SetConfig+0x40>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8a2:	d00f      	beq.n	800c8c4 <TIM_Base_SetConfig+0x40>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a43      	ldr	r2, [pc, #268]	; (800c9b4 <TIM_Base_SetConfig+0x130>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d00b      	beq.n	800c8c4 <TIM_Base_SetConfig+0x40>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a42      	ldr	r2, [pc, #264]	; (800c9b8 <TIM_Base_SetConfig+0x134>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d007      	beq.n	800c8c4 <TIM_Base_SetConfig+0x40>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a41      	ldr	r2, [pc, #260]	; (800c9bc <TIM_Base_SetConfig+0x138>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d003      	beq.n	800c8c4 <TIM_Base_SetConfig+0x40>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a40      	ldr	r2, [pc, #256]	; (800c9c0 <TIM_Base_SetConfig+0x13c>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d108      	bne.n	800c8d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a35      	ldr	r2, [pc, #212]	; (800c9b0 <TIM_Base_SetConfig+0x12c>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d01f      	beq.n	800c91e <TIM_Base_SetConfig+0x9a>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8e4:	d01b      	beq.n	800c91e <TIM_Base_SetConfig+0x9a>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a32      	ldr	r2, [pc, #200]	; (800c9b4 <TIM_Base_SetConfig+0x130>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d017      	beq.n	800c91e <TIM_Base_SetConfig+0x9a>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a31      	ldr	r2, [pc, #196]	; (800c9b8 <TIM_Base_SetConfig+0x134>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d013      	beq.n	800c91e <TIM_Base_SetConfig+0x9a>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a30      	ldr	r2, [pc, #192]	; (800c9bc <TIM_Base_SetConfig+0x138>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d00f      	beq.n	800c91e <TIM_Base_SetConfig+0x9a>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a2f      	ldr	r2, [pc, #188]	; (800c9c0 <TIM_Base_SetConfig+0x13c>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d00b      	beq.n	800c91e <TIM_Base_SetConfig+0x9a>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a2e      	ldr	r2, [pc, #184]	; (800c9c4 <TIM_Base_SetConfig+0x140>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d007      	beq.n	800c91e <TIM_Base_SetConfig+0x9a>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a2d      	ldr	r2, [pc, #180]	; (800c9c8 <TIM_Base_SetConfig+0x144>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d003      	beq.n	800c91e <TIM_Base_SetConfig+0x9a>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a2c      	ldr	r2, [pc, #176]	; (800c9cc <TIM_Base_SetConfig+0x148>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d108      	bne.n	800c930 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	689a      	ldr	r2, [r3, #8]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a16      	ldr	r2, [pc, #88]	; (800c9b0 <TIM_Base_SetConfig+0x12c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d00f      	beq.n	800c97c <TIM_Base_SetConfig+0xf8>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a18      	ldr	r2, [pc, #96]	; (800c9c0 <TIM_Base_SetConfig+0x13c>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d00b      	beq.n	800c97c <TIM_Base_SetConfig+0xf8>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4a17      	ldr	r2, [pc, #92]	; (800c9c4 <TIM_Base_SetConfig+0x140>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d007      	beq.n	800c97c <TIM_Base_SetConfig+0xf8>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4a16      	ldr	r2, [pc, #88]	; (800c9c8 <TIM_Base_SetConfig+0x144>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d003      	beq.n	800c97c <TIM_Base_SetConfig+0xf8>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4a15      	ldr	r2, [pc, #84]	; (800c9cc <TIM_Base_SetConfig+0x148>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d103      	bne.n	800c984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	691a      	ldr	r2, [r3, #16]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	2b01      	cmp	r3, #1
 800c994:	d105      	bne.n	800c9a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	f023 0201 	bic.w	r2, r3, #1
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	611a      	str	r2, [r3, #16]
  }
}
 800c9a2:	bf00      	nop
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	40010000 	.word	0x40010000
 800c9b4:	40000400 	.word	0x40000400
 800c9b8:	40000800 	.word	0x40000800
 800c9bc:	40000c00 	.word	0x40000c00
 800c9c0:	40010400 	.word	0x40010400
 800c9c4:	40014000 	.word	0x40014000
 800c9c8:	40014400 	.word	0x40014400
 800c9cc:	40014800 	.word	0x40014800

0800c9d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6a1b      	ldr	r3, [r3, #32]
 800c9e4:	f023 0201 	bic.w	r2, r3, #1
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	4b37      	ldr	r3, [pc, #220]	; (800cad8 <TIM_OC1_SetConfig+0x108>)
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f023 0303 	bic.w	r3, r3, #3
 800ca06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f023 0302 	bic.w	r3, r3, #2
 800ca18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a2d      	ldr	r2, [pc, #180]	; (800cadc <TIM_OC1_SetConfig+0x10c>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d00f      	beq.n	800ca4c <TIM_OC1_SetConfig+0x7c>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a2c      	ldr	r2, [pc, #176]	; (800cae0 <TIM_OC1_SetConfig+0x110>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d00b      	beq.n	800ca4c <TIM_OC1_SetConfig+0x7c>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a2b      	ldr	r2, [pc, #172]	; (800cae4 <TIM_OC1_SetConfig+0x114>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d007      	beq.n	800ca4c <TIM_OC1_SetConfig+0x7c>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a2a      	ldr	r2, [pc, #168]	; (800cae8 <TIM_OC1_SetConfig+0x118>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d003      	beq.n	800ca4c <TIM_OC1_SetConfig+0x7c>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a29      	ldr	r2, [pc, #164]	; (800caec <TIM_OC1_SetConfig+0x11c>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d10c      	bne.n	800ca66 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f023 0308 	bic.w	r3, r3, #8
 800ca52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	f023 0304 	bic.w	r3, r3, #4
 800ca64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4a1c      	ldr	r2, [pc, #112]	; (800cadc <TIM_OC1_SetConfig+0x10c>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d00f      	beq.n	800ca8e <TIM_OC1_SetConfig+0xbe>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4a1b      	ldr	r2, [pc, #108]	; (800cae0 <TIM_OC1_SetConfig+0x110>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d00b      	beq.n	800ca8e <TIM_OC1_SetConfig+0xbe>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4a1a      	ldr	r2, [pc, #104]	; (800cae4 <TIM_OC1_SetConfig+0x114>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d007      	beq.n	800ca8e <TIM_OC1_SetConfig+0xbe>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4a19      	ldr	r2, [pc, #100]	; (800cae8 <TIM_OC1_SetConfig+0x118>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d003      	beq.n	800ca8e <TIM_OC1_SetConfig+0xbe>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4a18      	ldr	r2, [pc, #96]	; (800caec <TIM_OC1_SetConfig+0x11c>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d111      	bne.n	800cab2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	695b      	ldr	r3, [r3, #20]
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	693a      	ldr	r2, [r7, #16]
 800caae:	4313      	orrs	r3, r2
 800cab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	693a      	ldr	r2, [r7, #16]
 800cab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	697a      	ldr	r2, [r7, #20]
 800caca:	621a      	str	r2, [r3, #32]
}
 800cacc:	bf00      	nop
 800cace:	371c      	adds	r7, #28
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	fffeff8f 	.word	0xfffeff8f
 800cadc:	40010000 	.word	0x40010000
 800cae0:	40010400 	.word	0x40010400
 800cae4:	40014000 	.word	0x40014000
 800cae8:	40014400 	.word	0x40014400
 800caec:	40014800 	.word	0x40014800

0800caf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b087      	sub	sp, #28
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	f023 0210 	bic.w	r2, r3, #16
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	4b34      	ldr	r3, [pc, #208]	; (800cbec <TIM_OC2_SetConfig+0xfc>)
 800cb1c:	4013      	ands	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	021b      	lsls	r3, r3, #8
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f023 0320 	bic.w	r3, r3, #32
 800cb3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	011b      	lsls	r3, r3, #4
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a29      	ldr	r2, [pc, #164]	; (800cbf0 <TIM_OC2_SetConfig+0x100>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d003      	beq.n	800cb58 <TIM_OC2_SetConfig+0x68>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a28      	ldr	r2, [pc, #160]	; (800cbf4 <TIM_OC2_SetConfig+0x104>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d10d      	bne.n	800cb74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	011b      	lsls	r3, r3, #4
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a1e      	ldr	r2, [pc, #120]	; (800cbf0 <TIM_OC2_SetConfig+0x100>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d00f      	beq.n	800cb9c <TIM_OC2_SetConfig+0xac>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a1d      	ldr	r2, [pc, #116]	; (800cbf4 <TIM_OC2_SetConfig+0x104>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d00b      	beq.n	800cb9c <TIM_OC2_SetConfig+0xac>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a1c      	ldr	r2, [pc, #112]	; (800cbf8 <TIM_OC2_SetConfig+0x108>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d007      	beq.n	800cb9c <TIM_OC2_SetConfig+0xac>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a1b      	ldr	r2, [pc, #108]	; (800cbfc <TIM_OC2_SetConfig+0x10c>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d003      	beq.n	800cb9c <TIM_OC2_SetConfig+0xac>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a1a      	ldr	r2, [pc, #104]	; (800cc00 <TIM_OC2_SetConfig+0x110>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d113      	bne.n	800cbc4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	695b      	ldr	r3, [r3, #20]
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	699b      	ldr	r3, [r3, #24]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	693a      	ldr	r2, [r7, #16]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	621a      	str	r2, [r3, #32]
}
 800cbde:	bf00      	nop
 800cbe0:	371c      	adds	r7, #28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	feff8fff 	.word	0xfeff8fff
 800cbf0:	40010000 	.word	0x40010000
 800cbf4:	40010400 	.word	0x40010400
 800cbf8:	40014000 	.word	0x40014000
 800cbfc:	40014400 	.word	0x40014400
 800cc00:	40014800 	.word	0x40014800

0800cc04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b087      	sub	sp, #28
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a1b      	ldr	r3, [r3, #32]
 800cc18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	69db      	ldr	r3, [r3, #28]
 800cc2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	4b33      	ldr	r3, [pc, #204]	; (800ccfc <TIM_OC3_SetConfig+0xf8>)
 800cc30:	4013      	ands	r3, r2
 800cc32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f023 0303 	bic.w	r3, r3, #3
 800cc3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	021b      	lsls	r3, r3, #8
 800cc54:	697a      	ldr	r2, [r7, #20]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a28      	ldr	r2, [pc, #160]	; (800cd00 <TIM_OC3_SetConfig+0xfc>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d003      	beq.n	800cc6a <TIM_OC3_SetConfig+0x66>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a27      	ldr	r2, [pc, #156]	; (800cd04 <TIM_OC3_SetConfig+0x100>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d10d      	bne.n	800cc86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	021b      	lsls	r3, r3, #8
 800cc78:	697a      	ldr	r2, [r7, #20]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4a1d      	ldr	r2, [pc, #116]	; (800cd00 <TIM_OC3_SetConfig+0xfc>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d00f      	beq.n	800ccae <TIM_OC3_SetConfig+0xaa>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a1c      	ldr	r2, [pc, #112]	; (800cd04 <TIM_OC3_SetConfig+0x100>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d00b      	beq.n	800ccae <TIM_OC3_SetConfig+0xaa>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4a1b      	ldr	r2, [pc, #108]	; (800cd08 <TIM_OC3_SetConfig+0x104>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d007      	beq.n	800ccae <TIM_OC3_SetConfig+0xaa>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4a1a      	ldr	r2, [pc, #104]	; (800cd0c <TIM_OC3_SetConfig+0x108>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d003      	beq.n	800ccae <TIM_OC3_SetConfig+0xaa>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a19      	ldr	r2, [pc, #100]	; (800cd10 <TIM_OC3_SetConfig+0x10c>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d113      	bne.n	800ccd6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ccbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	011b      	lsls	r3, r3, #4
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	011b      	lsls	r3, r3, #4
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	693a      	ldr	r2, [r7, #16]
 800ccda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	685a      	ldr	r2, [r3, #4]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	621a      	str	r2, [r3, #32]
}
 800ccf0:	bf00      	nop
 800ccf2:	371c      	adds	r7, #28
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	fffeff8f 	.word	0xfffeff8f
 800cd00:	40010000 	.word	0x40010000
 800cd04:	40010400 	.word	0x40010400
 800cd08:	40014000 	.word	0x40014000
 800cd0c:	40014400 	.word	0x40014400
 800cd10:	40014800 	.word	0x40014800

0800cd14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b087      	sub	sp, #28
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a1b      	ldr	r3, [r3, #32]
 800cd28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	69db      	ldr	r3, [r3, #28]
 800cd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	4b24      	ldr	r3, [pc, #144]	; (800cdd0 <TIM_OC4_SetConfig+0xbc>)
 800cd40:	4013      	ands	r3, r2
 800cd42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	021b      	lsls	r3, r3, #8
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	4313      	orrs	r3, r2
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	031b      	lsls	r3, r3, #12
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a19      	ldr	r2, [pc, #100]	; (800cdd4 <TIM_OC4_SetConfig+0xc0>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00f      	beq.n	800cd94 <TIM_OC4_SetConfig+0x80>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a18      	ldr	r2, [pc, #96]	; (800cdd8 <TIM_OC4_SetConfig+0xc4>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d00b      	beq.n	800cd94 <TIM_OC4_SetConfig+0x80>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a17      	ldr	r2, [pc, #92]	; (800cddc <TIM_OC4_SetConfig+0xc8>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d007      	beq.n	800cd94 <TIM_OC4_SetConfig+0x80>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a16      	ldr	r2, [pc, #88]	; (800cde0 <TIM_OC4_SetConfig+0xcc>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d003      	beq.n	800cd94 <TIM_OC4_SetConfig+0x80>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a15      	ldr	r2, [pc, #84]	; (800cde4 <TIM_OC4_SetConfig+0xd0>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d109      	bne.n	800cda8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	019b      	lsls	r3, r3, #6
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	693a      	ldr	r2, [r7, #16]
 800cdc0:	621a      	str	r2, [r3, #32]
}
 800cdc2:	bf00      	nop
 800cdc4:	371c      	adds	r7, #28
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	feff8fff 	.word	0xfeff8fff
 800cdd4:	40010000 	.word	0x40010000
 800cdd8:	40010400 	.word	0x40010400
 800cddc:	40014000 	.word	0x40014000
 800cde0:	40014400 	.word	0x40014400
 800cde4:	40014800 	.word	0x40014800

0800cde8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6a1b      	ldr	r3, [r3, #32]
 800cdfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	4b21      	ldr	r3, [pc, #132]	; (800ce98 <TIM_OC5_SetConfig+0xb0>)
 800ce14:	4013      	ands	r3, r2
 800ce16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ce28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	041b      	lsls	r3, r3, #16
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a18      	ldr	r2, [pc, #96]	; (800ce9c <TIM_OC5_SetConfig+0xb4>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d00f      	beq.n	800ce5e <TIM_OC5_SetConfig+0x76>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a17      	ldr	r2, [pc, #92]	; (800cea0 <TIM_OC5_SetConfig+0xb8>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d00b      	beq.n	800ce5e <TIM_OC5_SetConfig+0x76>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a16      	ldr	r2, [pc, #88]	; (800cea4 <TIM_OC5_SetConfig+0xbc>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d007      	beq.n	800ce5e <TIM_OC5_SetConfig+0x76>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a15      	ldr	r2, [pc, #84]	; (800cea8 <TIM_OC5_SetConfig+0xc0>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d003      	beq.n	800ce5e <TIM_OC5_SetConfig+0x76>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4a14      	ldr	r2, [pc, #80]	; (800ceac <TIM_OC5_SetConfig+0xc4>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d109      	bne.n	800ce72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	695b      	ldr	r3, [r3, #20]
 800ce6a:	021b      	lsls	r3, r3, #8
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	697a      	ldr	r2, [r7, #20]
 800ce76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	621a      	str	r2, [r3, #32]
}
 800ce8c:	bf00      	nop
 800ce8e:	371c      	adds	r7, #28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	fffeff8f 	.word	0xfffeff8f
 800ce9c:	40010000 	.word	0x40010000
 800cea0:	40010400 	.word	0x40010400
 800cea4:	40014000 	.word	0x40014000
 800cea8:	40014400 	.word	0x40014400
 800ceac:	40014800 	.word	0x40014800

0800ceb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6a1b      	ldr	r3, [r3, #32]
 800cec4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ced6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	4b22      	ldr	r3, [pc, #136]	; (800cf64 <TIM_OC6_SetConfig+0xb4>)
 800cedc:	4013      	ands	r3, r2
 800cede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	021b      	lsls	r3, r3, #8
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	051b      	lsls	r3, r3, #20
 800cefa:	693a      	ldr	r2, [r7, #16]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a19      	ldr	r2, [pc, #100]	; (800cf68 <TIM_OC6_SetConfig+0xb8>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d00f      	beq.n	800cf28 <TIM_OC6_SetConfig+0x78>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a18      	ldr	r2, [pc, #96]	; (800cf6c <TIM_OC6_SetConfig+0xbc>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d00b      	beq.n	800cf28 <TIM_OC6_SetConfig+0x78>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a17      	ldr	r2, [pc, #92]	; (800cf70 <TIM_OC6_SetConfig+0xc0>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d007      	beq.n	800cf28 <TIM_OC6_SetConfig+0x78>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a16      	ldr	r2, [pc, #88]	; (800cf74 <TIM_OC6_SetConfig+0xc4>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d003      	beq.n	800cf28 <TIM_OC6_SetConfig+0x78>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a15      	ldr	r2, [pc, #84]	; (800cf78 <TIM_OC6_SetConfig+0xc8>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d109      	bne.n	800cf3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	029b      	lsls	r3, r3, #10
 800cf36:	697a      	ldr	r2, [r7, #20]
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	621a      	str	r2, [r3, #32]
}
 800cf56:	bf00      	nop
 800cf58:	371c      	adds	r7, #28
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	feff8fff 	.word	0xfeff8fff
 800cf68:	40010000 	.word	0x40010000
 800cf6c:	40010400 	.word	0x40010400
 800cf70:	40014000 	.word	0x40014000
 800cf74:	40014400 	.word	0x40014400
 800cf78:	40014800 	.word	0x40014800

0800cf7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b087      	sub	sp, #28
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6a1b      	ldr	r3, [r3, #32]
 800cf8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6a1b      	ldr	r3, [r3, #32]
 800cf92:	f023 0201 	bic.w	r2, r3, #1
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	699b      	ldr	r3, [r3, #24]
 800cf9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	011b      	lsls	r3, r3, #4
 800cfac:	693a      	ldr	r2, [r7, #16]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f023 030a 	bic.w	r3, r3, #10
 800cfb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	621a      	str	r2, [r3, #32]
}
 800cfce:	bf00      	nop
 800cfd0:	371c      	adds	r7, #28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfda:	b480      	push	{r7}
 800cfdc:	b087      	sub	sp, #28
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	60f8      	str	r0, [r7, #12]
 800cfe2:	60b9      	str	r1, [r7, #8]
 800cfe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6a1b      	ldr	r3, [r3, #32]
 800cfea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6a1b      	ldr	r3, [r3, #32]
 800cff0:	f023 0210 	bic.w	r2, r3, #16
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	031b      	lsls	r3, r3, #12
 800d00a:	693a      	ldr	r2, [r7, #16]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d016:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	4313      	orrs	r3, r2
 800d020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	693a      	ldr	r2, [r7, #16]
 800d026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	621a      	str	r2, [r3, #32]
}
 800d02e:	bf00      	nop
 800d030:	371c      	adds	r7, #28
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
	...

0800d03c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	4b09      	ldr	r3, [pc, #36]	; (800d074 <TIM_ITRx_SetConfig+0x38>)
 800d050:	4013      	ands	r3, r2
 800d052:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	4313      	orrs	r3, r2
 800d05a:	f043 0307 	orr.w	r3, r3, #7
 800d05e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	609a      	str	r2, [r3, #8]
}
 800d066:	bf00      	nop
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	ffcfff8f 	.word	0xffcfff8f

0800d078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d078:	b480      	push	{r7}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	021a      	lsls	r2, r3, #8
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	431a      	orrs	r2, r3
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	697a      	ldr	r2, [r7, #20]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	609a      	str	r2, [r3, #8]
}
 800d0ac:	bf00      	nop
 800d0ae:	371c      	adds	r7, #28
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	f003 031f 	and.w	r3, r3, #31
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6a1a      	ldr	r2, [r3, #32]
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	43db      	mvns	r3, r3
 800d0da:	401a      	ands	r2, r3
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6a1a      	ldr	r2, [r3, #32]
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	f003 031f 	and.w	r3, r3, #31
 800d0ea:	6879      	ldr	r1, [r7, #4]
 800d0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d0f0:	431a      	orrs	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	621a      	str	r2, [r3, #32]
}
 800d0f6:	bf00      	nop
 800d0f8:	371c      	adds	r7, #28
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
	...

0800d104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d114:	2b01      	cmp	r3, #1
 800d116:	d101      	bne.n	800d11c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d118:	2302      	movs	r3, #2
 800d11a:	e06d      	b.n	800d1f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2202      	movs	r2, #2
 800d128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a30      	ldr	r2, [pc, #192]	; (800d204 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d004      	beq.n	800d150 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a2f      	ldr	r2, [pc, #188]	; (800d208 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d108      	bne.n	800d162 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d156:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4313      	orrs	r3, r2
 800d160:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d168:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	4313      	orrs	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a20      	ldr	r2, [pc, #128]	; (800d204 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d022      	beq.n	800d1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d18e:	d01d      	beq.n	800d1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a1d      	ldr	r2, [pc, #116]	; (800d20c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d018      	beq.n	800d1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a1c      	ldr	r2, [pc, #112]	; (800d210 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d013      	beq.n	800d1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a1a      	ldr	r2, [pc, #104]	; (800d214 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d00e      	beq.n	800d1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a15      	ldr	r2, [pc, #84]	; (800d208 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d009      	beq.n	800d1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a16      	ldr	r2, [pc, #88]	; (800d218 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d004      	beq.n	800d1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a15      	ldr	r2, [pc, #84]	; (800d21c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d10c      	bne.n	800d1e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	40010000 	.word	0x40010000
 800d208:	40010400 	.word	0x40010400
 800d20c:	40000400 	.word	0x40000400
 800d210:	40000800 	.word	0x40000800
 800d214:	40000c00 	.word	0x40000c00
 800d218:	40001800 	.word	0x40001800
 800d21c:	40014000 	.word	0x40014000

0800d220 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d101      	bne.n	800d26e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	e042      	b.n	800d2f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d274:	2b00      	cmp	r3, #0
 800d276:	d106      	bne.n	800d286 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7f5 fa13 	bl	80026ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2224      	movs	r2, #36	; 0x24
 800d28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f022 0201 	bic.w	r2, r2, #1
 800d29c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f001 f96a 	bl	800e580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f000 fbff 	bl	800dab0 <UART_SetConfig>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d101      	bne.n	800d2bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e01b      	b.n	800d2f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	685a      	ldr	r2, [r3, #4]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d2ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	689a      	ldr	r2, [r3, #8]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d2da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f042 0201 	orr.w	r2, r2, #1
 800d2ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f001 f9e9 	bl	800e6c4 <UART_CheckIdleState>
 800d2f2:	4603      	mov	r3, r0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b0ba      	sub	sp, #232	; 0xe8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	69db      	ldr	r3, [r3, #28]
 800d30a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d322:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d326:	f640 030f 	movw	r3, #2063	; 0x80f
 800d32a:	4013      	ands	r3, r2
 800d32c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d334:	2b00      	cmp	r3, #0
 800d336:	d11b      	bne.n	800d370 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d33c:	f003 0320 	and.w	r3, r3, #32
 800d340:	2b00      	cmp	r3, #0
 800d342:	d015      	beq.n	800d370 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d348:	f003 0320 	and.w	r3, r3, #32
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d105      	bne.n	800d35c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d009      	beq.n	800d370 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 8377 	beq.w	800da54 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	4798      	blx	r3
      }
      return;
 800d36e:	e371      	b.n	800da54 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 8123 	beq.w	800d5c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d37a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d37e:	4b8d      	ldr	r3, [pc, #564]	; (800d5b4 <HAL_UART_IRQHandler+0x2b8>)
 800d380:	4013      	ands	r3, r2
 800d382:	2b00      	cmp	r3, #0
 800d384:	d106      	bne.n	800d394 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d386:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d38a:	4b8b      	ldr	r3, [pc, #556]	; (800d5b8 <HAL_UART_IRQHandler+0x2bc>)
 800d38c:	4013      	ands	r3, r2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f000 8116 	beq.w	800d5c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d011      	beq.n	800d3c4 <HAL_UART_IRQHandler+0xc8>
 800d3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00b      	beq.n	800d3c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ba:	f043 0201 	orr.w	r2, r3, #1
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3c8:	f003 0302 	and.w	r3, r3, #2
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d011      	beq.n	800d3f4 <HAL_UART_IRQHandler+0xf8>
 800d3d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3d4:	f003 0301 	and.w	r3, r3, #1
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00b      	beq.n	800d3f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2202      	movs	r2, #2
 800d3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ea:	f043 0204 	orr.w	r2, r3, #4
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3f8:	f003 0304 	and.w	r3, r3, #4
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d011      	beq.n	800d424 <HAL_UART_IRQHandler+0x128>
 800d400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00b      	beq.n	800d424 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2204      	movs	r2, #4
 800d412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d41a:	f043 0202 	orr.w	r2, r3, #2
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d428:	f003 0308 	and.w	r3, r3, #8
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d017      	beq.n	800d460 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d434:	f003 0320 	and.w	r3, r3, #32
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d105      	bne.n	800d448 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d43c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d440:	4b5c      	ldr	r3, [pc, #368]	; (800d5b4 <HAL_UART_IRQHandler+0x2b8>)
 800d442:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d444:	2b00      	cmp	r3, #0
 800d446:	d00b      	beq.n	800d460 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2208      	movs	r2, #8
 800d44e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d456:	f043 0208 	orr.w	r2, r3, #8
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d012      	beq.n	800d492 <HAL_UART_IRQHandler+0x196>
 800d46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00c      	beq.n	800d492 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d488:	f043 0220 	orr.w	r2, r3, #32
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f000 82dd 	beq.w	800da58 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a2:	f003 0320 	and.w	r3, r3, #32
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d013      	beq.n	800d4d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4ae:	f003 0320 	and.w	r3, r3, #32
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d105      	bne.n	800d4c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d007      	beq.n	800d4d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e6:	2b40      	cmp	r3, #64	; 0x40
 800d4e8:	d005      	beq.n	800d4f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d4ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d054      	beq.n	800d5a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f001 f9fc 	bl	800e8f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d506:	2b40      	cmp	r3, #64	; 0x40
 800d508:	d146      	bne.n	800d598 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	3308      	adds	r3, #8
 800d510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3308      	adds	r3, #8
 800d532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d536:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d53a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d546:	e841 2300 	strex	r3, r2, [r1]
 800d54a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d54e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1d9      	bne.n	800d50a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d017      	beq.n	800d590 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d566:	4a15      	ldr	r2, [pc, #84]	; (800d5bc <HAL_UART_IRQHandler+0x2c0>)
 800d568:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d570:	4618      	mov	r0, r3
 800d572:	f7f8 f98b 	bl	800588c <HAL_DMA_Abort_IT>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d019      	beq.n	800d5b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d58a:	4610      	mov	r0, r2
 800d58c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d58e:	e00f      	b.n	800d5b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 fa77 	bl	800da84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d596:	e00b      	b.n	800d5b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fa73 	bl	800da84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d59e:	e007      	b.n	800d5b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fa6f 	bl	800da84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d5ae:	e253      	b.n	800da58 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5b0:	bf00      	nop
    return;
 800d5b2:	e251      	b.n	800da58 <HAL_UART_IRQHandler+0x75c>
 800d5b4:	10000001 	.word	0x10000001
 800d5b8:	04000120 	.word	0x04000120
 800d5bc:	0800e9c1 	.word	0x0800e9c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	f040 81e7 	bne.w	800d998 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ce:	f003 0310 	and.w	r3, r3, #16
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	f000 81e0 	beq.w	800d998 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5dc:	f003 0310 	and.w	r3, r3, #16
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 81d9 	beq.w	800d998 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2210      	movs	r2, #16
 800d5ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5f8:	2b40      	cmp	r3, #64	; 0x40
 800d5fa:	f040 8151 	bne.w	800d8a0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a96      	ldr	r2, [pc, #600]	; (800d860 <HAL_UART_IRQHandler+0x564>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d068      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a93      	ldr	r2, [pc, #588]	; (800d864 <HAL_UART_IRQHandler+0x568>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d061      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a91      	ldr	r2, [pc, #580]	; (800d868 <HAL_UART_IRQHandler+0x56c>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d05a      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a8e      	ldr	r2, [pc, #568]	; (800d86c <HAL_UART_IRQHandler+0x570>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d053      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a8c      	ldr	r2, [pc, #560]	; (800d870 <HAL_UART_IRQHandler+0x574>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d04c      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a89      	ldr	r2, [pc, #548]	; (800d874 <HAL_UART_IRQHandler+0x578>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d045      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a87      	ldr	r2, [pc, #540]	; (800d878 <HAL_UART_IRQHandler+0x57c>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d03e      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a84      	ldr	r2, [pc, #528]	; (800d87c <HAL_UART_IRQHandler+0x580>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d037      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a82      	ldr	r2, [pc, #520]	; (800d880 <HAL_UART_IRQHandler+0x584>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d030      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4a7f      	ldr	r2, [pc, #508]	; (800d884 <HAL_UART_IRQHandler+0x588>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d029      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a7d      	ldr	r2, [pc, #500]	; (800d888 <HAL_UART_IRQHandler+0x58c>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d022      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a7a      	ldr	r2, [pc, #488]	; (800d88c <HAL_UART_IRQHandler+0x590>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d01b      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a78      	ldr	r2, [pc, #480]	; (800d890 <HAL_UART_IRQHandler+0x594>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d014      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a75      	ldr	r2, [pc, #468]	; (800d894 <HAL_UART_IRQHandler+0x598>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d00d      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a73      	ldr	r2, [pc, #460]	; (800d898 <HAL_UART_IRQHandler+0x59c>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d006      	beq.n	800d6de <HAL_UART_IRQHandler+0x3e2>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a70      	ldr	r2, [pc, #448]	; (800d89c <HAL_UART_IRQHandler+0x5a0>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d106      	bne.n	800d6ec <HAL_UART_IRQHandler+0x3f0>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	e005      	b.n	800d6f8 <HAL_UART_IRQHandler+0x3fc>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 81ab 	beq.w	800da5c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d70c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d710:	429a      	cmp	r2, r3
 800d712:	f080 81a3 	bcs.w	800da5c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d71c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d726:	69db      	ldr	r3, [r3, #28]
 800d728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d72c:	f000 8087 	beq.w	800d83e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d73c:	e853 3f00 	ldrex	r3, [r3]
 800d740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d74c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	461a      	mov	r2, r3
 800d756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d75a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d75e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d762:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d766:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d76a:	e841 2300 	strex	r3, r2, [r1]
 800d76e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1da      	bne.n	800d730 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	3308      	adds	r3, #8
 800d780:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d784:	e853 3f00 	ldrex	r3, [r3]
 800d788:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d78a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d78c:	f023 0301 	bic.w	r3, r3, #1
 800d790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	3308      	adds	r3, #8
 800d79a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d79e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d7a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d7a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7aa:	e841 2300 	strex	r3, r2, [r1]
 800d7ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d7b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1e1      	bne.n	800d77a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7c0:	e853 3f00 	ldrex	r3, [r3]
 800d7c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d7c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d7da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d7dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d7e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7e2:	e841 2300 	strex	r3, r2, [r1]
 800d7e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d7e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e3      	bne.n	800d7b6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2220      	movs	r2, #32
 800d7f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d804:	e853 3f00 	ldrex	r3, [r3]
 800d808:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d80a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d80c:	f023 0310 	bic.w	r3, r3, #16
 800d810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	461a      	mov	r2, r3
 800d81a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d81e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d820:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d826:	e841 2300 	strex	r3, r2, [r1]
 800d82a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d82c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1e4      	bne.n	800d7fc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d838:	4618      	mov	r0, r3
 800d83a:	f7f7 fd09 	bl	8005250 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2202      	movs	r2, #2
 800d842:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d850:	b29b      	uxth	r3, r3
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	b29b      	uxth	r3, r3
 800d856:	4619      	mov	r1, r3
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f91d 	bl	800da98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d85e:	e0fd      	b.n	800da5c <HAL_UART_IRQHandler+0x760>
 800d860:	40020010 	.word	0x40020010
 800d864:	40020028 	.word	0x40020028
 800d868:	40020040 	.word	0x40020040
 800d86c:	40020058 	.word	0x40020058
 800d870:	40020070 	.word	0x40020070
 800d874:	40020088 	.word	0x40020088
 800d878:	400200a0 	.word	0x400200a0
 800d87c:	400200b8 	.word	0x400200b8
 800d880:	40020410 	.word	0x40020410
 800d884:	40020428 	.word	0x40020428
 800d888:	40020440 	.word	0x40020440
 800d88c:	40020458 	.word	0x40020458
 800d890:	40020470 	.word	0x40020470
 800d894:	40020488 	.word	0x40020488
 800d898:	400204a0 	.word	0x400204a0
 800d89c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f000 80cf 	beq.w	800da60 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d8c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f000 80ca 	beq.w	800da60 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d4:	e853 3f00 	ldrex	r3, [r3]
 800d8d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8ee:	647b      	str	r3, [r7, #68]	; 0x44
 800d8f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8f6:	e841 2300 	strex	r3, r2, [r1]
 800d8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e4      	bne.n	800d8cc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	3308      	adds	r3, #8
 800d908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	e853 3f00 	ldrex	r3, [r3]
 800d910:	623b      	str	r3, [r7, #32]
   return(result);
 800d912:	6a3a      	ldr	r2, [r7, #32]
 800d914:	4b55      	ldr	r3, [pc, #340]	; (800da6c <HAL_UART_IRQHandler+0x770>)
 800d916:	4013      	ands	r3, r2
 800d918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	3308      	adds	r3, #8
 800d922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d926:	633a      	str	r2, [r7, #48]	; 0x30
 800d928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d92e:	e841 2300 	strex	r3, r2, [r1]
 800d932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1e3      	bne.n	800d902 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2220      	movs	r2, #32
 800d93e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	e853 3f00 	ldrex	r3, [r3]
 800d95a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f023 0310 	bic.w	r3, r3, #16
 800d962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	461a      	mov	r2, r3
 800d96c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d970:	61fb      	str	r3, [r7, #28]
 800d972:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d974:	69b9      	ldr	r1, [r7, #24]
 800d976:	69fa      	ldr	r2, [r7, #28]
 800d978:	e841 2300 	strex	r3, r2, [r1]
 800d97c:	617b      	str	r3, [r7, #20]
   return(result);
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1e4      	bne.n	800d94e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2202      	movs	r2, #2
 800d988:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d98a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f881 	bl	800da98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d996:	e063      	b.n	800da60 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d99c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00e      	beq.n	800d9c2 <HAL_UART_IRQHandler+0x6c6>
 800d9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d008      	beq.n	800d9c2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d9b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f001 f841 	bl	800ea42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9c0:	e051      	b.n	800da66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d9c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d014      	beq.n	800d9f8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d9ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d105      	bne.n	800d9e6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d9da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d008      	beq.n	800d9f8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d03a      	beq.n	800da64 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	4798      	blx	r3
    }
    return;
 800d9f6:	e035      	b.n	800da64 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da00:	2b00      	cmp	r3, #0
 800da02:	d009      	beq.n	800da18 <HAL_UART_IRQHandler+0x71c>
 800da04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d003      	beq.n	800da18 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 ffeb 	bl	800e9ec <UART_EndTransmit_IT>
    return;
 800da16:	e026      	b.n	800da66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800da18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da20:	2b00      	cmp	r3, #0
 800da22:	d009      	beq.n	800da38 <HAL_UART_IRQHandler+0x73c>
 800da24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f001 f81a 	bl	800ea6a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da36:	e016      	b.n	800da66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800da38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d010      	beq.n	800da66 <HAL_UART_IRQHandler+0x76a>
 800da44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	da0c      	bge.n	800da66 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f001 f802 	bl	800ea56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da52:	e008      	b.n	800da66 <HAL_UART_IRQHandler+0x76a>
      return;
 800da54:	bf00      	nop
 800da56:	e006      	b.n	800da66 <HAL_UART_IRQHandler+0x76a>
    return;
 800da58:	bf00      	nop
 800da5a:	e004      	b.n	800da66 <HAL_UART_IRQHandler+0x76a>
      return;
 800da5c:	bf00      	nop
 800da5e:	e002      	b.n	800da66 <HAL_UART_IRQHandler+0x76a>
      return;
 800da60:	bf00      	nop
 800da62:	e000      	b.n	800da66 <HAL_UART_IRQHandler+0x76a>
    return;
 800da64:	bf00      	nop
  }
}
 800da66:	37e8      	adds	r7, #232	; 0xe8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	effffffe 	.word	0xeffffffe

0800da70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	460b      	mov	r3, r1
 800daa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800daa4:	bf00      	nop
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dab4:	b092      	sub	sp, #72	; 0x48
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	431a      	orrs	r2, r3
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	431a      	orrs	r2, r3
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	69db      	ldr	r3, [r3, #28]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	4bbe      	ldr	r3, [pc, #760]	; (800ddd8 <UART_SetConfig+0x328>)
 800dae0:	4013      	ands	r3, r2
 800dae2:	697a      	ldr	r2, [r7, #20]
 800dae4:	6812      	ldr	r2, [r2, #0]
 800dae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dae8:	430b      	orrs	r3, r1
 800daea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	68da      	ldr	r2, [r3, #12]
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	430a      	orrs	r2, r1
 800db00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4ab3      	ldr	r2, [pc, #716]	; (800dddc <UART_SetConfig+0x32c>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d004      	beq.n	800db1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	6a1b      	ldr	r3, [r3, #32]
 800db16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db18:	4313      	orrs	r3, r2
 800db1a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	689a      	ldr	r2, [r3, #8]
 800db22:	4baf      	ldr	r3, [pc, #700]	; (800dde0 <UART_SetConfig+0x330>)
 800db24:	4013      	ands	r3, r2
 800db26:	697a      	ldr	r2, [r7, #20]
 800db28:	6812      	ldr	r2, [r2, #0]
 800db2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db2c:	430b      	orrs	r3, r1
 800db2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db36:	f023 010f 	bic.w	r1, r3, #15
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	430a      	orrs	r2, r1
 800db44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4aa6      	ldr	r2, [pc, #664]	; (800dde4 <UART_SetConfig+0x334>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d177      	bne.n	800dc40 <UART_SetConfig+0x190>
 800db50:	4ba5      	ldr	r3, [pc, #660]	; (800dde8 <UART_SetConfig+0x338>)
 800db52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db58:	2b28      	cmp	r3, #40	; 0x28
 800db5a:	d86d      	bhi.n	800dc38 <UART_SetConfig+0x188>
 800db5c:	a201      	add	r2, pc, #4	; (adr r2, 800db64 <UART_SetConfig+0xb4>)
 800db5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db62:	bf00      	nop
 800db64:	0800dc09 	.word	0x0800dc09
 800db68:	0800dc39 	.word	0x0800dc39
 800db6c:	0800dc39 	.word	0x0800dc39
 800db70:	0800dc39 	.word	0x0800dc39
 800db74:	0800dc39 	.word	0x0800dc39
 800db78:	0800dc39 	.word	0x0800dc39
 800db7c:	0800dc39 	.word	0x0800dc39
 800db80:	0800dc39 	.word	0x0800dc39
 800db84:	0800dc11 	.word	0x0800dc11
 800db88:	0800dc39 	.word	0x0800dc39
 800db8c:	0800dc39 	.word	0x0800dc39
 800db90:	0800dc39 	.word	0x0800dc39
 800db94:	0800dc39 	.word	0x0800dc39
 800db98:	0800dc39 	.word	0x0800dc39
 800db9c:	0800dc39 	.word	0x0800dc39
 800dba0:	0800dc39 	.word	0x0800dc39
 800dba4:	0800dc19 	.word	0x0800dc19
 800dba8:	0800dc39 	.word	0x0800dc39
 800dbac:	0800dc39 	.word	0x0800dc39
 800dbb0:	0800dc39 	.word	0x0800dc39
 800dbb4:	0800dc39 	.word	0x0800dc39
 800dbb8:	0800dc39 	.word	0x0800dc39
 800dbbc:	0800dc39 	.word	0x0800dc39
 800dbc0:	0800dc39 	.word	0x0800dc39
 800dbc4:	0800dc21 	.word	0x0800dc21
 800dbc8:	0800dc39 	.word	0x0800dc39
 800dbcc:	0800dc39 	.word	0x0800dc39
 800dbd0:	0800dc39 	.word	0x0800dc39
 800dbd4:	0800dc39 	.word	0x0800dc39
 800dbd8:	0800dc39 	.word	0x0800dc39
 800dbdc:	0800dc39 	.word	0x0800dc39
 800dbe0:	0800dc39 	.word	0x0800dc39
 800dbe4:	0800dc29 	.word	0x0800dc29
 800dbe8:	0800dc39 	.word	0x0800dc39
 800dbec:	0800dc39 	.word	0x0800dc39
 800dbf0:	0800dc39 	.word	0x0800dc39
 800dbf4:	0800dc39 	.word	0x0800dc39
 800dbf8:	0800dc39 	.word	0x0800dc39
 800dbfc:	0800dc39 	.word	0x0800dc39
 800dc00:	0800dc39 	.word	0x0800dc39
 800dc04:	0800dc31 	.word	0x0800dc31
 800dc08:	2301      	movs	r3, #1
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e222      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc10:	2304      	movs	r3, #4
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e21e      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc18:	2308      	movs	r3, #8
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e21a      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc20:	2310      	movs	r3, #16
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e216      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc28:	2320      	movs	r3, #32
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e212      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc30:	2340      	movs	r3, #64	; 0x40
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e20e      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc38:	2380      	movs	r3, #128	; 0x80
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3e:	e20a      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a69      	ldr	r2, [pc, #420]	; (800ddec <UART_SetConfig+0x33c>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d130      	bne.n	800dcac <UART_SetConfig+0x1fc>
 800dc4a:	4b67      	ldr	r3, [pc, #412]	; (800dde8 <UART_SetConfig+0x338>)
 800dc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc4e:	f003 0307 	and.w	r3, r3, #7
 800dc52:	2b05      	cmp	r3, #5
 800dc54:	d826      	bhi.n	800dca4 <UART_SetConfig+0x1f4>
 800dc56:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <UART_SetConfig+0x1ac>)
 800dc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5c:	0800dc75 	.word	0x0800dc75
 800dc60:	0800dc7d 	.word	0x0800dc7d
 800dc64:	0800dc85 	.word	0x0800dc85
 800dc68:	0800dc8d 	.word	0x0800dc8d
 800dc6c:	0800dc95 	.word	0x0800dc95
 800dc70:	0800dc9d 	.word	0x0800dc9d
 800dc74:	2300      	movs	r3, #0
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	e1ec      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc7c:	2304      	movs	r3, #4
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc82:	e1e8      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc84:	2308      	movs	r3, #8
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8a:	e1e4      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc8c:	2310      	movs	r3, #16
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc92:	e1e0      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc94:	2320      	movs	r3, #32
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9a:	e1dc      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dc9c:	2340      	movs	r3, #64	; 0x40
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca2:	e1d8      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dca4:	2380      	movs	r3, #128	; 0x80
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcaa:	e1d4      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a4f      	ldr	r2, [pc, #316]	; (800ddf0 <UART_SetConfig+0x340>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d130      	bne.n	800dd18 <UART_SetConfig+0x268>
 800dcb6:	4b4c      	ldr	r3, [pc, #304]	; (800dde8 <UART_SetConfig+0x338>)
 800dcb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcba:	f003 0307 	and.w	r3, r3, #7
 800dcbe:	2b05      	cmp	r3, #5
 800dcc0:	d826      	bhi.n	800dd10 <UART_SetConfig+0x260>
 800dcc2:	a201      	add	r2, pc, #4	; (adr r2, 800dcc8 <UART_SetConfig+0x218>)
 800dcc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcc8:	0800dce1 	.word	0x0800dce1
 800dccc:	0800dce9 	.word	0x0800dce9
 800dcd0:	0800dcf1 	.word	0x0800dcf1
 800dcd4:	0800dcf9 	.word	0x0800dcf9
 800dcd8:	0800dd01 	.word	0x0800dd01
 800dcdc:	0800dd09 	.word	0x0800dd09
 800dce0:	2300      	movs	r3, #0
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce6:	e1b6      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dce8:	2304      	movs	r3, #4
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcee:	e1b2      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dcf0:	2308      	movs	r3, #8
 800dcf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf6:	e1ae      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dcf8:	2310      	movs	r3, #16
 800dcfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfe:	e1aa      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd00:	2320      	movs	r3, #32
 800dd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd06:	e1a6      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd08:	2340      	movs	r3, #64	; 0x40
 800dd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0e:	e1a2      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd10:	2380      	movs	r3, #128	; 0x80
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd16:	e19e      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a35      	ldr	r2, [pc, #212]	; (800ddf4 <UART_SetConfig+0x344>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d130      	bne.n	800dd84 <UART_SetConfig+0x2d4>
 800dd22:	4b31      	ldr	r3, [pc, #196]	; (800dde8 <UART_SetConfig+0x338>)
 800dd24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd26:	f003 0307 	and.w	r3, r3, #7
 800dd2a:	2b05      	cmp	r3, #5
 800dd2c:	d826      	bhi.n	800dd7c <UART_SetConfig+0x2cc>
 800dd2e:	a201      	add	r2, pc, #4	; (adr r2, 800dd34 <UART_SetConfig+0x284>)
 800dd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd34:	0800dd4d 	.word	0x0800dd4d
 800dd38:	0800dd55 	.word	0x0800dd55
 800dd3c:	0800dd5d 	.word	0x0800dd5d
 800dd40:	0800dd65 	.word	0x0800dd65
 800dd44:	0800dd6d 	.word	0x0800dd6d
 800dd48:	0800dd75 	.word	0x0800dd75
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e180      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd54:	2304      	movs	r3, #4
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5a:	e17c      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd5c:	2308      	movs	r3, #8
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd62:	e178      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd64:	2310      	movs	r3, #16
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6a:	e174      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd6c:	2320      	movs	r3, #32
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd72:	e170      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd74:	2340      	movs	r3, #64	; 0x40
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7a:	e16c      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd7c:	2380      	movs	r3, #128	; 0x80
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd82:	e168      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a1b      	ldr	r2, [pc, #108]	; (800ddf8 <UART_SetConfig+0x348>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d142      	bne.n	800de14 <UART_SetConfig+0x364>
 800dd8e:	4b16      	ldr	r3, [pc, #88]	; (800dde8 <UART_SetConfig+0x338>)
 800dd90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd92:	f003 0307 	and.w	r3, r3, #7
 800dd96:	2b05      	cmp	r3, #5
 800dd98:	d838      	bhi.n	800de0c <UART_SetConfig+0x35c>
 800dd9a:	a201      	add	r2, pc, #4	; (adr r2, 800dda0 <UART_SetConfig+0x2f0>)
 800dd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda0:	0800ddb9 	.word	0x0800ddb9
 800dda4:	0800ddc1 	.word	0x0800ddc1
 800dda8:	0800ddc9 	.word	0x0800ddc9
 800ddac:	0800ddd1 	.word	0x0800ddd1
 800ddb0:	0800ddfd 	.word	0x0800ddfd
 800ddb4:	0800de05 	.word	0x0800de05
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e14a      	b.n	800e056 <UART_SetConfig+0x5a6>
 800ddc0:	2304      	movs	r3, #4
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc6:	e146      	b.n	800e056 <UART_SetConfig+0x5a6>
 800ddc8:	2308      	movs	r3, #8
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddce:	e142      	b.n	800e056 <UART_SetConfig+0x5a6>
 800ddd0:	2310      	movs	r3, #16
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd6:	e13e      	b.n	800e056 <UART_SetConfig+0x5a6>
 800ddd8:	cfff69f3 	.word	0xcfff69f3
 800dddc:	58000c00 	.word	0x58000c00
 800dde0:	11fff4ff 	.word	0x11fff4ff
 800dde4:	40011000 	.word	0x40011000
 800dde8:	58024400 	.word	0x58024400
 800ddec:	40004400 	.word	0x40004400
 800ddf0:	40004800 	.word	0x40004800
 800ddf4:	40004c00 	.word	0x40004c00
 800ddf8:	40005000 	.word	0x40005000
 800ddfc:	2320      	movs	r3, #32
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de02:	e128      	b.n	800e056 <UART_SetConfig+0x5a6>
 800de04:	2340      	movs	r3, #64	; 0x40
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0a:	e124      	b.n	800e056 <UART_SetConfig+0x5a6>
 800de0c:	2380      	movs	r3, #128	; 0x80
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de12:	e120      	b.n	800e056 <UART_SetConfig+0x5a6>
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4acb      	ldr	r2, [pc, #812]	; (800e148 <UART_SetConfig+0x698>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d176      	bne.n	800df0c <UART_SetConfig+0x45c>
 800de1e:	4bcb      	ldr	r3, [pc, #812]	; (800e14c <UART_SetConfig+0x69c>)
 800de20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de26:	2b28      	cmp	r3, #40	; 0x28
 800de28:	d86c      	bhi.n	800df04 <UART_SetConfig+0x454>
 800de2a:	a201      	add	r2, pc, #4	; (adr r2, 800de30 <UART_SetConfig+0x380>)
 800de2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de30:	0800ded5 	.word	0x0800ded5
 800de34:	0800df05 	.word	0x0800df05
 800de38:	0800df05 	.word	0x0800df05
 800de3c:	0800df05 	.word	0x0800df05
 800de40:	0800df05 	.word	0x0800df05
 800de44:	0800df05 	.word	0x0800df05
 800de48:	0800df05 	.word	0x0800df05
 800de4c:	0800df05 	.word	0x0800df05
 800de50:	0800dedd 	.word	0x0800dedd
 800de54:	0800df05 	.word	0x0800df05
 800de58:	0800df05 	.word	0x0800df05
 800de5c:	0800df05 	.word	0x0800df05
 800de60:	0800df05 	.word	0x0800df05
 800de64:	0800df05 	.word	0x0800df05
 800de68:	0800df05 	.word	0x0800df05
 800de6c:	0800df05 	.word	0x0800df05
 800de70:	0800dee5 	.word	0x0800dee5
 800de74:	0800df05 	.word	0x0800df05
 800de78:	0800df05 	.word	0x0800df05
 800de7c:	0800df05 	.word	0x0800df05
 800de80:	0800df05 	.word	0x0800df05
 800de84:	0800df05 	.word	0x0800df05
 800de88:	0800df05 	.word	0x0800df05
 800de8c:	0800df05 	.word	0x0800df05
 800de90:	0800deed 	.word	0x0800deed
 800de94:	0800df05 	.word	0x0800df05
 800de98:	0800df05 	.word	0x0800df05
 800de9c:	0800df05 	.word	0x0800df05
 800dea0:	0800df05 	.word	0x0800df05
 800dea4:	0800df05 	.word	0x0800df05
 800dea8:	0800df05 	.word	0x0800df05
 800deac:	0800df05 	.word	0x0800df05
 800deb0:	0800def5 	.word	0x0800def5
 800deb4:	0800df05 	.word	0x0800df05
 800deb8:	0800df05 	.word	0x0800df05
 800debc:	0800df05 	.word	0x0800df05
 800dec0:	0800df05 	.word	0x0800df05
 800dec4:	0800df05 	.word	0x0800df05
 800dec8:	0800df05 	.word	0x0800df05
 800decc:	0800df05 	.word	0x0800df05
 800ded0:	0800defd 	.word	0x0800defd
 800ded4:	2301      	movs	r3, #1
 800ded6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deda:	e0bc      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dedc:	2304      	movs	r3, #4
 800dede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee2:	e0b8      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dee4:	2308      	movs	r3, #8
 800dee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deea:	e0b4      	b.n	800e056 <UART_SetConfig+0x5a6>
 800deec:	2310      	movs	r3, #16
 800deee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800def2:	e0b0      	b.n	800e056 <UART_SetConfig+0x5a6>
 800def4:	2320      	movs	r3, #32
 800def6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800defa:	e0ac      	b.n	800e056 <UART_SetConfig+0x5a6>
 800defc:	2340      	movs	r3, #64	; 0x40
 800defe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df02:	e0a8      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df04:	2380      	movs	r3, #128	; 0x80
 800df06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0a:	e0a4      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a8f      	ldr	r2, [pc, #572]	; (800e150 <UART_SetConfig+0x6a0>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d130      	bne.n	800df78 <UART_SetConfig+0x4c8>
 800df16:	4b8d      	ldr	r3, [pc, #564]	; (800e14c <UART_SetConfig+0x69c>)
 800df18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df1a:	f003 0307 	and.w	r3, r3, #7
 800df1e:	2b05      	cmp	r3, #5
 800df20:	d826      	bhi.n	800df70 <UART_SetConfig+0x4c0>
 800df22:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <UART_SetConfig+0x478>)
 800df24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df28:	0800df41 	.word	0x0800df41
 800df2c:	0800df49 	.word	0x0800df49
 800df30:	0800df51 	.word	0x0800df51
 800df34:	0800df59 	.word	0x0800df59
 800df38:	0800df61 	.word	0x0800df61
 800df3c:	0800df69 	.word	0x0800df69
 800df40:	2300      	movs	r3, #0
 800df42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df46:	e086      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df48:	2304      	movs	r3, #4
 800df4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4e:	e082      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df50:	2308      	movs	r3, #8
 800df52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df56:	e07e      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df58:	2310      	movs	r3, #16
 800df5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df5e:	e07a      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df60:	2320      	movs	r3, #32
 800df62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df66:	e076      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df68:	2340      	movs	r3, #64	; 0x40
 800df6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df6e:	e072      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df70:	2380      	movs	r3, #128	; 0x80
 800df72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df76:	e06e      	b.n	800e056 <UART_SetConfig+0x5a6>
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a75      	ldr	r2, [pc, #468]	; (800e154 <UART_SetConfig+0x6a4>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d130      	bne.n	800dfe4 <UART_SetConfig+0x534>
 800df82:	4b72      	ldr	r3, [pc, #456]	; (800e14c <UART_SetConfig+0x69c>)
 800df84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df86:	f003 0307 	and.w	r3, r3, #7
 800df8a:	2b05      	cmp	r3, #5
 800df8c:	d826      	bhi.n	800dfdc <UART_SetConfig+0x52c>
 800df8e:	a201      	add	r2, pc, #4	; (adr r2, 800df94 <UART_SetConfig+0x4e4>)
 800df90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df94:	0800dfad 	.word	0x0800dfad
 800df98:	0800dfb5 	.word	0x0800dfb5
 800df9c:	0800dfbd 	.word	0x0800dfbd
 800dfa0:	0800dfc5 	.word	0x0800dfc5
 800dfa4:	0800dfcd 	.word	0x0800dfcd
 800dfa8:	0800dfd5 	.word	0x0800dfd5
 800dfac:	2300      	movs	r3, #0
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb2:	e050      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dfb4:	2304      	movs	r3, #4
 800dfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfba:	e04c      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dfbc:	2308      	movs	r3, #8
 800dfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc2:	e048      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dfc4:	2310      	movs	r3, #16
 800dfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfca:	e044      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dfcc:	2320      	movs	r3, #32
 800dfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfd2:	e040      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dfd4:	2340      	movs	r3, #64	; 0x40
 800dfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfda:	e03c      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dfdc:	2380      	movs	r3, #128	; 0x80
 800dfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe2:	e038      	b.n	800e056 <UART_SetConfig+0x5a6>
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a5b      	ldr	r2, [pc, #364]	; (800e158 <UART_SetConfig+0x6a8>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d130      	bne.n	800e050 <UART_SetConfig+0x5a0>
 800dfee:	4b57      	ldr	r3, [pc, #348]	; (800e14c <UART_SetConfig+0x69c>)
 800dff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dff2:	f003 0307 	and.w	r3, r3, #7
 800dff6:	2b05      	cmp	r3, #5
 800dff8:	d826      	bhi.n	800e048 <UART_SetConfig+0x598>
 800dffa:	a201      	add	r2, pc, #4	; (adr r2, 800e000 <UART_SetConfig+0x550>)
 800dffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e000:	0800e019 	.word	0x0800e019
 800e004:	0800e021 	.word	0x0800e021
 800e008:	0800e029 	.word	0x0800e029
 800e00c:	0800e031 	.word	0x0800e031
 800e010:	0800e039 	.word	0x0800e039
 800e014:	0800e041 	.word	0x0800e041
 800e018:	2302      	movs	r3, #2
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01e:	e01a      	b.n	800e056 <UART_SetConfig+0x5a6>
 800e020:	2304      	movs	r3, #4
 800e022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e026:	e016      	b.n	800e056 <UART_SetConfig+0x5a6>
 800e028:	2308      	movs	r3, #8
 800e02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02e:	e012      	b.n	800e056 <UART_SetConfig+0x5a6>
 800e030:	2310      	movs	r3, #16
 800e032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e036:	e00e      	b.n	800e056 <UART_SetConfig+0x5a6>
 800e038:	2320      	movs	r3, #32
 800e03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03e:	e00a      	b.n	800e056 <UART_SetConfig+0x5a6>
 800e040:	2340      	movs	r3, #64	; 0x40
 800e042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e046:	e006      	b.n	800e056 <UART_SetConfig+0x5a6>
 800e048:	2380      	movs	r3, #128	; 0x80
 800e04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04e:	e002      	b.n	800e056 <UART_SetConfig+0x5a6>
 800e050:	2380      	movs	r3, #128	; 0x80
 800e052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a3f      	ldr	r2, [pc, #252]	; (800e158 <UART_SetConfig+0x6a8>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	f040 80f8 	bne.w	800e252 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e062:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e066:	2b20      	cmp	r3, #32
 800e068:	dc46      	bgt.n	800e0f8 <UART_SetConfig+0x648>
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	f2c0 8082 	blt.w	800e174 <UART_SetConfig+0x6c4>
 800e070:	3b02      	subs	r3, #2
 800e072:	2b1e      	cmp	r3, #30
 800e074:	d87e      	bhi.n	800e174 <UART_SetConfig+0x6c4>
 800e076:	a201      	add	r2, pc, #4	; (adr r2, 800e07c <UART_SetConfig+0x5cc>)
 800e078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e07c:	0800e0ff 	.word	0x0800e0ff
 800e080:	0800e175 	.word	0x0800e175
 800e084:	0800e107 	.word	0x0800e107
 800e088:	0800e175 	.word	0x0800e175
 800e08c:	0800e175 	.word	0x0800e175
 800e090:	0800e175 	.word	0x0800e175
 800e094:	0800e117 	.word	0x0800e117
 800e098:	0800e175 	.word	0x0800e175
 800e09c:	0800e175 	.word	0x0800e175
 800e0a0:	0800e175 	.word	0x0800e175
 800e0a4:	0800e175 	.word	0x0800e175
 800e0a8:	0800e175 	.word	0x0800e175
 800e0ac:	0800e175 	.word	0x0800e175
 800e0b0:	0800e175 	.word	0x0800e175
 800e0b4:	0800e127 	.word	0x0800e127
 800e0b8:	0800e175 	.word	0x0800e175
 800e0bc:	0800e175 	.word	0x0800e175
 800e0c0:	0800e175 	.word	0x0800e175
 800e0c4:	0800e175 	.word	0x0800e175
 800e0c8:	0800e175 	.word	0x0800e175
 800e0cc:	0800e175 	.word	0x0800e175
 800e0d0:	0800e175 	.word	0x0800e175
 800e0d4:	0800e175 	.word	0x0800e175
 800e0d8:	0800e175 	.word	0x0800e175
 800e0dc:	0800e175 	.word	0x0800e175
 800e0e0:	0800e175 	.word	0x0800e175
 800e0e4:	0800e175 	.word	0x0800e175
 800e0e8:	0800e175 	.word	0x0800e175
 800e0ec:	0800e175 	.word	0x0800e175
 800e0f0:	0800e175 	.word	0x0800e175
 800e0f4:	0800e167 	.word	0x0800e167
 800e0f8:	2b40      	cmp	r3, #64	; 0x40
 800e0fa:	d037      	beq.n	800e16c <UART_SetConfig+0x6bc>
 800e0fc:	e03a      	b.n	800e174 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e0fe:	f7fd f86b 	bl	800b1d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e102:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e104:	e03c      	b.n	800e180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fd f87a 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e114:	e034      	b.n	800e180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e116:	f107 0318 	add.w	r3, r7, #24
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fd f9c6 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e124:	e02c      	b.n	800e180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e126:	4b09      	ldr	r3, [pc, #36]	; (800e14c <UART_SetConfig+0x69c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f003 0320 	and.w	r3, r3, #32
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d016      	beq.n	800e160 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e132:	4b06      	ldr	r3, [pc, #24]	; (800e14c <UART_SetConfig+0x69c>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	08db      	lsrs	r3, r3, #3
 800e138:	f003 0303 	and.w	r3, r3, #3
 800e13c:	4a07      	ldr	r2, [pc, #28]	; (800e15c <UART_SetConfig+0x6ac>)
 800e13e:	fa22 f303 	lsr.w	r3, r2, r3
 800e142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e144:	e01c      	b.n	800e180 <UART_SetConfig+0x6d0>
 800e146:	bf00      	nop
 800e148:	40011400 	.word	0x40011400
 800e14c:	58024400 	.word	0x58024400
 800e150:	40007800 	.word	0x40007800
 800e154:	40007c00 	.word	0x40007c00
 800e158:	58000c00 	.word	0x58000c00
 800e15c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e160:	4b9d      	ldr	r3, [pc, #628]	; (800e3d8 <UART_SetConfig+0x928>)
 800e162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e164:	e00c      	b.n	800e180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e166:	4b9d      	ldr	r3, [pc, #628]	; (800e3dc <UART_SetConfig+0x92c>)
 800e168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e16a:	e009      	b.n	800e180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e16c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e172:	e005      	b.n	800e180 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e17e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e182:	2b00      	cmp	r3, #0
 800e184:	f000 81de 	beq.w	800e544 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18c:	4a94      	ldr	r2, [pc, #592]	; (800e3e0 <UART_SetConfig+0x930>)
 800e18e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e192:	461a      	mov	r2, r3
 800e194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e196:	fbb3 f3f2 	udiv	r3, r3, r2
 800e19a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	4413      	add	r3, r2
 800e1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d305      	bcc.n	800e1b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d903      	bls.n	800e1c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e1be:	e1c1      	b.n	800e544 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	60bb      	str	r3, [r7, #8]
 800e1c6:	60fa      	str	r2, [r7, #12]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1cc:	4a84      	ldr	r2, [pc, #528]	; (800e3e0 <UART_SetConfig+0x930>)
 800e1ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	603b      	str	r3, [r7, #0]
 800e1d8:	607a      	str	r2, [r7, #4]
 800e1da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e1e2:	f7f2 f879 	bl	80002d8 <__aeabi_uldivmod>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	4610      	mov	r0, r2
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	f04f 0200 	mov.w	r2, #0
 800e1f2:	f04f 0300 	mov.w	r3, #0
 800e1f6:	020b      	lsls	r3, r1, #8
 800e1f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e1fc:	0202      	lsls	r2, r0, #8
 800e1fe:	6979      	ldr	r1, [r7, #20]
 800e200:	6849      	ldr	r1, [r1, #4]
 800e202:	0849      	lsrs	r1, r1, #1
 800e204:	2000      	movs	r0, #0
 800e206:	460c      	mov	r4, r1
 800e208:	4605      	mov	r5, r0
 800e20a:	eb12 0804 	adds.w	r8, r2, r4
 800e20e:	eb43 0905 	adc.w	r9, r3, r5
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	469a      	mov	sl, r3
 800e21a:	4693      	mov	fp, r2
 800e21c:	4652      	mov	r2, sl
 800e21e:	465b      	mov	r3, fp
 800e220:	4640      	mov	r0, r8
 800e222:	4649      	mov	r1, r9
 800e224:	f7f2 f858 	bl	80002d8 <__aeabi_uldivmod>
 800e228:	4602      	mov	r2, r0
 800e22a:	460b      	mov	r3, r1
 800e22c:	4613      	mov	r3, r2
 800e22e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e236:	d308      	bcc.n	800e24a <UART_SetConfig+0x79a>
 800e238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e23e:	d204      	bcs.n	800e24a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e246:	60da      	str	r2, [r3, #12]
 800e248:	e17c      	b.n	800e544 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e250:	e178      	b.n	800e544 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	69db      	ldr	r3, [r3, #28]
 800e256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e25a:	f040 80c5 	bne.w	800e3e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e25e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e262:	2b20      	cmp	r3, #32
 800e264:	dc48      	bgt.n	800e2f8 <UART_SetConfig+0x848>
 800e266:	2b00      	cmp	r3, #0
 800e268:	db7b      	blt.n	800e362 <UART_SetConfig+0x8b2>
 800e26a:	2b20      	cmp	r3, #32
 800e26c:	d879      	bhi.n	800e362 <UART_SetConfig+0x8b2>
 800e26e:	a201      	add	r2, pc, #4	; (adr r2, 800e274 <UART_SetConfig+0x7c4>)
 800e270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e274:	0800e2ff 	.word	0x0800e2ff
 800e278:	0800e307 	.word	0x0800e307
 800e27c:	0800e363 	.word	0x0800e363
 800e280:	0800e363 	.word	0x0800e363
 800e284:	0800e30f 	.word	0x0800e30f
 800e288:	0800e363 	.word	0x0800e363
 800e28c:	0800e363 	.word	0x0800e363
 800e290:	0800e363 	.word	0x0800e363
 800e294:	0800e31f 	.word	0x0800e31f
 800e298:	0800e363 	.word	0x0800e363
 800e29c:	0800e363 	.word	0x0800e363
 800e2a0:	0800e363 	.word	0x0800e363
 800e2a4:	0800e363 	.word	0x0800e363
 800e2a8:	0800e363 	.word	0x0800e363
 800e2ac:	0800e363 	.word	0x0800e363
 800e2b0:	0800e363 	.word	0x0800e363
 800e2b4:	0800e32f 	.word	0x0800e32f
 800e2b8:	0800e363 	.word	0x0800e363
 800e2bc:	0800e363 	.word	0x0800e363
 800e2c0:	0800e363 	.word	0x0800e363
 800e2c4:	0800e363 	.word	0x0800e363
 800e2c8:	0800e363 	.word	0x0800e363
 800e2cc:	0800e363 	.word	0x0800e363
 800e2d0:	0800e363 	.word	0x0800e363
 800e2d4:	0800e363 	.word	0x0800e363
 800e2d8:	0800e363 	.word	0x0800e363
 800e2dc:	0800e363 	.word	0x0800e363
 800e2e0:	0800e363 	.word	0x0800e363
 800e2e4:	0800e363 	.word	0x0800e363
 800e2e8:	0800e363 	.word	0x0800e363
 800e2ec:	0800e363 	.word	0x0800e363
 800e2f0:	0800e363 	.word	0x0800e363
 800e2f4:	0800e355 	.word	0x0800e355
 800e2f8:	2b40      	cmp	r3, #64	; 0x40
 800e2fa:	d02e      	beq.n	800e35a <UART_SetConfig+0x8aa>
 800e2fc:	e031      	b.n	800e362 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2fe:	f7fa ffb5 	bl	800926c <HAL_RCC_GetPCLK1Freq>
 800e302:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e304:	e033      	b.n	800e36e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e306:	f7fa ffc7 	bl	8009298 <HAL_RCC_GetPCLK2Freq>
 800e30a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e30c:	e02f      	b.n	800e36e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e312:	4618      	mov	r0, r3
 800e314:	f7fc ff76 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e31c:	e027      	b.n	800e36e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e31e:	f107 0318 	add.w	r3, r7, #24
 800e322:	4618      	mov	r0, r3
 800e324:	f7fd f8c2 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e32c:	e01f      	b.n	800e36e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e32e:	4b2d      	ldr	r3, [pc, #180]	; (800e3e4 <UART_SetConfig+0x934>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f003 0320 	and.w	r3, r3, #32
 800e336:	2b00      	cmp	r3, #0
 800e338:	d009      	beq.n	800e34e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e33a:	4b2a      	ldr	r3, [pc, #168]	; (800e3e4 <UART_SetConfig+0x934>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	08db      	lsrs	r3, r3, #3
 800e340:	f003 0303 	and.w	r3, r3, #3
 800e344:	4a24      	ldr	r2, [pc, #144]	; (800e3d8 <UART_SetConfig+0x928>)
 800e346:	fa22 f303 	lsr.w	r3, r2, r3
 800e34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e34c:	e00f      	b.n	800e36e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e34e:	4b22      	ldr	r3, [pc, #136]	; (800e3d8 <UART_SetConfig+0x928>)
 800e350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e352:	e00c      	b.n	800e36e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e354:	4b21      	ldr	r3, [pc, #132]	; (800e3dc <UART_SetConfig+0x92c>)
 800e356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e358:	e009      	b.n	800e36e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e35a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e360:	e005      	b.n	800e36e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e362:	2300      	movs	r3, #0
 800e364:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e36c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 80e7 	beq.w	800e544 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37a:	4a19      	ldr	r2, [pc, #100]	; (800e3e0 <UART_SetConfig+0x930>)
 800e37c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e380:	461a      	mov	r2, r3
 800e382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e384:	fbb3 f3f2 	udiv	r3, r3, r2
 800e388:	005a      	lsls	r2, r3, #1
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	085b      	lsrs	r3, r3, #1
 800e390:	441a      	add	r2, r3
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	fbb2 f3f3 	udiv	r3, r2, r3
 800e39a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39e:	2b0f      	cmp	r3, #15
 800e3a0:	d916      	bls.n	800e3d0 <UART_SetConfig+0x920>
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3a8:	d212      	bcs.n	800e3d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	f023 030f 	bic.w	r3, r3, #15
 800e3b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b6:	085b      	lsrs	r3, r3, #1
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	f003 0307 	and.w	r3, r3, #7
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e3cc:	60da      	str	r2, [r3, #12]
 800e3ce:	e0b9      	b.n	800e544 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3d6:	e0b5      	b.n	800e544 <UART_SetConfig+0xa94>
 800e3d8:	03d09000 	.word	0x03d09000
 800e3dc:	003d0900 	.word	0x003d0900
 800e3e0:	0800f3a4 	.word	0x0800f3a4
 800e3e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e3e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e3ec:	2b20      	cmp	r3, #32
 800e3ee:	dc49      	bgt.n	800e484 <UART_SetConfig+0x9d4>
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	db7c      	blt.n	800e4ee <UART_SetConfig+0xa3e>
 800e3f4:	2b20      	cmp	r3, #32
 800e3f6:	d87a      	bhi.n	800e4ee <UART_SetConfig+0xa3e>
 800e3f8:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <UART_SetConfig+0x950>)
 800e3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3fe:	bf00      	nop
 800e400:	0800e48b 	.word	0x0800e48b
 800e404:	0800e493 	.word	0x0800e493
 800e408:	0800e4ef 	.word	0x0800e4ef
 800e40c:	0800e4ef 	.word	0x0800e4ef
 800e410:	0800e49b 	.word	0x0800e49b
 800e414:	0800e4ef 	.word	0x0800e4ef
 800e418:	0800e4ef 	.word	0x0800e4ef
 800e41c:	0800e4ef 	.word	0x0800e4ef
 800e420:	0800e4ab 	.word	0x0800e4ab
 800e424:	0800e4ef 	.word	0x0800e4ef
 800e428:	0800e4ef 	.word	0x0800e4ef
 800e42c:	0800e4ef 	.word	0x0800e4ef
 800e430:	0800e4ef 	.word	0x0800e4ef
 800e434:	0800e4ef 	.word	0x0800e4ef
 800e438:	0800e4ef 	.word	0x0800e4ef
 800e43c:	0800e4ef 	.word	0x0800e4ef
 800e440:	0800e4bb 	.word	0x0800e4bb
 800e444:	0800e4ef 	.word	0x0800e4ef
 800e448:	0800e4ef 	.word	0x0800e4ef
 800e44c:	0800e4ef 	.word	0x0800e4ef
 800e450:	0800e4ef 	.word	0x0800e4ef
 800e454:	0800e4ef 	.word	0x0800e4ef
 800e458:	0800e4ef 	.word	0x0800e4ef
 800e45c:	0800e4ef 	.word	0x0800e4ef
 800e460:	0800e4ef 	.word	0x0800e4ef
 800e464:	0800e4ef 	.word	0x0800e4ef
 800e468:	0800e4ef 	.word	0x0800e4ef
 800e46c:	0800e4ef 	.word	0x0800e4ef
 800e470:	0800e4ef 	.word	0x0800e4ef
 800e474:	0800e4ef 	.word	0x0800e4ef
 800e478:	0800e4ef 	.word	0x0800e4ef
 800e47c:	0800e4ef 	.word	0x0800e4ef
 800e480:	0800e4e1 	.word	0x0800e4e1
 800e484:	2b40      	cmp	r3, #64	; 0x40
 800e486:	d02e      	beq.n	800e4e6 <UART_SetConfig+0xa36>
 800e488:	e031      	b.n	800e4ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e48a:	f7fa feef 	bl	800926c <HAL_RCC_GetPCLK1Freq>
 800e48e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e490:	e033      	b.n	800e4fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e492:	f7fa ff01 	bl	8009298 <HAL_RCC_GetPCLK2Freq>
 800e496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e498:	e02f      	b.n	800e4fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e49a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fc feb0 	bl	800b204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4a8:	e027      	b.n	800e4fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4aa:	f107 0318 	add.w	r3, r7, #24
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fc fffc 	bl	800b4ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4b8:	e01f      	b.n	800e4fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4ba:	4b2d      	ldr	r3, [pc, #180]	; (800e570 <UART_SetConfig+0xac0>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f003 0320 	and.w	r3, r3, #32
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d009      	beq.n	800e4da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4c6:	4b2a      	ldr	r3, [pc, #168]	; (800e570 <UART_SetConfig+0xac0>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	08db      	lsrs	r3, r3, #3
 800e4cc:	f003 0303 	and.w	r3, r3, #3
 800e4d0:	4a28      	ldr	r2, [pc, #160]	; (800e574 <UART_SetConfig+0xac4>)
 800e4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4d8:	e00f      	b.n	800e4fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e4da:	4b26      	ldr	r3, [pc, #152]	; (800e574 <UART_SetConfig+0xac4>)
 800e4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4de:	e00c      	b.n	800e4fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4e0:	4b25      	ldr	r3, [pc, #148]	; (800e578 <UART_SetConfig+0xac8>)
 800e4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4e4:	e009      	b.n	800e4fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4ec:	e005      	b.n	800e4fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e4f8:	bf00      	nop
    }

    if (pclk != 0U)
 800e4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d021      	beq.n	800e544 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e504:	4a1d      	ldr	r2, [pc, #116]	; (800e57c <UART_SetConfig+0xacc>)
 800e506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e50a:	461a      	mov	r2, r3
 800e50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	085b      	lsrs	r3, r3, #1
 800e518:	441a      	add	r2, r3
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e522:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e526:	2b0f      	cmp	r3, #15
 800e528:	d909      	bls.n	800e53e <UART_SetConfig+0xa8e>
 800e52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e530:	d205      	bcs.n	800e53e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e534:	b29a      	uxth	r2, r3
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60da      	str	r2, [r3, #12]
 800e53c:	e002      	b.n	800e544 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	2201      	movs	r2, #1
 800e548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	2201      	movs	r2, #1
 800e550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	2200      	movs	r2, #0
 800e558:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2200      	movs	r2, #0
 800e55e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e560:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e564:	4618      	mov	r0, r3
 800e566:	3748      	adds	r7, #72	; 0x48
 800e568:	46bd      	mov	sp, r7
 800e56a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e56e:	bf00      	nop
 800e570:	58024400 	.word	0x58024400
 800e574:	03d09000 	.word	0x03d09000
 800e578:	003d0900 	.word	0x003d0900
 800e57c:	0800f3a4 	.word	0x0800f3a4

0800e580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e58c:	f003 0308 	and.w	r3, r3, #8
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00a      	beq.n	800e5aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	430a      	orrs	r2, r1
 800e5a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ae:	f003 0301 	and.w	r3, r3, #1
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00a      	beq.n	800e5cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	430a      	orrs	r2, r1
 800e5ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d0:	f003 0302 	and.w	r3, r3, #2
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00a      	beq.n	800e5ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	430a      	orrs	r2, r1
 800e5ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f2:	f003 0304 	and.w	r3, r3, #4
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	430a      	orrs	r2, r1
 800e60e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e614:	f003 0310 	and.w	r3, r3, #16
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00a      	beq.n	800e632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	430a      	orrs	r2, r1
 800e630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e636:	f003 0320 	and.w	r3, r3, #32
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00a      	beq.n	800e654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	430a      	orrs	r2, r1
 800e652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d01a      	beq.n	800e696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	430a      	orrs	r2, r1
 800e674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e67e:	d10a      	bne.n	800e696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	430a      	orrs	r2, r1
 800e694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00a      	beq.n	800e6b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	430a      	orrs	r2, r1
 800e6b6:	605a      	str	r2, [r3, #4]
  }
}
 800e6b8:	bf00      	nop
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b098      	sub	sp, #96	; 0x60
 800e6c8:	af02      	add	r7, sp, #8
 800e6ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e6d4:	f7f4 fa02 	bl	8002adc <HAL_GetTick>
 800e6d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f003 0308 	and.w	r3, r3, #8
 800e6e4:	2b08      	cmp	r3, #8
 800e6e6:	d12f      	bne.n	800e748 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 f88e 	bl	800e818 <UART_WaitOnFlagUntilTimeout>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d022      	beq.n	800e748 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	e853 3f00 	ldrex	r3, [r3]
 800e70e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e716:	653b      	str	r3, [r7, #80]	; 0x50
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	461a      	mov	r2, r3
 800e71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e720:	647b      	str	r3, [r7, #68]	; 0x44
 800e722:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e728:	e841 2300 	strex	r3, r2, [r1]
 800e72c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e730:	2b00      	cmp	r3, #0
 800e732:	d1e6      	bne.n	800e702 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2220      	movs	r2, #32
 800e738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e744:	2303      	movs	r3, #3
 800e746:	e063      	b.n	800e810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f003 0304 	and.w	r3, r3, #4
 800e752:	2b04      	cmp	r3, #4
 800e754:	d149      	bne.n	800e7ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e756:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e75e:	2200      	movs	r2, #0
 800e760:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f857 	bl	800e818 <UART_WaitOnFlagUntilTimeout>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d03c      	beq.n	800e7ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	e853 3f00 	ldrex	r3, [r3]
 800e77c:	623b      	str	r3, [r7, #32]
   return(result);
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e784:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	461a      	mov	r2, r3
 800e78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e78e:	633b      	str	r3, [r7, #48]	; 0x30
 800e790:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e796:	e841 2300 	strex	r3, r2, [r1]
 800e79a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d1e6      	bne.n	800e770 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	3308      	adds	r3, #8
 800e7a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	e853 3f00 	ldrex	r3, [r3]
 800e7b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f023 0301 	bic.w	r3, r3, #1
 800e7b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	3308      	adds	r3, #8
 800e7c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7c2:	61fa      	str	r2, [r7, #28]
 800e7c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c6:	69b9      	ldr	r1, [r7, #24]
 800e7c8:	69fa      	ldr	r2, [r7, #28]
 800e7ca:	e841 2300 	strex	r3, r2, [r1]
 800e7ce:	617b      	str	r3, [r7, #20]
   return(result);
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d1e5      	bne.n	800e7a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2220      	movs	r2, #32
 800e7da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e012      	b.n	800e810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2220      	movs	r2, #32
 800e7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2220      	movs	r2, #32
 800e7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	3758      	adds	r7, #88	; 0x58
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	603b      	str	r3, [r7, #0]
 800e824:	4613      	mov	r3, r2
 800e826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e828:	e04f      	b.n	800e8ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e830:	d04b      	beq.n	800e8ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e832:	f7f4 f953 	bl	8002adc <HAL_GetTick>
 800e836:	4602      	mov	r2, r0
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	69ba      	ldr	r2, [r7, #24]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d302      	bcc.n	800e848 <UART_WaitOnFlagUntilTimeout+0x30>
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d101      	bne.n	800e84c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e848:	2303      	movs	r3, #3
 800e84a:	e04e      	b.n	800e8ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 0304 	and.w	r3, r3, #4
 800e856:	2b00      	cmp	r3, #0
 800e858:	d037      	beq.n	800e8ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b80      	cmp	r3, #128	; 0x80
 800e85e:	d034      	beq.n	800e8ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	2b40      	cmp	r3, #64	; 0x40
 800e864:	d031      	beq.n	800e8ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	69db      	ldr	r3, [r3, #28]
 800e86c:	f003 0308 	and.w	r3, r3, #8
 800e870:	2b08      	cmp	r3, #8
 800e872:	d110      	bne.n	800e896 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2208      	movs	r2, #8
 800e87a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f000 f839 	bl	800e8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2208      	movs	r2, #8
 800e886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	e029      	b.n	800e8ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	69db      	ldr	r3, [r3, #28]
 800e89c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8a4:	d111      	bne.n	800e8ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f000 f81f 	bl	800e8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2220      	movs	r2, #32
 800e8ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	e00f      	b.n	800e8ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	69da      	ldr	r2, [r3, #28]
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	68ba      	ldr	r2, [r7, #8]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	bf0c      	ite	eq
 800e8da:	2301      	moveq	r3, #1
 800e8dc:	2300      	movne	r3, #0
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	79fb      	ldrb	r3, [r7, #7]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d0a0      	beq.n	800e82a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
	...

0800e8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b095      	sub	sp, #84	; 0x54
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e904:	e853 3f00 	ldrex	r3, [r3]
 800e908:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e910:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91a:	643b      	str	r3, [r7, #64]	; 0x40
 800e91c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e922:	e841 2300 	strex	r3, r2, [r1]
 800e926:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1e6      	bne.n	800e8fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	3308      	adds	r3, #8
 800e934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e936:	6a3b      	ldr	r3, [r7, #32]
 800e938:	e853 3f00 	ldrex	r3, [r3]
 800e93c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e93e:	69fa      	ldr	r2, [r7, #28]
 800e940:	4b1e      	ldr	r3, [pc, #120]	; (800e9bc <UART_EndRxTransfer+0xc8>)
 800e942:	4013      	ands	r3, r2
 800e944:	64bb      	str	r3, [r7, #72]	; 0x48
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3308      	adds	r3, #8
 800e94c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e94e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e956:	e841 2300 	strex	r3, r2, [r1]
 800e95a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1e5      	bne.n	800e92e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e966:	2b01      	cmp	r3, #1
 800e968:	d118      	bne.n	800e99c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	e853 3f00 	ldrex	r3, [r3]
 800e976:	60bb      	str	r3, [r7, #8]
   return(result);
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f023 0310 	bic.w	r3, r3, #16
 800e97e:	647b      	str	r3, [r7, #68]	; 0x44
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	461a      	mov	r2, r3
 800e986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e988:	61bb      	str	r3, [r7, #24]
 800e98a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98c:	6979      	ldr	r1, [r7, #20]
 800e98e:	69ba      	ldr	r2, [r7, #24]
 800e990:	e841 2300 	strex	r3, r2, [r1]
 800e994:	613b      	str	r3, [r7, #16]
   return(result);
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1e6      	bne.n	800e96a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2220      	movs	r2, #32
 800e9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e9b0:	bf00      	nop
 800e9b2:	3754      	adds	r7, #84	; 0x54
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	effffffe 	.word	0xeffffffe

0800e9c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f7ff f850 	bl	800da84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9e4:	bf00      	nop
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b088      	sub	sp, #32
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	e853 3f00 	ldrex	r3, [r3]
 800ea00:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea08:	61fb      	str	r3, [r7, #28]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	461a      	mov	r2, r3
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	61bb      	str	r3, [r7, #24]
 800ea14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	6979      	ldr	r1, [r7, #20]
 800ea18:	69ba      	ldr	r2, [r7, #24]
 800ea1a:	e841 2300 	strex	r3, r2, [r1]
 800ea1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e6      	bne.n	800e9f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2220      	movs	r2, #32
 800ea2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7ff f81b 	bl	800da70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea3a:	bf00      	nop
 800ea3c:	3720      	adds	r7, #32
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea42:	b480      	push	{r7}
 800ea44:	b083      	sub	sp, #12
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea4a:	bf00      	nop
 800ea4c:	370c      	adds	r7, #12
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr

0800ea56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea56:	b480      	push	{r7}
 800ea58:	b083      	sub	sp, #12
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea5e:	bf00      	nop
 800ea60:	370c      	adds	r7, #12
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b083      	sub	sp, #12
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ea72:	bf00      	nop
 800ea74:	370c      	adds	r7, #12
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr

0800ea7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea7e:	b480      	push	{r7}
 800ea80:	b085      	sub	sp, #20
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d101      	bne.n	800ea94 <HAL_UARTEx_DisableFifoMode+0x16>
 800ea90:	2302      	movs	r3, #2
 800ea92:	e027      	b.n	800eae4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2201      	movs	r2, #1
 800ea98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2224      	movs	r2, #36	; 0x24
 800eaa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f022 0201 	bic.w	r2, r2, #1
 800eaba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eac2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2220      	movs	r2, #32
 800ead6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d101      	bne.n	800eb08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb04:	2302      	movs	r3, #2
 800eb06:	e02d      	b.n	800eb64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2224      	movs	r2, #36	; 0x24
 800eb14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f022 0201 	bic.w	r2, r2, #1
 800eb2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	689b      	ldr	r3, [r3, #8]
 800eb36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	430a      	orrs	r2, r1
 800eb42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 f84f 	bl	800ebe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2220      	movs	r2, #32
 800eb56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb62:	2300      	movs	r3, #0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d101      	bne.n	800eb84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb80:	2302      	movs	r3, #2
 800eb82:	e02d      	b.n	800ebe0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2201      	movs	r2, #1
 800eb88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2224      	movs	r2, #36	; 0x24
 800eb90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f022 0201 	bic.w	r2, r2, #1
 800ebaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	430a      	orrs	r2, r1
 800ebbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 f811 	bl	800ebe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2220      	movs	r2, #32
 800ebd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ebde:	2300      	movs	r3, #0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3710      	adds	r7, #16
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d108      	bne.n	800ec0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec08:	e031      	b.n	800ec6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec0a:	2310      	movs	r3, #16
 800ec0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec0e:	2310      	movs	r3, #16
 800ec10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	689b      	ldr	r3, [r3, #8]
 800ec18:	0e5b      	lsrs	r3, r3, #25
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	f003 0307 	and.w	r3, r3, #7
 800ec20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	0f5b      	lsrs	r3, r3, #29
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	f003 0307 	and.w	r3, r3, #7
 800ec30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec32:	7bbb      	ldrb	r3, [r7, #14]
 800ec34:	7b3a      	ldrb	r2, [r7, #12]
 800ec36:	4911      	ldr	r1, [pc, #68]	; (800ec7c <UARTEx_SetNbDataToProcess+0x94>)
 800ec38:	5c8a      	ldrb	r2, [r1, r2]
 800ec3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec3e:	7b3a      	ldrb	r2, [r7, #12]
 800ec40:	490f      	ldr	r1, [pc, #60]	; (800ec80 <UARTEx_SetNbDataToProcess+0x98>)
 800ec42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec44:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec50:	7bfb      	ldrb	r3, [r7, #15]
 800ec52:	7b7a      	ldrb	r2, [r7, #13]
 800ec54:	4909      	ldr	r1, [pc, #36]	; (800ec7c <UARTEx_SetNbDataToProcess+0x94>)
 800ec56:	5c8a      	ldrb	r2, [r1, r2]
 800ec58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec5c:	7b7a      	ldrb	r2, [r7, #13]
 800ec5e:	4908      	ldr	r1, [pc, #32]	; (800ec80 <UARTEx_SetNbDataToProcess+0x98>)
 800ec60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec62:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ec6e:	bf00      	nop
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	0800f3bc 	.word	0x0800f3bc
 800ec80:	0800f3c4 	.word	0x0800f3c4

0800ec84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ec84:	b084      	sub	sp, #16
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b084      	sub	sp, #16
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
 800ec8e:	f107 001c 	add.w	r0, r7, #28
 800ec92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec96:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d121      	bne.n	800ece2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	68da      	ldr	r2, [r3, #12]
 800ecae:	4b2c      	ldr	r3, [pc, #176]	; (800ed60 <USB_CoreInit+0xdc>)
 800ecb0:	4013      	ands	r3, r2
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ecc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d105      	bne.n	800ecd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	68db      	ldr	r3, [r3, #12]
 800ecce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 faaa 	bl	800f230 <USB_CoreReset>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]
 800ece0:	e01b      	b.n	800ed1a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fa9e 	bl	800f230 <USB_CoreReset>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ecf8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d106      	bne.n	800ed0e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	639a      	str	r2, [r3, #56]	; 0x38
 800ed0c:	e005      	b.n	800ed1a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ed1a:	7fbb      	ldrb	r3, [r7, #30]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d116      	bne.n	800ed4e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed2e:	4b0d      	ldr	r3, [pc, #52]	; (800ed64 <USB_CoreInit+0xe0>)
 800ed30:	4313      	orrs	r3, r2
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	f043 0206 	orr.w	r2, r3, #6
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	f043 0220 	orr.w	r2, r3, #32
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ed4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed5a:	b004      	add	sp, #16
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	ffbdffbf 	.word	0xffbdffbf
 800ed64:	03ee0000 	.word	0x03ee0000

0800ed68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	f023 0201 	bic.w	r2, r3, #1
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed7c:	2300      	movs	r3, #0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	370c      	adds	r7, #12
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b084      	sub	sp, #16
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	460b      	mov	r3, r1
 800ed94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ed96:	2300      	movs	r3, #0
 800ed98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eda6:	78fb      	ldrb	r3, [r7, #3]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d115      	bne.n	800edd8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800edb8:	200a      	movs	r0, #10
 800edba:	f7f3 fe9b 	bl	8002af4 <HAL_Delay>
      ms += 10U;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	330a      	adds	r3, #10
 800edc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 fa25 	bl	800f214 <USB_GetMode>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d01e      	beq.n	800ee0e <USB_SetCurrentMode+0x84>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2bc7      	cmp	r3, #199	; 0xc7
 800edd4:	d9f0      	bls.n	800edb8 <USB_SetCurrentMode+0x2e>
 800edd6:	e01a      	b.n	800ee0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800edd8:	78fb      	ldrb	r3, [r7, #3]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d115      	bne.n	800ee0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800edea:	200a      	movs	r0, #10
 800edec:	f7f3 fe82 	bl	8002af4 <HAL_Delay>
      ms += 10U;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	330a      	adds	r3, #10
 800edf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 fa0c 	bl	800f214 <USB_GetMode>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d005      	beq.n	800ee0e <USB_SetCurrentMode+0x84>
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2bc7      	cmp	r3, #199	; 0xc7
 800ee06:	d9f0      	bls.n	800edea <USB_SetCurrentMode+0x60>
 800ee08:	e001      	b.n	800ee0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e005      	b.n	800ee1a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2bc8      	cmp	r3, #200	; 0xc8
 800ee12:	d101      	bne.n	800ee18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e000      	b.n	800ee1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ee18:	2300      	movs	r3, #0
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee24:	b084      	sub	sp, #16
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b086      	sub	sp, #24
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ee32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ee3e:	2300      	movs	r3, #0
 800ee40:	613b      	str	r3, [r7, #16]
 800ee42:	e009      	b.n	800ee58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	3340      	adds	r3, #64	; 0x40
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	4413      	add	r3, r2
 800ee4e:	2200      	movs	r2, #0
 800ee50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	3301      	adds	r3, #1
 800ee56:	613b      	str	r3, [r7, #16]
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2b0e      	cmp	r3, #14
 800ee5c:	d9f2      	bls.n	800ee44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d11c      	bne.n	800eea0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee74:	f043 0302 	orr.w	r3, r3, #2
 800ee78:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	601a      	str	r2, [r3, #0]
 800ee9e:	e005      	b.n	800eeac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eeb8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d10d      	bne.n	800eedc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d104      	bne.n	800eed2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eec8:	2100      	movs	r1, #0
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 f968 	bl	800f1a0 <USB_SetDevSpeed>
 800eed0:	e008      	b.n	800eee4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eed2:	2101      	movs	r1, #1
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 f963 	bl	800f1a0 <USB_SetDevSpeed>
 800eeda:	e003      	b.n	800eee4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eedc:	2103      	movs	r1, #3
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 f95e 	bl	800f1a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eee4:	2110      	movs	r1, #16
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f8fa 	bl	800f0e0 <USB_FlushTxFifo>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800eef2:	2301      	movs	r3, #1
 800eef4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 f924 	bl	800f144 <USB_FlushRxFifo>
 800eefc:	4603      	mov	r3, r0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d001      	beq.n	800ef06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	2300      	movs	r3, #0
 800ef10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef18:	461a      	mov	r2, r3
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef24:	461a      	mov	r2, r3
 800ef26:	2300      	movs	r3, #0
 800ef28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	613b      	str	r3, [r7, #16]
 800ef2e:	e043      	b.n	800efb8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	015a      	lsls	r2, r3, #5
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	4413      	add	r3, r2
 800ef38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef46:	d118      	bne.n	800ef7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d10a      	bne.n	800ef64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	015a      	lsls	r2, r3, #5
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	4413      	add	r3, r2
 800ef56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef60:	6013      	str	r3, [r2, #0]
 800ef62:	e013      	b.n	800ef8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	015a      	lsls	r2, r3, #5
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef70:	461a      	mov	r2, r3
 800ef72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef76:	6013      	str	r3, [r2, #0]
 800ef78:	e008      	b.n	800ef8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	015a      	lsls	r2, r3, #5
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	4413      	add	r3, r2
 800ef82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef86:	461a      	mov	r2, r3
 800ef88:	2300      	movs	r3, #0
 800ef8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	015a      	lsls	r2, r3, #5
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4413      	add	r3, r2
 800ef94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef98:	461a      	mov	r2, r3
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efaa:	461a      	mov	r2, r3
 800efac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800efb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	3301      	adds	r3, #1
 800efb6:	613b      	str	r3, [r7, #16]
 800efb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800efbc:	461a      	mov	r2, r3
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d3b5      	bcc.n	800ef30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efc4:	2300      	movs	r3, #0
 800efc6:	613b      	str	r3, [r7, #16]
 800efc8:	e043      	b.n	800f052 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	015a      	lsls	r2, r3, #5
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	4413      	add	r3, r2
 800efd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efe0:	d118      	bne.n	800f014 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d10a      	bne.n	800effe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	015a      	lsls	r2, r3, #5
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4413      	add	r3, r2
 800eff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff4:	461a      	mov	r2, r3
 800eff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800effa:	6013      	str	r3, [r2, #0]
 800effc:	e013      	b.n	800f026 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	015a      	lsls	r2, r3, #5
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	4413      	add	r3, r2
 800f006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f00a:	461a      	mov	r2, r3
 800f00c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f010:	6013      	str	r3, [r2, #0]
 800f012:	e008      	b.n	800f026 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f020:	461a      	mov	r2, r3
 800f022:	2300      	movs	r3, #0
 800f024:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	015a      	lsls	r2, r3, #5
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	4413      	add	r3, r2
 800f02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f032:	461a      	mov	r2, r3
 800f034:	2300      	movs	r3, #0
 800f036:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	015a      	lsls	r2, r3, #5
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	4413      	add	r3, r2
 800f040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f044:	461a      	mov	r2, r3
 800f046:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f04a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	3301      	adds	r3, #1
 800f050:	613b      	str	r3, [r7, #16]
 800f052:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f056:	461a      	mov	r2, r3
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d3b5      	bcc.n	800efca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f06c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f070:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2200      	movs	r2, #0
 800f076:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f07e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f084:	2b00      	cmp	r3, #0
 800f086:	d105      	bne.n	800f094 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	699b      	ldr	r3, [r3, #24]
 800f08c:	f043 0210 	orr.w	r2, r3, #16
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	699a      	ldr	r2, [r3, #24]
 800f098:	4b0f      	ldr	r3, [pc, #60]	; (800f0d8 <USB_DevInit+0x2b4>)
 800f09a:	4313      	orrs	r3, r2
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f0a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d005      	beq.n	800f0b4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	699b      	ldr	r3, [r3, #24]
 800f0ac:	f043 0208 	orr.w	r2, r3, #8
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f0b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d105      	bne.n	800f0c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	699a      	ldr	r2, [r3, #24]
 800f0c0:	4b06      	ldr	r3, [pc, #24]	; (800f0dc <USB_DevInit+0x2b8>)
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0d4:	b004      	add	sp, #16
 800f0d6:	4770      	bx	lr
 800f0d8:	803c3800 	.word	0x803c3800
 800f0dc:	40000004 	.word	0x40000004

0800f0e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f0fa:	d901      	bls.n	800f100 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f0fc:	2303      	movs	r3, #3
 800f0fe:	e01b      	b.n	800f138 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	691b      	ldr	r3, [r3, #16]
 800f104:	2b00      	cmp	r3, #0
 800f106:	daf2      	bge.n	800f0ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f108:	2300      	movs	r3, #0
 800f10a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	019b      	lsls	r3, r3, #6
 800f110:	f043 0220 	orr.w	r2, r3, #32
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	3301      	adds	r3, #1
 800f11c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f124:	d901      	bls.n	800f12a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f126:	2303      	movs	r3, #3
 800f128:	e006      	b.n	800f138 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	f003 0320 	and.w	r3, r3, #32
 800f132:	2b20      	cmp	r3, #32
 800f134:	d0f0      	beq.n	800f118 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f136:	2300      	movs	r3, #0
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3714      	adds	r7, #20
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f14c:	2300      	movs	r3, #0
 800f14e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	3301      	adds	r3, #1
 800f154:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f15c:	d901      	bls.n	800f162 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f15e:	2303      	movs	r3, #3
 800f160:	e018      	b.n	800f194 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	691b      	ldr	r3, [r3, #16]
 800f166:	2b00      	cmp	r3, #0
 800f168:	daf2      	bge.n	800f150 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f16a:	2300      	movs	r3, #0
 800f16c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2210      	movs	r2, #16
 800f172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	3301      	adds	r3, #1
 800f178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f180:	d901      	bls.n	800f186 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f182:	2303      	movs	r3, #3
 800f184:	e006      	b.n	800f194 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	691b      	ldr	r3, [r3, #16]
 800f18a:	f003 0310 	and.w	r3, r3, #16
 800f18e:	2b10      	cmp	r3, #16
 800f190:	d0f0      	beq.n	800f174 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f192:	2300      	movs	r3, #0
}
 800f194:	4618      	mov	r0, r3
 800f196:	3714      	adds	r7, #20
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	78fb      	ldrb	r3, [r7, #3]
 800f1ba:	68f9      	ldr	r1, [r7, #12]
 800f1bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3714      	adds	r7, #20
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1d2:	b480      	push	{r7}
 800f1d4:	b085      	sub	sp, #20
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f1ec:	f023 0303 	bic.w	r3, r3, #3
 800f1f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f200:	f043 0302 	orr.w	r3, r3, #2
 800f204:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3714      	adds	r7, #20
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	695b      	ldr	r3, [r3, #20]
 800f220:	f003 0301 	and.w	r3, r3, #1
}
 800f224:	4618      	mov	r0, r3
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f238:	2300      	movs	r3, #0
 800f23a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3301      	adds	r3, #1
 800f240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f248:	d901      	bls.n	800f24e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f24a:	2303      	movs	r3, #3
 800f24c:	e01b      	b.n	800f286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	daf2      	bge.n	800f23c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f256:	2300      	movs	r3, #0
 800f258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	691b      	ldr	r3, [r3, #16]
 800f25e:	f043 0201 	orr.w	r2, r3, #1
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3301      	adds	r3, #1
 800f26a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800f272:	d901      	bls.n	800f278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f274:	2303      	movs	r3, #3
 800f276:	e006      	b.n	800f286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	691b      	ldr	r3, [r3, #16]
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	2b01      	cmp	r3, #1
 800f282:	d0f0      	beq.n	800f266 <USB_CoreReset+0x36>

  return HAL_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr

0800f292 <memset>:
 800f292:	4402      	add	r2, r0
 800f294:	4603      	mov	r3, r0
 800f296:	4293      	cmp	r3, r2
 800f298:	d100      	bne.n	800f29c <memset+0xa>
 800f29a:	4770      	bx	lr
 800f29c:	f803 1b01 	strb.w	r1, [r3], #1
 800f2a0:	e7f9      	b.n	800f296 <memset+0x4>
	...

0800f2a4 <__libc_init_array>:
 800f2a4:	b570      	push	{r4, r5, r6, lr}
 800f2a6:	4d0d      	ldr	r5, [pc, #52]	; (800f2dc <__libc_init_array+0x38>)
 800f2a8:	4c0d      	ldr	r4, [pc, #52]	; (800f2e0 <__libc_init_array+0x3c>)
 800f2aa:	1b64      	subs	r4, r4, r5
 800f2ac:	10a4      	asrs	r4, r4, #2
 800f2ae:	2600      	movs	r6, #0
 800f2b0:	42a6      	cmp	r6, r4
 800f2b2:	d109      	bne.n	800f2c8 <__libc_init_array+0x24>
 800f2b4:	4d0b      	ldr	r5, [pc, #44]	; (800f2e4 <__libc_init_array+0x40>)
 800f2b6:	4c0c      	ldr	r4, [pc, #48]	; (800f2e8 <__libc_init_array+0x44>)
 800f2b8:	f000 f85c 	bl	800f374 <_init>
 800f2bc:	1b64      	subs	r4, r4, r5
 800f2be:	10a4      	asrs	r4, r4, #2
 800f2c0:	2600      	movs	r6, #0
 800f2c2:	42a6      	cmp	r6, r4
 800f2c4:	d105      	bne.n	800f2d2 <__libc_init_array+0x2e>
 800f2c6:	bd70      	pop	{r4, r5, r6, pc}
 800f2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2cc:	4798      	blx	r3
 800f2ce:	3601      	adds	r6, #1
 800f2d0:	e7ee      	b.n	800f2b0 <__libc_init_array+0xc>
 800f2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2d6:	4798      	blx	r3
 800f2d8:	3601      	adds	r6, #1
 800f2da:	e7f2      	b.n	800f2c2 <__libc_init_array+0x1e>
 800f2dc:	0800f3d4 	.word	0x0800f3d4
 800f2e0:	0800f3d4 	.word	0x0800f3d4
 800f2e4:	0800f3d4 	.word	0x0800f3d4
 800f2e8:	0800f3d8 	.word	0x0800f3d8

0800f2ec <round>:
 800f2ec:	ee10 1a90 	vmov	r1, s1
 800f2f0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f2f4:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f2f8:	2b13      	cmp	r3, #19
 800f2fa:	b510      	push	{r4, lr}
 800f2fc:	ee10 4a10 	vmov	r4, s0
 800f300:	dc19      	bgt.n	800f336 <round+0x4a>
 800f302:	2b00      	cmp	r3, #0
 800f304:	da09      	bge.n	800f31a <round+0x2e>
 800f306:	3301      	adds	r3, #1
 800f308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800f30c:	d103      	bne.n	800f316 <round+0x2a>
 800f30e:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800f312:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f316:	2000      	movs	r0, #0
 800f318:	e025      	b.n	800f366 <round+0x7a>
 800f31a:	4815      	ldr	r0, [pc, #84]	; (800f370 <round+0x84>)
 800f31c:	4118      	asrs	r0, r3
 800f31e:	ea01 0200 	and.w	r2, r1, r0
 800f322:	4322      	orrs	r2, r4
 800f324:	d00e      	beq.n	800f344 <round+0x58>
 800f326:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f32a:	fa42 f303 	asr.w	r3, r2, r3
 800f32e:	440b      	add	r3, r1
 800f330:	ea23 0100 	bic.w	r1, r3, r0
 800f334:	e7ef      	b.n	800f316 <round+0x2a>
 800f336:	2b33      	cmp	r3, #51	; 0x33
 800f338:	dd05      	ble.n	800f346 <round+0x5a>
 800f33a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f33e:	d101      	bne.n	800f344 <round+0x58>
 800f340:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f344:	bd10      	pop	{r4, pc}
 800f346:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 800f34a:	f04f 32ff 	mov.w	r2, #4294967295
 800f34e:	40c2      	lsrs	r2, r0
 800f350:	4222      	tst	r2, r4
 800f352:	d0f7      	beq.n	800f344 <round+0x58>
 800f354:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800f358:	2001      	movs	r0, #1
 800f35a:	4098      	lsls	r0, r3
 800f35c:	1900      	adds	r0, r0, r4
 800f35e:	bf28      	it	cs
 800f360:	3101      	addcs	r1, #1
 800f362:	ea20 0002 	bic.w	r0, r0, r2
 800f366:	460b      	mov	r3, r1
 800f368:	4602      	mov	r2, r0
 800f36a:	ec43 2b10 	vmov	d0, r2, r3
 800f36e:	e7e9      	b.n	800f344 <round+0x58>
 800f370:	000fffff 	.word	0x000fffff

0800f374 <_init>:
 800f374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f376:	bf00      	nop
 800f378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f37a:	bc08      	pop	{r3}
 800f37c:	469e      	mov	lr, r3
 800f37e:	4770      	bx	lr

0800f380 <_fini>:
 800f380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f382:	bf00      	nop
 800f384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f386:	bc08      	pop	{r3}
 800f388:	469e      	mov	lr, r3
 800f38a:	4770      	bx	lr
